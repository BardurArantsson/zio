"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2404],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(t),d=i,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8451:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var r=t(7462),i=t(3366),o=(t(7294),t(3905)),a=["components"],s={id:"zio-aws",title:"ZIO AWS"},c=void 0,l={unversionedId:"resources/ecosystem/community/zio-aws",id:"resources/ecosystem/community/zio-aws",title:"ZIO AWS",description:"ZIO AWS is a low-level AWS wrapper for ZIO for all the AWS services using the AWS Java SDK v2.",source:"@site/docs/resources/ecosystem/community/zio-aws.md",sourceDirName:"resources/ecosystem/community",slug:"/resources/ecosystem/community/zio-aws",permalink:"/next/resources/ecosystem/community/zio-aws",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/resources/ecosystem/community/zio-aws.md",tags:[],version:"current",frontMatter:{id:"zio-aws",title:"ZIO AWS"},sidebar:"resources-sidebar",previous:{title:"ZIO Arrow",permalink:"/next/resources/ecosystem/community/zio-arrow"},next:{title:"ZIO AWS S3",permalink:"/next/resources/ecosystem/community/zio-aws-s3"}},p=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],u={toc:p};function m(e){var n=e.components,t=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/vigoo/zio-aws"},"ZIO AWS")," is a low-level AWS wrapper for ZIO for all the AWS services using the AWS Java SDK v2."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The goal is to have access to all AWS functionality for cases when only simple, direct access is needed from a ZIO application, or to be used as a building block for higher-level wrappers around specific services."),(0,o.kt)("p",null,"Key features of ZIO AWS:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Common configuration layer"),(0,o.kt)("li",{parentName:"ul"},"ZIO module layer per AWS service"),(0,o.kt)("li",{parentName:"ul"},"Wrapper for all operations on all services"),(0,o.kt)("li",{parentName:"ul"},"HTTP service implementations for functional Scala HTTP libraries, injected through ZIO\u2019s module system"),(0,o.kt)("li",{parentName:"ul"},"ZStream wrapper around paginated operations"),(0,o.kt)("li",{parentName:"ul"},"Service-specific extra configuration"),(0,o.kt)("li",{parentName:"ul"},"More idiomatic Scala request and response types wrapping the Java classes")),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"There are tones of artifacts ",(0,o.kt)("a",{parentName:"p",href:"https://vigoo.github.io/zio-aws/docs/artifacts.html"},"published")," for each AWS service. We can pick whichever services we need."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"The following example uses the ",(0,o.kt)("em",{parentName:"p"},"ElasticBeanstalk")," and ",(0,o.kt)("em",{parentName:"p"},"EC2")," APIs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "io.github.vigoo" %% "zio-aws-core"             % "3.17.8.4",\nlibraryDependencies += "io.github.vigoo" %% "zio-aws-ec2"              % "3.17.8.4",\nlibraryDependencies += "io.github.vigoo" %% "zio-aws-elasticbeanstalk" % "3.17.8.4",\nlibraryDependencies += "io.github.vigoo" %% "zio-aws-netty"            % "3.17.8.4"\n')),(0,o.kt)("p",null,"And here is the example code:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import io.github.vigoo.zioaws.core.AwsError\nimport io.github.vigoo.zioaws.ec2.Ec2\nimport io.github.vigoo.zioaws.ec2.model._\nimport io.github.vigoo.zioaws.elasticbeanstalk.ElasticBeanstalk\nimport io.github.vigoo.zioaws.elasticbeanstalk.model._\nimport io.github.vigoo.zioaws.{core, ec2, elasticbeanstalk, netty}\nimport zio.console._\nimport zio.stream._\nimport zio.{console, _}\n\nobject ZIOAWSExample extends zio.App {\n  val program: ZIO[Console with Ec2 with ElasticBeanstalk, AwsError, Unit] =\n    for {\n      appsResult <- elasticbeanstalk.describeApplications(\n        DescribeApplicationsRequest(applicationNames = Some(List("my-service")))\n      )\n      app <- appsResult.applications.map(_.headOption)\n      _ <- app match {\n        case Some(appDescription) =>\n          for {\n            applicationName <- appDescription.applicationName\n            _ <- console.putStrLn(\n              s"Got application description for $applicationName"\n            ).ignore\n\n            envStream = elasticbeanstalk.describeEnvironments(\n              DescribeEnvironmentsRequest(applicationName =\n                Some(applicationName)\n              )\n            )\n\n            _ <- envStream.run(Sink.foreach { env =>\n              env.environmentName.flatMap { environmentName =>\n                (for {\n                  environmentId <- env.environmentId\n                  _ <- console.putStrLn(\n                    s"Getting the EB resources of $environmentName"\n                  ).ignore\n\n                  resourcesResult <-\n                    elasticbeanstalk.describeEnvironmentResources(\n                      DescribeEnvironmentResourcesRequest(environmentId =\n                        Some(environmentId)\n                      )\n                    )\n                  resources <- resourcesResult.environmentResources\n                  _ <- console.putStrLn(\n                    s"Getting the EC2 instances in $environmentName"\n                  ).ignore\n                  instances <- resources.instances\n                  instanceIds <- ZIO.foreach(instances)(_.id)\n                  _ <- console.putStrLn(\n                    s"Instance IDs are ${instanceIds.mkString(", ")}"\n                  ).ignore\n\n                  reservationsStream = ec2.describeInstances(\n                    DescribeInstancesRequest(instanceIds = Some(instanceIds))\n                  )\n                  _ <- reservationsStream.run(Sink.foreach { reservation =>\n                    reservation.instances\n                      .flatMap { instances =>\n                        ZIO.foreach(instances) { instance =>\n                          for {\n                            id <- instance.instanceId\n                            typ <- instance.instanceType\n                            launchTime <- instance.launchTime\n                            _ <- console.putStrLn(s"  instance $id:").ignore\n                            _ <- console.putStrLn(s"    type: $typ").ignore\n                            _ <- console.putStrLn(\n                              s"    launched at: $launchTime"\n                            ).ignore\n                          } yield ()\n                        }\n                      }\n                  })\n                } yield ()).catchAll { error =>\n                  console.putStrLnErr(\n                    s"Failed to get info for $environmentName: $error"\n                  ).ignore\n                }\n              }\n            })\n          } yield ()\n        case None =>\n          ZIO.unit\n      }\n    } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] = { //\n    val httpClient = netty.default\n    val awsConfig  = httpClient >>> core.config.default\n    val aws        = awsConfig >>> (ec2.live ++ elasticbeanstalk.live)\n\n    program\n      .provideCustom(aws)\n      .either\n      .flatMap {\n        case Left(error) =>\n          console.putStrErr(s"AWS error: $error").ignore.as(ExitCode.failure)\n        case Right(_) =>\n          ZIO.unit.as(ExitCode.success)\n      }\n  }\n}\n')))}m.isMDXComponent=!0}}]);