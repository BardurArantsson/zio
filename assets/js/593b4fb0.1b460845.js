"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[7065],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return b}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),b=a,f=m["".concat(u,".").concat(b)]||m[b]||l[b]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9395:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"zthub",title:"ZTHub"},u=void 0,p={unversionedId:"datatypes/stm/zthub",id:"datatypes/stm/zthub",title:"ZTHub",description:"A ZTHub[RA, RB, EA, EB, A, B] is a transactional message hub. Publishers can publish messages of type A to the hub and subscribers can subscribe to take messages of type B from the hub. Publishing messages can require an environment of type RA and fail with an error of type EA. Taking messages can require an environment of type RB and fail with an error of",source:"@site/docs/datatypes/stm/zthub.md",sourceDirName:"datatypes/stm",slug:"/datatypes/stm/zthub",permalink:"/next/datatypes/stm/zthub",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/stm/zthub.md",tags:[],version:"current",frontMatter:{id:"zthub",title:"ZTHub"},sidebar:"datatypes-sidebar",previous:{title:"TSemaphore",permalink:"/next/datatypes/stm/tsemaphore"},next:{title:"Introduction",permalink:"/next/datatypes/resource/"}},c=[],l={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"ZTHub[RA, RB, EA, EB, A, B]")," is a transactional message hub. Publishers can publish messages of type ",(0,i.kt)("inlineCode",{parentName:"p"},"A")," to the hub and subscribers can subscribe to take messages of type ",(0,i.kt)("inlineCode",{parentName:"p"},"B")," from the hub. Publishing messages can require an environment of type ",(0,i.kt)("inlineCode",{parentName:"p"},"RA")," and fail with an error of type ",(0,i.kt)("inlineCode",{parentName:"p"},"EA"),". Taking messages can require an environment of type ",(0,i.kt)("inlineCode",{parentName:"p"},"RB")," and fail with an error of\ntype ",(0,i.kt)("inlineCode",{parentName:"p"},"EB"),"."),(0,i.kt)("p",null,"A ",(0,i.kt)("inlineCode",{parentName:"p"},"ZTHub")," is an asynchronous message hub like ",(0,i.kt)("inlineCode",{parentName:"p"},"ZHub")," but it can participate in STM transactions. APIs are almost identical, but they are in the ",(0,i.kt)("inlineCode",{parentName:"p"},"STM")," world rather than the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO")," world."),(0,i.kt)("p",null,"The fundamental operators on a ",(0,i.kt)("inlineCode",{parentName:"p"},"ZTHub")," are ",(0,i.kt)("inlineCode",{parentName:"p"},"publish")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"subscribe"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"trait ZTHub[-RA, -RB, +EA, +EB, -A, +B] {\n  def publish(a: A): ZSTM[RA, EA, Boolean]\n  def subscribe: USTM[ZTDequeue[RB, EB, B]]\n}\n")))}m.isMDXComponent=!0}}]);