"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[31425],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},91495:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(87462),a=(t(67294),t(3905));const i={id:"examples",title:"Examples"},o="Examples",s={unversionedId:"examples",id:"examples",title:"Examples",description:"The following example uses the ElasticBeanstalk and EC2 APIs to print some info.",source:"@site/node_modules/@zio.dev/zio-aws/examples.md",sourceDirName:".",slug:"/examples",permalink:"/zio-aws/examples",draft:!1,tags:[],version:"current",frontMatter:{id:"examples",title:"Examples"},sidebar:"sidebar",previous:{title:"Aspects",permalink:"/zio-aws/aspects"},next:{title:"Changelog",permalink:"/zio-aws/changelog"}},c={},l=[],p={toc:l};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"examples"},"Examples"),(0,a.kt)("p",null,"The following example uses the ElasticBeanstalk and EC2 APIs to print some info. "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'object Main extends ZIOAppDefault {\n  val program: ZIO[Ec2 & ElasticBeanstalk, AwsError, Unit] =\n    for {\n      appsResult <- ElasticBeanstalk.describeApplications(\n        DescribeApplicationsRequest(applicationNames = Some(List(ApplicationName("my-service"))))\n      )\n      app <- appsResult.getApplications.map(_.headOption)\n      _ <- app match {\n        case Some(appDescription) =>\n          for {\n            applicationName <- appDescription.getApplicationName\n            _ <- Console\n              .printLine(\n                s"Got application description for $applicationName"\n              )\n              .ignore\n\n            envStream = ElasticBeanstalk.describeEnvironments(\n              DescribeEnvironmentsRequest(applicationName =\n                Some(applicationName)\n              )\n            )\n\n            _ <- envStream.run(ZSink.foreach { env =>\n              env.getEnvironmentName.flatMap { environmentName =>\n                (for {\n                  environmentId <- env.getEnvironmentId\n                  _ <- Console\n                    .printLine(\n                      s"Getting the EB resources of $environmentName"\n                    )\n                    .ignore\n\n                  resourcesResult <-\n                    ElasticBeanstalk.describeEnvironmentResources(\n                      DescribeEnvironmentResourcesRequest(environmentId =\n                        Some(environmentId)\n                      )\n                    )\n                  resources <- resourcesResult.getEnvironmentResources\n                  _ <- Console\n                    .printLine(\n                      s"Getting the EC2 instances in $environmentName"\n                    )\n                    .ignore\n                  instances <- resources.getInstances\n                  instanceIds <- ZIO.foreach(instances)(_.getId)\n                  _ <- Console\n                    .printLine(\n                      s"Instance IDs are ${instanceIds.mkString(", ")}"\n                    )\n                    .ignore\n\n                  reservationsStream = Ec2.describeInstances(\n                    DescribeInstancesRequest(instanceIds = Some(instanceIds.map(id => zio.aws.ec2.model.primitives.InstanceId(ResourceId.unwrap(id)))))\n                  )\n                  _ <- reservationsStream.run(ZSink.foreach { reservation =>\n                    reservation.getInstances\n                      .flatMap { instances =>\n                        ZIO.foreach(instances) { instance =>\n                          for {\n                            id <- instance.getInstanceId\n                            typ <- instance.getInstanceType\n                            launchTime <- instance.getLaunchTime\n                            _ <- Console.printLine(s"  instance $id:").ignore\n                            _ <- Console.printLine(s"    type: $typ").ignore\n                            _ <- Console\n                              .printLine(\n                                s"    launched at: $launchTime"\n                              )\n                              .ignore\n                          } yield ()\n                        }\n                      }\n                  })\n                } yield ()).catchAll { error =>\n                  Console\n                    .printLineError(\n                      s"Failed to get info for $environmentName: $error"\n                    )\n                    .ignore\n                }\n              }\n            })\n          } yield ()\n        case None =>\n          ZIO.unit\n      }\n    } yield ()\n\n  override def run: URIO[ZIOAppArgs with zio.Scope, ExitCode] = {\n    val httpClient = NettyHttpClient.default\n    val awsConfig = httpClient >>> AwsConfig.default\n    val aws = awsConfig >>> (Ec2.live ++ ElasticBeanstalk.live)\n\n    program\n      .provideLayer(aws)\n      .either\n      .flatMap {\n        case Left(error) =>\n          Console.printLineError(s"AWS error: $error").ignore.as(ExitCode.failure)\n        case Right(_) =>\n          ZIO.unit.as(ExitCode.success)\n      }\n  }\n}\n')))}m.isMDXComponent=!0}}]);