"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[7535],{1290:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"1.x","label":"ZIO 1.x","banner":null,"badge":true,"className":"docs-version-1.x","isLast":true,"docsSidebars":{"overview-sidebar":[{"type":"category","collapsed":true,"collapsible":true,"label":"Overview","items":[{"type":"link","label":"Summary","href":"/version-1.x/overview/","docId":"overview/overview_index"},{"type":"link","label":"Creating Effects","href":"/version-1.x/overview/overview_creating_effects","docId":"overview/overview_creating_effects"},{"type":"link","label":"Basic Operations","href":"/version-1.x/overview/overview_basic_operations","docId":"overview/overview_basic_operations"},{"type":"link","label":"Handling Errors","href":"/version-1.x/overview/overview_handling_errors","docId":"overview/overview_handling_errors"},{"type":"link","label":"Handling Resources","href":"/version-1.x/overview/overview_handling_resources","docId":"overview/overview_handling_resources"},{"type":"link","label":"Basic Concurrency","href":"/version-1.x/overview/overview_basic_concurrency","docId":"overview/overview_basic_concurrency"},{"type":"link","label":"Testing Effects","href":"/version-1.x/overview/overview_testing_effects","docId":"overview/overview_testing_effects"},{"type":"link","label":"Running Effects","href":"/version-1.x/overview/overview_running_effects","docId":"overview/overview_running_effects"},{"type":"link","label":"Background","href":"/version-1.x/overview/overview_background","docId":"overview/overview_background"},{"type":"link","label":"Performance","href":"/version-1.x/overview/overview_performance","docId":"overview/overview_performance"},{"type":"link","label":"Platforms","href":"/version-1.x/overview/overview_platforms","docId":"overview/overview_platforms"}]}],"datatypes-sidebar":[{"type":"category","collapsed":true,"collapsible":true,"label":"Overview","items":[{"type":"link","label":"Introduction","href":"/version-1.x/datatypes/","docId":"datatypes/index"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Core Data Types","items":[{"type":"link","label":"Summary","href":"/version-1.x/datatypes/core/","docId":"datatypes/core/index"},{"type":"link","label":"ZIO","href":"/version-1.x/datatypes/core/zio","docId":"datatypes/core/zio"},{"type":"link","label":"UIO","href":"/version-1.x/datatypes/core/uio","docId":"datatypes/core/uio"},{"type":"link","label":"URIO","href":"/version-1.x/datatypes/core/urio","docId":"datatypes/core/urio"},{"type":"link","label":"Task","href":"/version-1.x/datatypes/core/task","docId":"datatypes/core/task"},{"type":"link","label":"RIO","href":"/version-1.x/datatypes/core/rio","docId":"datatypes/core/rio"},{"type":"link","label":"IO","href":"/version-1.x/datatypes/core/io","docId":"datatypes/core/io"},{"type":"link","label":"Exit","href":"/version-1.x/datatypes/core/exit","docId":"datatypes/core/exit"},{"type":"link","label":"Cause","href":"/version-1.x/datatypes/core/cause","docId":"datatypes/core/cause"},{"type":"link","label":"Runtime","href":"/version-1.x/datatypes/core/runtime","docId":"datatypes/core/runtime"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Contextual Types","items":[{"type":"link","label":"Introduction","href":"/version-1.x/datatypes/contextual/","docId":"datatypes/contextual/index"},{"type":"link","label":"Has","href":"/version-1.x/datatypes/contextual/has","docId":"datatypes/contextual/has"},{"type":"link","label":"ZLayer","href":"/version-1.x/datatypes/contextual/zlayer","docId":"datatypes/contextual/zlayer"},{"type":"link","label":"RLayer","href":"/version-1.x/datatypes/contextual/rlayer","docId":"datatypes/contextual/rlayer"},{"type":"link","label":"ULayer","href":"/version-1.x/datatypes/contextual/ulayer","docId":"datatypes/contextual/ulayer"},{"type":"link","label":"Layer","href":"/version-1.x/datatypes/contextual/layer","docId":"datatypes/contextual/layer"},{"type":"link","label":"URLayer","href":"/version-1.x/datatypes/contextual/urlayer","docId":"datatypes/contextual/urlayer"},{"type":"link","label":"TaskLayer","href":"/version-1.x/datatypes/contextual/tasklayer","docId":"datatypes/contextual/tasklayer"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Fiber Primitives","items":[{"type":"link","label":"Introduction","href":"/version-1.x/datatypes/fiber/","docId":"datatypes/fiber/index"},{"type":"link","label":"Fiber","href":"/version-1.x/datatypes/fiber/","docId":"datatypes/fiber/fiber"},{"type":"link","label":"FiberRef","href":"/version-1.x/datatypes/fiber/fiberref","docId":"datatypes/fiber/fiberref"},{"type":"link","label":"Fiber.Id","href":"/version-1.x/datatypes/fiber/fiberid","docId":"datatypes/fiber/fiberid"},{"type":"link","label":"Fiber.Status","href":"/version-1.x/datatypes/fiber/fiberstatus","docId":"datatypes/fiber/fiberstatus"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Concurrency Primitives","items":[{"type":"link","label":"Introduction","href":"/version-1.x/datatypes/concurrency/","docId":"datatypes/concurrency/index"},{"type":"link","label":"ZRef","href":"/version-1.x/datatypes/concurrency/zref","docId":"datatypes/concurrency/zref"},{"type":"link","label":"Ref","href":"/version-1.x/datatypes/concurrency/ref","docId":"datatypes/concurrency/ref"},{"type":"link","label":"ZRefM","href":"/version-1.x/datatypes/concurrency/zrefm","docId":"datatypes/concurrency/zrefm"},{"type":"link","label":"RefM","href":"/version-1.x/datatypes/concurrency/refm","docId":"datatypes/concurrency/refm"},{"type":"link","label":"Promise","href":"/version-1.x/datatypes/concurrency/promise","docId":"datatypes/concurrency/promise"},{"type":"link","label":"Queue","href":"/version-1.x/datatypes/concurrency/queue","docId":"datatypes/concurrency/queue"},{"type":"link","label":"Hub","href":"/version-1.x/datatypes/concurrency/hub","docId":"datatypes/concurrency/hub"},{"type":"link","label":"Semaphore","href":"/version-1.x/datatypes/concurrency/semaphore","docId":"datatypes/concurrency/semaphore"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"STM","items":[{"type":"link","label":"Introduction","href":"/version-1.x/datatypes/stm/","docId":"datatypes/stm/index"},{"type":"link","label":"STM","href":"/version-1.x/datatypes/stm/","docId":"datatypes/stm/stm"},{"type":"link","label":"TArray","href":"/version-1.x/datatypes/stm/tarray","docId":"datatypes/stm/tarray"},{"type":"link","label":"TSet","href":"/version-1.x/datatypes/stm/tset","docId":"datatypes/stm/tset"},{"type":"link","label":"TMap","href":"/version-1.x/datatypes/stm/tmap","docId":"datatypes/stm/tmap"},{"type":"link","label":"TRef","href":"/version-1.x/datatypes/stm/tref","docId":"datatypes/stm/tref"},{"type":"link","label":"TPriorityQueue","href":"/version-1.x/datatypes/stm/tpriorityqueue","docId":"datatypes/stm/tpriorityqueue"},{"type":"link","label":"TPromise","href":"/version-1.x/datatypes/stm/tpromise","docId":"datatypes/stm/tpromise"},{"type":"link","label":"TQueue","href":"/version-1.x/datatypes/stm/tqueue","docId":"datatypes/stm/tqueue"},{"type":"link","label":"TReentrantLock","href":"/version-1.x/datatypes/stm/treentrantlock","docId":"datatypes/stm/treentrantlock"},{"type":"link","label":"TSemaphore","href":"/version-1.x/datatypes/stm/tsemaphore","docId":"datatypes/stm/tsemaphore"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Resource Safety","items":[{"type":"link","label":"Introduction","href":"/version-1.x/datatypes/resource/","docId":"datatypes/resource/index"},{"type":"link","label":"ZManaged","href":"/version-1.x/datatypes/resource/zmanaged","docId":"datatypes/resource/zmanaged"},{"type":"link","label":"Managed","href":"/version-1.x/datatypes/resource/managed","docId":"datatypes/resource/managed"},{"type":"link","label":"TaskManaged","href":"/version-1.x/datatypes/resource/task-managed","docId":"datatypes/resource/task-managed"},{"type":"link","label":"RManaged","href":"/version-1.x/datatypes/resource/rmanaged","docId":"datatypes/resource/rmanaged"},{"type":"link","label":"UManaged","href":"/version-1.x/datatypes/resource/umanaged","docId":"datatypes/resource/umanaged"},{"type":"link","label":"URManaged","href":"/version-1.x/datatypes/resource/urmanaged","docId":"datatypes/resource/urmanaged"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Streaming","items":[{"type":"link","label":"Introduction","href":"/version-1.x/datatypes/stream/","docId":"datatypes/stream/index"},{"type":"link","label":"ZStream","href":"/version-1.x/datatypes/stream/zstream","docId":"datatypes/stream/zstream"},{"type":"link","label":"Stream","href":"/version-1.x/datatypes/stream/","docId":"datatypes/stream/stream"},{"type":"link","label":"UStream","href":"/version-1.x/datatypes/stream/ustream","docId":"datatypes/stream/ustream"},{"type":"link","label":"ZTransducer","href":"/version-1.x/datatypes/stream/ztransducer","docId":"datatypes/stream/ztransducer"},{"type":"link","label":"Transducer","href":"/version-1.x/datatypes/stream/transducer","docId":"datatypes/stream/transducer"},{"type":"link","label":"ZSink","href":"/version-1.x/datatypes/stream/zsink","docId":"datatypes/stream/zsink"},{"type":"link","label":"Sink","href":"/version-1.x/datatypes/stream/sink","docId":"datatypes/stream/sink"},{"type":"link","label":"SubscriptionRef","href":"/version-1.x/datatypes/stream/subscription-ref","docId":"datatypes/stream/subscription-ref"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Miscellaneous","items":[{"type":"link","label":"Summary","href":"/version-1.x/datatypes/misc/","docId":"datatypes/misc/index"},{"type":"link","label":"Chunk","href":"/version-1.x/datatypes/misc/chunk","docId":"datatypes/misc/chunk"},{"type":"link","label":"Schedule","href":"/version-1.x/datatypes/misc/schedule","docId":"datatypes/misc/schedule"},{"type":"link","label":"Supervisor","href":"/version-1.x/datatypes/misc/supervisor","docId":"datatypes/misc/supervisor"}]}],"services-sidebar":[{"type":"category","collapsed":true,"collapsible":true,"label":"Services","items":[{"type":"link","label":"Introduction","href":"/version-1.x/services/","docId":"services/index"},{"type":"link","label":"Console","href":"/version-1.x/services/console","docId":"services/console"},{"type":"link","label":"Clock","href":"/version-1.x/services/clock","docId":"services/clock"},{"type":"link","label":"Random","href":"/version-1.x/services/random","docId":"services/random"},{"type":"link","label":"Blocking","href":"/version-1.x/services/blocking","docId":"services/blocking"},{"type":"link","label":"System","href":"/version-1.x/services/system","docId":"services/system"}]}],"usecases-sidebar":[{"type":"category","collapsed":true,"collapsible":true,"label":"Use Cases","items":[{"type":"link","label":"Summary","href":"/version-1.x/usecases/","docId":"usecases/usecases_index"},{"type":"link","label":"Asynchronous","href":"/version-1.x/usecases/usecases_asynchronous","docId":"usecases/usecases_asynchronous"},{"type":"link","label":"Concurrency","href":"/version-1.x/usecases/usecases_concurrency","docId":"usecases/usecases_concurrency"},{"type":"link","label":"Parallelism","href":"/version-1.x/usecases/usecases_parallelism","docId":"usecases/usecases_parallelism"},{"type":"link","label":"Queueing","href":"/version-1.x/usecases/usecases_queueing","docId":"usecases/usecases_queueing"},{"type":"link","label":"Retrying","href":"/version-1.x/usecases/usecases_retrying","docId":"usecases/usecases_retrying"},{"type":"link","label":"Scheduling","href":"/version-1.x/usecases/usecases_scheduling","docId":"usecases/usecases_scheduling"},{"type":"link","label":"Streaming","href":"/version-1.x/usecases/usecases_streaming","docId":"usecases/usecases_streaming"},{"type":"link","label":"Testing","href":"/version-1.x/usecases/usecases_testing","docId":"usecases/usecases_testing"}]}],"howto-sidebar":[{"type":"category","collapsed":true,"collapsible":true,"label":"Overview","items":[{"type":"link","label":"Summary","href":"/version-1.x/howto/","docId":"howto/index"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"How to","items":[{"type":"link","label":"How to Use Test Assertions","href":"/version-1.x/howto/use-test-assertions","docId":"howto/use-test-assertions"},{"type":"link","label":"How to Test effects?","href":"/version-1.x/howto/test-effects","docId":"howto/test-effects"},{"type":"link","label":"How to Mock Services?","href":"/version-1.x/howto/mock-services","docId":"howto/mock-services"},{"type":"link","label":"How to Handle Errors?","href":"/version-1.x/howto/handle-errors","docId":"howto/handle-errors"},{"type":"link","label":"How to Access System Information?","href":"/version-1.x/howto/access-system-information","docId":"howto/access-system-information"},{"type":"link","label":"How to use ZIO Macros?","href":"/version-1.x/howto/use-zio-macros","docId":"howto/use-zio-macros"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Interop","items":[{"type":"link","label":"How to Interop with Cats Effect?","href":"/version-1.x/howto/interop/with-cats-effect","docId":"howto/interop/with-cats-effect"},{"type":"link","label":"How to Interop with Future?","href":"/version-1.x/howto/interop/with-future","docId":"howto/interop/with-future"},{"type":"link","label":"How to Interop with Java?","href":"/version-1.x/howto/interop/with-java","docId":"howto/interop/with-java"},{"type":"link","label":"How to Interop with JavaScript?","href":"/version-1.x/howto/interop/with-javascript","docId":"howto/interop/with-javascript"},{"type":"link","label":"How to Interop with Monix?","href":"/version-1.x/howto/interop/with-monix","docId":"howto/interop/with-monix"},{"type":"link","label":"How to Interop with Scalaz 7.x?","href":"/version-1.x/howto/interop/with-scalaz-7x","docId":"howto/interop/with-scalaz-7x"},{"type":"link","label":"How to Interop with Reactive Streams?","href":"/version-1.x/howto/interop/with-reactive-streams","docId":"howto/interop/with-reactive-streams"},{"type":"link","label":"How to Interop with Twitter?","href":"/version-1.x/howto/interop/with-twitter","docId":"howto/interop/with-twitter"},{"type":"link","label":"How to Interop with Guava?","href":"/version-1.x/howto/interop/with-guava","docId":"howto/interop/with-guava"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Migrate","items":[{"type":"link","label":"How to Migrate from Monix to ZIO?","href":"/version-1.x/howto/migrate/from-monix","docId":"howto/migrate/from-monix"}]}],"resources-sidebar":[{"type":"category","collapsed":true,"collapsible":true,"label":"Overview","items":[{"type":"link","label":"Summary","href":"/version-1.x/resources/","docId":"resources/index"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Learning","items":[{"type":"link","label":"Articles","href":"/version-1.x/resources/learning/articles","docId":"resources/learning/articles"},{"type":"link","label":"Videos","href":"/version-1.x/resources/learning/videos","docId":"resources/learning/videos"},{"type":"link","label":"Cookbooks","href":"/version-1.x/resources/learning/cookbooks","docId":"resources/learning/cookbooks"},{"type":"link","label":"Cheat Sheets","href":"/version-1.x/resources/learning/cheatsheets","docId":"resources/learning/cheatsheets"},{"type":"link","label":"Sample Projects","href":"/version-1.x/resources/learning/sampleprojects","docId":"resources/learning/sampleprojects"},{"type":"link","label":"Projects using ZIO","href":"/version-1.x/resources/learning/poweredbyzio","docId":"resources/learning/poweredbyzio"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Ecosystem","items":[{"type":"link","label":"Official ZIO Libraries","href":"/version-1.x/resources/ecosystem/officials","docId":"resources/ecosystem/officials"},{"type":"link","label":"Community ZIO Libraries","href":"/version-1.x/resources/ecosystem/community","docId":"resources/ecosystem/community"},{"type":"link","label":"ZIO Compatible Libraries","href":"/version-1.x/resources/ecosystem/compatible","docId":"resources/ecosystem/compatible"},{"type":"link","label":"Tools for ZIO","href":"/version-1.x/resources/ecosystem/tools","docId":"resources/ecosystem/tools"},{"type":"link","label":"Project Templates","href":"/version-1.x/resources/ecosystem/templates","docId":"resources/ecosystem/templates"}]}],"about-sidebar":[{"type":"category","collapsed":true,"collapsible":true,"label":"About","items":[{"type":"link","label":"About ZIO","href":"/version-1.x/about/","docId":"about/about_index"},{"type":"link","label":"ZIO Coding Guidelines","href":"/version-1.x/about/about_coding_guidelines","docId":"about/about_coding_guidelines"},{"type":"link","label":"ZIO Contributor Guidelines","href":"/version-1.x/about/about_contributing","docId":"about/about_contributing"},{"type":"link","label":"ZIO Code of Conduct","href":"/version-1.x/about/about_coc","docId":"about/about_coc"}]}]},"docs":{"about/about_coc":{"id":"about/about_coc","title":"ZIO Code of Conduct","description":"We are committed to providing a friendly, safe and welcoming","sidebar":"about-sidebar"},"about/about_coding_guidelines":{"id":"about/about_coding_guidelines","title":"ZIO Coding Guidelines","description":"These are coding guidelines strictly for ZIO contributors for ZIO projects and","sidebar":"about-sidebar"},"about/about_contributing":{"id":"about/about_contributing","title":"ZIO Contributor Guidelines","description":"Thank you for your interest in contributing to ZIO, which is a small, zero-dependency library for doing type-safe, composable concurrent and asynchronous programming!","sidebar":"about-sidebar"},"about/about_index":{"id":"about/about_index","title":"About ZIO","description":"Type-safe, composable asynchronous and concurrent programming for Scala","sidebar":"about-sidebar"},"can_fail":{"id":"can_fail","title":"Compile Time Errors for Handling Combinators","description":"ZIO provides a variety of combinators to handle errors such as orElse, catchAll, catchSome, option, either, and retry. However, these combinators only make sense for effects that can fail (i.e. where the error type is not Nothing). To help you identify code that doesn\'t make sense, error handling combinators require implicit evidence CanFail[E], which is automatically available for all types except Nothing. The table below includes a list of combinators that only make sense for effects that can fail along with value preserving rewrites."},"datatypes/concurrency/hub":{"id":"datatypes/concurrency/hub","title":"Hub","description":"A Hub[A] is an asynchronous message hub. Publishers can publish messages of type A to the hub and subscribers can subscribe to receive messages of type A from the hub.","sidebar":"datatypes-sidebar"},"datatypes/concurrency/index":{"id":"datatypes/concurrency/index","title":"Introduction","description":"Overview","sidebar":"datatypes-sidebar"},"datatypes/concurrency/promise":{"id":"datatypes/concurrency/promise","title":"Promise","description":"A Promise[E, A] is a variable of IO[E, A] type that can be set exactly once.","sidebar":"datatypes-sidebar"},"datatypes/concurrency/queue":{"id":"datatypes/concurrency/queue","title":"Queue","description":"Queue is a lightweight in-memory queue built on ZIO with composable and transparent back-pressure. It is fully asynchronous (no locks or blocking), purely-functional and type-safe.","sidebar":"datatypes-sidebar"},"datatypes/concurrency/ref":{"id":"datatypes/concurrency/ref","title":"Ref","description":"Ref[A] models a mutable reference to a value of type A in which we can store immutable data. The two basic operations are set, which fills the Ref with a new value, and get, which retrieves its current content. All operations on a Ref are atomic and thread-safe, providing a reliable foundation for synchronizing concurrent programs.","sidebar":"datatypes-sidebar"},"datatypes/concurrency/refm":{"id":"datatypes/concurrency/refm","title":"RefM","description":"RefM[A] models a mutable reference to a value of type A in which we can store immutable data, and update it atomically and effectfully.","sidebar":"datatypes-sidebar"},"datatypes/concurrency/semaphore":{"id":"datatypes/concurrency/semaphore","title":"Semaphore","description":"A Semaphore datatype which allows synchronization between fibers with the withPermit operation, which safely acquires and releases a permit.","sidebar":"datatypes-sidebar"},"datatypes/concurrency/zref":{"id":"datatypes/concurrency/zref","title":"ZRef","description":"A ZRef[EA, EB, A, B] is a polymorphic, purely functional description of a mutable reference. The fundamental operations of a ZRef are set and get.","sidebar":"datatypes-sidebar"},"datatypes/concurrency/zrefm":{"id":"datatypes/concurrency/zrefm","title":"ZRefM","description":"A ZRefM[RA, RB, EA, EB, A, B] is a polymorphic, purely functional description of a mutable reference.","sidebar":"datatypes-sidebar"},"datatypes/contextual/has":{"id":"datatypes/contextual/has","title":"Has","description":"The trait Has[A] is used with the ZIO environment to express an effect\'s dependency on a service of type A.","sidebar":"datatypes-sidebar"},"datatypes/contextual/index":{"id":"datatypes/contextual/index","title":"Introduction","description":"ZIO Environment","sidebar":"datatypes-sidebar"},"datatypes/contextual/layer":{"id":"datatypes/contextual/layer","title":"Layer","description":"Layer[+E, +ROut] is a type alias for ZLayer[Any, E, ROut], which represents a layer that doesn\'t require any services, it may fail with an error type of E, and returns ROut as its output.","sidebar":"datatypes-sidebar"},"datatypes/contextual/rlayer":{"id":"datatypes/contextual/rlayer","title":"RLayer","description":"RLayer[-RIn, +ROut] is a type alias for ZLayer[RIn, Throwable, ROut], which represents a layer that requires RIn as its input, it may fail with Throwable value, or returns ROut as its output.","sidebar":"datatypes-sidebar"},"datatypes/contextual/tasklayer":{"id":"datatypes/contextual/tasklayer","title":"TaskLayer","description":"TaskLayer[+ROut] is a type alias for ZLayer[Any, Throwable, ROut], which represents a layer that doesn\'t require any services as its input, it may fail with Throwable value, and returns ROut as its output.","sidebar":"datatypes-sidebar"},"datatypes/contextual/ulayer":{"id":"datatypes/contextual/ulayer","title":"ULayer","description":"ULayer[+ROut] is a type alias for ZLayer[Any, Nothing, ROut], which represents a layer that doesn\'t require any services as its input, it can\'t fail, and returns ROut as its output.","sidebar":"datatypes-sidebar"},"datatypes/contextual/urlayer":{"id":"datatypes/contextual/urlayer","title":"URLayer","description":"URLayer[-RIn, +ROut] is a type alias for ZLayer[RIn, Nothing, ROut], which represents a layer that requires RIn as its input, it can\'t fail, and returns ROut as its output.","sidebar":"datatypes-sidebar"},"datatypes/contextual/zlayer":{"id":"datatypes/contextual/zlayer","title":"ZLayer","description":"A ZLayer[-RIn, +E, +ROut] describes a layer of an application: every layer in an application requires some services as input RIn and produces some services as the output ROut.","sidebar":"datatypes-sidebar"},"datatypes/core/cause":{"id":"datatypes/core/cause","title":"Cause","description":"CauseE] is a description of a full story of failure, which is included in an [Exit.Failure. Many times in ZIO something can fail for a value of type E, but there are other ways things can fail too.","sidebar":"datatypes-sidebar"},"datatypes/core/exit":{"id":"datatypes/core/exit","title":"Exit","description":"An Exit[E, A] value describes how fibers end life. It has two possible values:","sidebar":"datatypes-sidebar"},"datatypes/core/index":{"id":"datatypes/core/index","title":"Summary","description":"- ZIO \u2014 A ZIO is a value that models an effectful program, which might fail or succeed.","sidebar":"datatypes-sidebar"},"datatypes/core/io":{"id":"datatypes/core/io","title":"IO","description":"IO[E, A] is a type alias for ZIO[Any, E, A], which represents an effect that has no requirements, and may fail with an E, or succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/core/rio":{"id":"datatypes/core/rio","title":"RIO","description":"RIO[R, A] is a type alias for ZIO[R, Throwable, A], which represents an effect that requires an R, and may fail with a Throwable value, or succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/core/runtime":{"id":"datatypes/core/runtime","title":"Runtime","description":"A Runtime[R] is capable of executing tasks within an environment R.","sidebar":"datatypes-sidebar"},"datatypes/core/task":{"id":"datatypes/core/task","title":"Task","description":"Task[A] is a type alias for ZIO[Any, Throwable, A], which represents an effect that has no requirements, and may fail with a Throwable value, or succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/core/uio":{"id":"datatypes/core/uio","title":"UIO","description":"UIO[A] is a type alias for ZIO[Any, Nothing, A], which represents an Unexceptional effect that doesn\'t require any specific environment, and cannot fail, but can succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/core/urio":{"id":"datatypes/core/urio","title":"URIO","description":"URIO[R, A] is a type alias for ZIO[R, Nothing, A], which represents an effect that requires an R, and cannot fail, but can succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/core/zio":{"id":"datatypes/core/zio","title":"ZIO","description":"A ZIO[R, E, A] value is an immutable value that lazily describes a workflow or job. The workflow requires some environment R, and may fail with an error of type E, or succeed with a value of type A.","sidebar":"datatypes-sidebar"},"datatypes/fiber/fiber":{"id":"datatypes/fiber/fiber","title":"Fiber","description":"To perform an effect without blocking the current process, we can use fibers, which are a lightweight concurrency mechanism.","sidebar":"datatypes-sidebar"},"datatypes/fiber/fiberid":{"id":"datatypes/fiber/fiberid","title":"Fiber.Id","description":"The identity of a Fiber, described by the time it began life (startTimeMillis), and a monotonically increasing sequence number generated from an atomic counter (seqNumber).","sidebar":"datatypes-sidebar"},"datatypes/fiber/fiberref":{"id":"datatypes/fiber/fiberref","title":"FiberRef","description":"FiberRef[A] models a mutable reference to a value of type A. The two basic operations are set, which sets the reference to a new value, and get, which retrieves the current value of the reference.","sidebar":"datatypes-sidebar"},"datatypes/fiber/fiberstatus":{"id":"datatypes/fiber/fiberstatus","title":"Fiber.Status","description":"Fiber.Status describe the current status of a Fiber.","sidebar":"datatypes-sidebar"},"datatypes/fiber/index":{"id":"datatypes/fiber/index","title":"Introduction","description":"Introduction","sidebar":"datatypes-sidebar"},"datatypes/index":{"id":"datatypes/index","title":"Introduction","description":"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:","sidebar":"datatypes-sidebar"},"datatypes/misc/chunk":{"id":"datatypes/misc/chunk","title":"Chunk","description":"A Chunk[A] represents a chunk of values of type A. Chunks are usually backed by arrays, but expose a purely functional, safe interface to the underlying elements, and they become lazy on operations that would be costly with arrays, such as repeated concatenation.","sidebar":"datatypes-sidebar"},"datatypes/misc/index":{"id":"datatypes/misc/index","title":"Summary","description":"- Chunk \u2014 ZIO Chunk: Fast, Pure Alternative to Arrays","sidebar":"datatypes-sidebar"},"datatypes/misc/schedule":{"id":"datatypes/misc/schedule","title":"Schedule","description":"A Schedule[Env, In, Out] is an immutable value that describes a recurring effectful schedule, which runs in some environment Env, after consuming values of type In (errors in the case of retry, or values in the case of repeat) produces values of type Out, and in every step based on input values and the internal state decides to halt or continue after some delay d.","sidebar":"datatypes-sidebar"},"datatypes/misc/supervisor":{"id":"datatypes/misc/supervisor","title":"Supervisor","description":"A Supervisor[A] is allowed to supervise the launching and termination of fibers, producing some visible value of type A from the supervision.","sidebar":"datatypes-sidebar"},"datatypes/resource/index":{"id":"datatypes/resource/index","title":"Introduction","description":"When we are writing a long-lived application, resource management is very important. Proper resource management is vital to any large-scale application. We need to make sure that our application is resource-safe, and it doesn\'t leak any resource.","sidebar":"datatypes-sidebar"},"datatypes/resource/managed":{"id":"datatypes/resource/managed","title":"Managed","description":"Managed[E, A] is a type alias for ZManaged[Any, E, A], which represents a managed resource that has no requirements, and may fail with an E, or succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/resource/rmanaged":{"id":"datatypes/resource/rmanaged","title":"RManaged","description":"RManaged[R, A] is a type alias for ZManaged[R, Throwable, A], which represents a managed resource that requires an R, and may fail with a Throwable value, or succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/resource/task-managed":{"id":"datatypes/resource/task-managed","title":"TaskManaged","description":"TaskManaged[A] is a type alias for ZManaged[Any, Throwable, A], which represents a managed resource that has no requirements, and may fail with a Throwable value, or succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/resource/umanaged":{"id":"datatypes/resource/umanaged","title":"UManaged","description":"UManaged[A] is a type alias for ZManaged[Any, Nothing, A], which represents an unexceptional managed resource that doesn\'t require any specific environment, and cannot fail, but can succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/resource/urmanaged":{"id":"datatypes/resource/urmanaged","title":"URManaged","description":"URManaged[R, A] is a type alias for ZManaged[R, Nothing, A], which represents a managed resource that requires an R, and cannot fail, but can succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/resource/zmanaged":{"id":"datatypes/resource/zmanaged","title":"ZManaged","description":"A ZManaged[R, E, A] is a managed resource, that requires an R, and may fail with an E value, or succeed with an A.","sidebar":"datatypes-sidebar"},"datatypes/stm/index":{"id":"datatypes/stm/index","title":"Introduction","description":"Overview","sidebar":"datatypes-sidebar"},"datatypes/stm/stm":{"id":"datatypes/stm/stm","title":"STM","description":"An STM[E, A] represents an effect that can be performed transactionally resulting in a failure E or a success A. There is a more powerful variant ZSTM[R, E, A] which supports an environment type R like ZIO[R, E, A].","sidebar":"datatypes-sidebar"},"datatypes/stm/tarray":{"id":"datatypes/stm/tarray","title":"TArray","description":"TArray is an array of mutable references that can participate in transactions in STM.","sidebar":"datatypes-sidebar"},"datatypes/stm/tmap":{"id":"datatypes/stm/tmap","title":"TMap","description":"A TMap[A] is a mutable map that can participate in transactions in STM.","sidebar":"datatypes-sidebar"},"datatypes/stm/tpriorityqueue":{"id":"datatypes/stm/tpriorityqueue","title":"TPriorityQueue","description":"A TPriorityQueue[A] is a mutable queue that can participate in STM transactions. A TPriorityQueue contains values of type A for which an Ordering is defined. Unlike a TQueue, take returns the highest priority value (the value that is first in the specified ordering) as opposed to the first value offered to the queue. The ordering of elements sharing the same priority when taken from the queue is not guaranteed.","sidebar":"datatypes-sidebar"},"datatypes/stm/tpromise":{"id":"datatypes/stm/tpromise","title":"TPromise","description":"TPromise is a mutable reference that can be set exactly once and can participate in transactions in STM.","sidebar":"datatypes-sidebar"},"datatypes/stm/tqueue":{"id":"datatypes/stm/tqueue","title":"TQueue","description":"A TQueue[A] is a mutable queue that can participate in transactions in STM.","sidebar":"datatypes-sidebar"},"datatypes/stm/treentrantlock":{"id":"datatypes/stm/treentrantlock","title":"TReentrantLock","description":"A TReentrantLock allows safe concurrent access to some mutable state efficiently, allowing multiple fibers to read the","sidebar":"datatypes-sidebar"},"datatypes/stm/tref":{"id":"datatypes/stm/tref","title":"TRef","description":"A TRef[A] is a mutable reference to an immutable value, which can participate in transactions in STM. The mutable reference can be retrieved and set from within transactions, with strong guarantees for atomicity, consistency, and isolation from other transactions.","sidebar":"datatypes-sidebar"},"datatypes/stm/tsemaphore":{"id":"datatypes/stm/tsemaphore","title":"TSemaphore","description":"TSemaphore is a semaphore with transactional semantics that can be used to control access to a common resource. It","sidebar":"datatypes-sidebar"},"datatypes/stm/tset":{"id":"datatypes/stm/tset","title":"TSet","description":"A TSet[A] is a mutable set that can participate in transactions in STM.","sidebar":"datatypes-sidebar"},"datatypes/stream/index":{"id":"datatypes/stream/index","title":"Introduction","description":"Introduction","sidebar":"datatypes-sidebar"},"datatypes/stream/sink":{"id":"datatypes/stream/sink","title":"Sink","description":"Sink[E, A, L, B] is a type alias for ZSink[Any, E, A, L, B]. We can think of a Sink as a function that does not require any services and will consume a variable amount of A elements (could be 0, 1, or many!), might fail with an error of type E, and will eventually yield a value of type B. The L is the type of elements in the leftover.","sidebar":"datatypes-sidebar"},"datatypes/stream/stream":{"id":"datatypes/stream/stream","title":"Stream","description":"Stream[E, A] is a type alias for ZStream[Any, E, A], which represents a ZIO stream that does not require any services, and may fail with an E, or produce elements with an A.","sidebar":"datatypes-sidebar"},"datatypes/stream/subscription-ref":{"id":"datatypes/stream/subscription-ref","title":"SubscriptionRef","description":"A SubscriptionRef[A] contains a current value of type A and a stream that can be consumed to observe all changes to that value.","sidebar":"datatypes-sidebar"},"datatypes/stream/transducer":{"id":"datatypes/stream/transducer","title":"Transducer","description":"Transducer[E, A, B] is a type alias for ZTransducer[Any, E, A, B]. It is a stream transducer that doesn\'t require any services, so except the R type-parameter, all other things are the same.","sidebar":"datatypes-sidebar"},"datatypes/stream/ustream":{"id":"datatypes/stream/ustream","title":"UStream","description":"UStream[A] is a type alias for ZStream[Any, Nothing, A], which represents a ZIO stream that does not require any services, it cannot fail, and after evaluation, it may emit zero or more values of type A.","sidebar":"datatypes-sidebar"},"datatypes/stream/zsink":{"id":"datatypes/stream/zsink","title":"ZSink","description":"Introduction","sidebar":"datatypes-sidebar"},"datatypes/stream/zstream":{"id":"datatypes/stream/zstream","title":"ZStream","description":"Introduction","sidebar":"datatypes-sidebar"},"datatypes/stream/ztransducer":{"id":"datatypes/stream/ztransducer","title":"ZTransducer","description":"Introduction","sidebar":"datatypes-sidebar"},"getting_started":{"id":"getting_started","title":"Getting Started","description":"Include ZIO in your project by adding the following to your build.sbt file:"},"howto/access-system-information":{"id":"howto/access-system-information","title":"How to Access System Information?","description":"Sometimes, environment variables are relevant information to an application. ZIO provides a system package to interface with this functionality.","sidebar":"howto-sidebar"},"howto/handle-errors":{"id":"howto/handle-errors","title":"How to Handle Errors?","description":"Declared Errors vs Unforeseen Defects","sidebar":"howto-sidebar"},"howto/index":{"id":"howto/index","title":"Summary","description":"Here are a few howto guides for common patterns with ZIO.","sidebar":"howto-sidebar"},"howto/interop/with-cats-effect":{"id":"howto/interop/with-cats-effect","title":"How to Interop with Cats Effect?","description":"Introduction","sidebar":"howto-sidebar"},"howto/interop/with-future":{"id":"howto/interop/with-future","title":"How to Interop with Future?","description":"Scala Future","sidebar":"howto-sidebar"},"howto/interop/with-guava":{"id":"howto/interop/with-guava","title":"How to Interop with Guava?","description":"interop-guava module provide capibility to convert Guava\'s com.google.common.util.concurrent.ListenableFuture into ZIO Task.","sidebar":"howto-sidebar"},"howto/interop/with-java":{"id":"howto/interop/with-java","title":"How to Interop with Java?","description":"ZIO has full interoperability with foreign Java code. Let me show you how it works and then BOOM, tomorrow you can show off your purely functional Java at work.","sidebar":"howto-sidebar"},"howto/interop/with-javascript":{"id":"howto/interop/with-javascript","title":"How to Interop with JavaScript?","description":"Include ZIO in your Scala.js project by adding the following to your build.sbt:","sidebar":"howto-sidebar"},"howto/interop/with-monix":{"id":"howto/interop/with-monix","title":"How to Interop with Monix?","description":"Checkout interop-monix module for inter-operation support.","sidebar":"howto-sidebar"},"howto/interop/with-reactive-streams":{"id":"howto/interop/with-reactive-streams","title":"How to Interop with Reactive Streams?","description":"Checkout the interop-reactive-streams module for inter-operation support.","sidebar":"howto-sidebar"},"howto/interop/with-scalaz-7x":{"id":"howto/interop/with-scalaz-7x","title":"How to Interop with Scalaz 7.x?","description":"ZIO Instances","sidebar":"howto-sidebar"},"howto/interop/with-twitter":{"id":"howto/interop/with-twitter","title":"How to Interop with Twitter?","description":"interop-twitter module provides capability to convert Twitter Future into ZIO Task.","sidebar":"howto-sidebar"},"howto/migrate/from-cats-efect":{"id":"howto/migrate/from-cats-efect","title":"How to Migrate from Cats Effect to ZIO?","description":"Cats IO[A] can be easily replaced with ZIO\'s Task[A] (an alias for ZIO[Any, Throwable, A])."},"howto/migrate/from-monix":{"id":"howto/migrate/from-monix","title":"How to Migrate from Monix to ZIO?","description":"Monix\'s Task[A] can be easily replaced with ZIO\'s Task[A] (an alias for ZIO[Any, Throwable, A]).","sidebar":"howto-sidebar"},"howto/mock-services":{"id":"howto/mock-services","title":"How to Mock Services?","description":"How to test interactions between services?","sidebar":"howto-sidebar"},"howto/test-effects":{"id":"howto/test-effects","title":"How to Test effects?","description":"How zio-test was designed","sidebar":"howto-sidebar"},"howto/use-test-assertions":{"id":"howto/use-test-assertions","title":"How to Use Test Assertions","description":"Using the Assertion type effectively often involves finding the best fitting","sidebar":"howto-sidebar"},"howto/use-zio-macros":{"id":"howto/use-zio-macros","title":"How to use ZIO Macros?","description":"Scrapping the boilerplate with macros","sidebar":"howto-sidebar"},"overview/overview_background":{"id":"overview/overview_background","title":"Background","description":"Procedural Scala programs use procedural functions, which are:","sidebar":"overview-sidebar"},"overview/overview_basic_concurrency":{"id":"overview/overview_basic_concurrency","title":"Basic Concurrency","description":"ZIO has low-level support for concurrency using fibers. While fibers are very powerful, they are low-level. To improve productivity, ZIO provides high-level operations built on fibers.","sidebar":"overview-sidebar"},"overview/overview_basic_operations":{"id":"overview/overview_basic_operations","title":"Basic Operations","description":"Mapping","sidebar":"overview-sidebar"},"overview/overview_creating_effects":{"id":"overview/overview_creating_effects","title":"Creating Effects","description":"This section explores some of the common ways to create ZIO effects from values, from common Scala types, and from both synchronous and asynchronous side-effects.","sidebar":"overview-sidebar"},"overview/overview_handling_errors":{"id":"overview/overview_handling_errors","title":"Handling Errors","description":"This section looks at some of the common ways to detect and respond to failure.","sidebar":"overview-sidebar"},"overview/overview_handling_resources":{"id":"overview/overview_handling_resources","title":"Handling Resources","description":"This section looks at some of the common ways to safely handle resources using ZIO.","sidebar":"overview-sidebar"},"overview/overview_index":{"id":"overview/overview_index","title":"Summary","description":"ZIO is a library for asynchronous and concurrent programming that is based on pure functional programming.","sidebar":"overview-sidebar"},"overview/overview_performance":{"id":"overview/overview_performance","title":"Performance","description":"zio has excellent performance, featuring a hand-optimized, low-level interpreter that achieves zero allocations for right-associated binds, and minimal allocations for left-associated binds.","sidebar":"overview-sidebar"},"overview/overview_platforms":{"id":"overview/overview_platforms","title":"Platforms","description":"ZIO provides a consistent interface across platforms to the maximum extent possible, allowing developers to write code once and deploy it everywhere. However, there are some unavoidable differences between platforms to be aware of.","sidebar":"overview-sidebar"},"overview/overview_running_effects":{"id":"overview/overview_running_effects","title":"Running Effects","description":"ZIO provides several different ways of running effects in your application.","sidebar":"overview-sidebar"},"overview/overview_testing_effects":{"id":"overview/overview_testing_effects","title":"Testing Effects","description":"There are many approaches to testing functional effects, including using free monads, using tagless-final, and using environmental effects. Although all of these approaches are compatible with ZIO, the simplest and most ergonomic is environmental effects.","sidebar":"overview-sidebar"},"resources/ecosystem/community":{"id":"resources/ecosystem/community","title":"Community ZIO Libraries","description":"In this section we are going to introduce some of the most important libraries that have first-class ZIO support from the community.","sidebar":"resources-sidebar"},"resources/ecosystem/compatible":{"id":"resources/ecosystem/compatible","title":"ZIO Compatible Libraries","description":"List of ZIO compatible libraries:","sidebar":"resources-sidebar"},"resources/ecosystem/officials":{"id":"resources/ecosystem/officials","title":"Official ZIO Libraries","description":"Official ZIO libraries are hosted in the ZIO organization on Github, and are generally maintained by core contributors to ZIO.","sidebar":"resources-sidebar"},"resources/ecosystem/templates":{"id":"resources/ecosystem/templates","title":"Project Templates","description":"List of project starters, bootstrap tools or, templates.","sidebar":"resources-sidebar"},"resources/ecosystem/tools":{"id":"resources/ecosystem/tools","title":"Tools for ZIO","description":"- ZIO IntelliJ \u2014 A complimentary, community-developed plugin for IntelliJ IDEA, brings enhancements when using ZIO in your projects","sidebar":"resources-sidebar"},"resources/index":{"id":"resources/index","title":"Summary","description":"If you find a new great library, talk, resource, slides or project, related to ZIO, consider adding to the list with your PR","sidebar":"resources-sidebar"},"resources/learning/articles":{"id":"resources/learning/articles","title":"Articles","description":"These articles reflect the state of ZIO at the time of their publication. The code samples might be outdated, considering ZIO was early in development at the time they were written. However, the concepts are still relevant.","sidebar":"resources-sidebar"},"resources/learning/cheatsheets":{"id":"resources/learning/cheatsheets","title":"Cheat Sheets","description":"- ZIO Cheat Sheet","sidebar":"resources-sidebar"},"resources/learning/cookbooks":{"id":"resources/learning/cookbooks","title":"Cookbooks","description":"- ZIO Cookbook A beginners\' tour to ZIO by Boris V.Kuznetsov","sidebar":"resources-sidebar"},"resources/learning/poweredbyzio":{"id":"resources/learning/poweredbyzio","title":"Projects using ZIO","description":"- Rudder \u2014 an example about how to manage error ADT in several sub-projects and specialized sub-domains, and how one can gradually contextualize error messages in domain layers. Uses queues, brackets, interop with Java, and historical code. See context and references.","sidebar":"resources-sidebar"},"resources/learning/sampleprojects":{"id":"resources/learning/sampleprojects","title":"Sample Projects","description":"- Redis Streams with ZIO by Leszek Grucha\u0142a","sidebar":"resources-sidebar"},"resources/learning/videos":{"id":"resources/learning/videos","title":"Videos","description":"Functional Programming","sidebar":"resources-sidebar"},"services/blocking":{"id":"services/blocking","title":"Blocking","description":"Introduction","sidebar":"services-sidebar"},"services/clock":{"id":"services/clock","title":"Clock","description":"Clock service contains some functionality related to time and scheduling.","sidebar":"services-sidebar"},"services/console":{"id":"services/console","title":"Console","description":"Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console.","sidebar":"services-sidebar"},"services/index":{"id":"services/index","title":"Introduction","description":"ZIO already provided 5 build-in services, when we use these services we don\'t need to provide their corresponding environment explicitly. The ZEnv environment is a type alias for all of these services and will be provided by ZIO to our effects:","sidebar":"services-sidebar"},"services/random":{"id":"services/random","title":"Random","description":"Random service provides utilities to generate random numbers. It\'s a functional wrapper of scala.util.Random. This service contains various different pseudo-random generators like nextInt, nextBoolean and nextDouble. Each random number generator functions return a URIO[Random, T] value.","sidebar":"services-sidebar"},"services/system":{"id":"services/system","title":"System","description":"System service contains several useful functions related to system environments and properties. Both of system environments and system properties are key/value pairs. They used to pass user-defined information to our application.","sidebar":"services-sidebar"},"usecases/usecases_asynchronous":{"id":"usecases/usecases_asynchronous","title":"Asynchronous","description":"Coming soon...","sidebar":"usecases-sidebar"},"usecases/usecases_concurrency":{"id":"usecases/usecases_concurrency","title":"Concurrency","description":"Coming soon...","sidebar":"usecases-sidebar"},"usecases/usecases_index":{"id":"usecases/usecases_index","title":"Summary","description":"The ZIO library lets you easily solve problems in a variety of areas, including:","sidebar":"usecases-sidebar"},"usecases/usecases_parallelism":{"id":"usecases/usecases_parallelism","title":"Parallelism","description":"Coming soon...","sidebar":"usecases-sidebar"},"usecases/usecases_queueing":{"id":"usecases/usecases_queueing","title":"Queueing","description":"Coming soon...","sidebar":"usecases-sidebar"},"usecases/usecases_retrying":{"id":"usecases/usecases_retrying","title":"Retrying","description":"Coming soon...","sidebar":"usecases-sidebar"},"usecases/usecases_scheduling":{"id":"usecases/usecases_scheduling","title":"Scheduling","description":"For scenarios where an action needs to be performed multiple times, Schedule can be used to customize the:","sidebar":"usecases-sidebar"},"usecases/usecases_streaming":{"id":"usecases/usecases_streaming","title":"Streaming","description":"Coming soon...","sidebar":"usecases-sidebar"},"usecases/usecases_testing":{"id":"usecases/usecases_testing","title":"Testing","description":"ZIO Test is a zero dependency testing library that makes it easy to test effectual programs. Begin by adding the required configuration in your SBT settings:","sidebar":"usecases-sidebar"}}}')}}]);