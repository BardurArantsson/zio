"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[5777],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=n,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return r?a.createElement(f,o(o({ref:t},c),{},{components:r})):a.createElement(f,o({ref:t},c))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1447:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const i={id:"faq",title:"Frequently Answered Questions (FAQ)",sidebar_label:"FAQ"},o=void 0,s={unversionedId:"about/faq",id:"about/faq",title:"Frequently Answered Questions (FAQ)",description:"In this page we are going to answer general questions related to the ZIO project.",source:"@site/docs/about/faq.md",sourceDirName:"about",slug:"/about/faq",permalink:"/next/about/faq",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/about/faq.md",tags:[],version:"current",frontMatter:{id:"faq",title:"Frequently Answered Questions (FAQ)",sidebar_label:"FAQ"},sidebar:"about-sidebar",previous:{title:"About ZIO",permalink:"/next/about/"},next:{title:"ZIO Coding Guidelines",permalink:"/next/about/coding-guidelines"}},p=[{value:"In ZIO ecosystem, there are lots of data types which they have <code>Z</code> prefix in their names. What this prefix stands for? Does it mean, that data type is effectual?",id:"in-zio-ecosystem-there-are-lots-of-data-types-which-they-have-z-prefix-in-their-names-what-this-prefix-stands-for-does-it-mean-that-data-type-is-effectual",children:[],level:2}],l={toc:p};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"In this page we are going to answer general questions related to the ZIO project."),(0,n.kt)("h2",{id:"in-zio-ecosystem-there-are-lots-of-data-types-which-they-have-z-prefix-in-their-names-what-this-prefix-stands-for-does-it-mean-that-data-type-is-effectual"},"In ZIO ecosystem, there are lots of data types which they have ",(0,n.kt)("inlineCode",{parentName:"h2"},"Z")," prefix in their names. What this prefix stands for? Does it mean, that data type is effectual?"),(0,n.kt)("p",null,"No, it doesn't denote that the data type is effectual. Instead, the ",(0,n.kt)("inlineCode",{parentName:"p"},"Z")," prefix is used for two purposes:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Polymorphic Version of Another Data Type")," \u2014 The ",(0,n.kt)("inlineCode",{parentName:"p"},"Z")," prefix indicates a more polymorphic version of another data type, not a data type that is effectual. So for example ",(0,n.kt)("inlineCode",{parentName:"p"},"IO")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," are equally effectual but ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," is more polymorphic because it has the additional type parameter ",(0,n.kt)("inlineCode",{parentName:"p"},"R"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Term Disambiguation")," \u2014 There are some cases where the ",(0,n.kt)("inlineCode",{parentName:"p"},"Z")," prefix is used to disambiguate a term that might otherwise be too common and create risk of name conflicts (e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"ZPool"),")."))),(0,n.kt)("p",null,"This convention is true across all ZIO ecosystem. For example, in ZIO Prelude, the ",(0,n.kt)("inlineCode",{parentName:"p"},"ZValidation")," is a more general version of ",(0,n.kt)("inlineCode",{parentName:"p"},"Validation")," that is polymorphic in the log type. ",(0,n.kt)("inlineCode",{parentName:"p"},"ZSet")," is a more polymorphic version of a ",(0,n.kt)("em",{parentName:"p"},"Set")," that is polymorphic in the measure type. ",(0,n.kt)("inlineCode",{parentName:"p"},"ZPure")," is more polymorphic than its type aliases in several ways as represented by its different type parameters and also serves to disambiguate it as ",(0,n.kt)("em",{parentName:"p"},"Pure")," which is too general."))}c.isMDXComponent=!0}}]);