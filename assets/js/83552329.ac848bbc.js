"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6619],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(g,s(s({ref:t},c),{},{components:n})):r.createElement(g,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},42354:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={id:"gen",title:"Gen"},s=void 0,o={unversionedId:"reference/test/property-testing/gen",id:"reference/test/property-testing/gen",title:"Gen",description:"A Gen[R, A] represents a generator of values of type A, which requires an environment R. The Gen data type is the base functionality for generating test data for property-based testing. We use them to produce deterministic and non-deterministic (PRNG) random values.",source:"@site/docs/reference/test/property-testing/gen.md",sourceDirName:"reference/test/property-testing",slug:"/reference/test/property-testing/gen",permalink:"/reference/test/property-testing/gen",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/test/property-testing/gen.md",tags:[],version:"current",frontMatter:{id:"gen",title:"Gen"},sidebar:"reference-sidebar",previous:{title:"Introduction To Property Testing",permalink:"/reference/test/property-testing/"},next:{title:"Operators",permalink:"/reference/test/property-testing/operators"}},l={},p=[{value:"Generators Are Deterministic by Default",id:"generators-are-deterministic-by-default",level:2},{value:"Running a Generator",id:"running-a-generator",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen[R, A]")," represents a generator of values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"A"),", which requires an environment ",(0,a.kt)("inlineCode",{parentName:"p"},"R"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen")," data type is the base functionality for generating test data for property-based testing. We use them to produce deterministic and non-deterministic (PRNG) random values."),(0,a.kt)("p",null,"It is encoded as a stream of optional samples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"case class Gen[-R, +A](sample: ZStream[R, Nothing, Option[Sample[R, A]]])\n")),(0,a.kt)("p",null,"Before deep into the generators, let's see what is property-based testing and what problem it solves in the testing world."),(0,a.kt)("h2",{id:"generators-are-deterministic-by-default"},"Generators Are Deterministic by Default"),(0,a.kt)("p",null,"The important fact about generators is that they produce deterministic values. This means that if we run the same generator multiple times, it will always produce the same sequence of values. So the let us add some debugging print lines inside a test and see what values are produced:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.test._\nimport zio.test.TestAspect._\n\nobject ExampleSpec extends ZIOSpecDefault {\n  def spec =\n    test("example test") {\n      check(Gen.int(0, 10)) { n =>\n        println(n)\n        assertTrue(n + n == 2 * n)\n      }\n    } @@ samples(5)\n}\n')),(0,a.kt)("p",null,"We can see, every time we run the test, the generator will produce the same sequence of values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"runSpec\n9\n3\n0\n9\n6\n+ example test\n")),(0,a.kt)("p",null,"This is due to the fact that the generator uses a pseudo-random number generator which uses a deterministic algorithm. The generator provides a fixed seed number to its underlying deterministic algorithm to generate random numbers. As the seed number is fixed, the generator will always produce the same sequence of values. For more information, there is a separate page about this on ",(0,a.kt)("a",{parentName:"p",href:"services/random.md"},"TestRandom")," which is the underlying service for generating test values."),(0,a.kt)("p",null,"This behavior helps us to have reproducible tests. But, if we might need non-deterministic tests values, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestAspect.nondeterministic")," to change the default behavior:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"myspec @@ TestAspect.nondeterministic\n")),(0,a.kt)("h2",{id:"running-a-generator"},"Running a Generator"),(0,a.kt)("p",null,"To run a generator, we can call ",(0,a.kt)("inlineCode",{parentName:"p"},"runCollect")," operation:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val ints: ZIO[Any, Nothing, List[Int]] = Gen.int.runCollect.debug\n// Output: List(-2090696713)\n")),(0,a.kt)("p",null,"This will return a ",(0,a.kt)("inlineCode",{parentName:"p"},"ZIO")," effect containing all its values in a list, which in this example it contains only one element."),(0,a.kt)("p",null,"To create more samples, we can use ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen#runCollectN"),", which repeatedly runs the generator as much as we need. In this example, it will generate a list of containing 5 integer elements:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"Gen.int.runCollectN(5).debug\n")),(0,a.kt)("p",null,"In addition, there is an operator called ",(0,a.kt)("inlineCode",{parentName:"p"},"Gen#runHead"),", which returns the first value generated by the generator."))}u.isMDXComponent=!0}}]);