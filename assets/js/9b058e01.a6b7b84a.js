"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[7484],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),f=s(n),d=a,h=f["".concat(l,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9679:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return f}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],p={id:"overview_basic_operations",title:"Basic Operations"},l=void 0,s={unversionedId:"overview/overview_basic_operations",id:"overview/overview_basic_operations",title:"Basic Operations",description:"Mapping",source:"@site/docs/overview/basic_operations.md",sourceDirName:"overview",slug:"/overview/overview_basic_operations",permalink:"/next/overview/overview_basic_operations",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/overview/basic_operations.md",tags:[],version:"current",frontMatter:{id:"overview_basic_operations",title:"Basic Operations"},sidebar:"overview_sidebar",previous:{title:"Creating Effects",permalink:"/next/overview/overview_creating_effects"},next:{title:"Handling Errors",permalink:"/next/overview/overview_handling_errors"}},c=[{value:"Mapping",id:"mapping",children:[],level:2},{value:"Chaining",id:"chaining",children:[],level:2},{value:"For Comprehensions",id:"for-comprehensions",children:[],level:2},{value:"Zipping",id:"zipping",children:[],level:2},{value:"Next Step",id:"next-step",children:[],level:2}],u={toc:c};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"mapping"},"Mapping"),(0,i.kt)("p",null,"You can map over the success channel of an effect by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO#map")," method. This lets you transform the success values of effects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nval succeeded: UIO[Int] = IO.succeed(21).map(_ * 2)\n")),(0,i.kt)("p",null,"You can map over the error channel of an effect by calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO#mapError")," method. This lets you transform the failure values of effects."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val failed: IO[Exception, Unit] = \n  IO.fail("No no!").mapError(msg => new Exception(msg))\n')),(0,i.kt)("p",null,"Note that mapping over an effect's success or error channel does not change the success or failure of the effect, in the same way that mapping over an ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," does not change whether the ",(0,i.kt)("inlineCode",{parentName:"p"},"Either")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"Left")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Right"),"."),(0,i.kt)("h2",{id:"chaining"},"Chaining"),(0,i.kt)("p",null,"You can execute two effects in sequence with the ",(0,i.kt)("inlineCode",{parentName:"p"},"flatMap")," method, which requires that you pass a callback, which will receive the value of the first effect, and can return a second effect that depends on this value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val sequenced = \n  readLine.flatMap(input => printLine(s"You entered: $input"))\n')),(0,i.kt)("p",null,"If the first effect fails, the callback passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"flatMap")," will never be invoked, and the composed effect returned by ",(0,i.kt)("inlineCode",{parentName:"p"},"flatMap")," will also fail."),(0,i.kt)("p",null,"In ",(0,i.kt)("em",{parentName:"p"},"any")," chain of effects, the first failure will short-circuit the whole chain, just like throwing an exception will prematurely exit a sequence of statements."),(0,i.kt)("h2",{id:"for-comprehensions"},"For Comprehensions"),(0,i.kt)("p",null,"Because the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO")," data type supports both ",(0,i.kt)("inlineCode",{parentName:"p"},"flatMap")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"map"),", you can use Scala's ",(0,i.kt)("em",{parentName:"p"},"for comprehensions")," to build sequential effects:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val program = \n  for {\n    _    <- printLine("Hello! What is your name?")\n    name <- readLine\n    _    <- printLine(s"Hello, ${name}, welcome to ZIO!")\n  } yield ()\n')),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"For comprehensions")," provide a more procedural syntax for composing chains of effects."),(0,i.kt)("h2",{id:"zipping"},"Zipping"),(0,i.kt)("p",null,"You can combine two effects into a single effect with the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO#zip")," method. The resulting effect succeeds with a tuple that contains the success values of both effects:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val zipped: UIO[(String, Int)] = \n  ZIO.succeed("4").zip(ZIO.succeed(2))\n')),(0,i.kt)("p",null,"Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"zip")," operates sequentially: the effect on the left side is executed before the effect on the right side."),(0,i.kt)("p",null,"In any ",(0,i.kt)("inlineCode",{parentName:"p"},"zip")," operation, if either the left or right hand sides fail, then the composed effect will fail, because ",(0,i.kt)("em",{parentName:"p"},"both")," values are required to construct the tuple."),(0,i.kt)("p",null,"Sometimes, when the success value of an effect is not useful (for example, it is ",(0,i.kt)("inlineCode",{parentName:"p"},"Unit"),"), it can be more convenient to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO#zipLeft")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIO#zipRight")," functions, which first perform a ",(0,i.kt)("inlineCode",{parentName:"p"},"zip"),", and then map over the tuple to discard one side or the other:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val zipRight1 = \n  printLine("What is your name?").zipRight(readLine)\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"zipRight")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"zipLeft")," functions have symbolic aliases, known as ",(0,i.kt)("inlineCode",{parentName:"p"},"*>")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"<*"),", respectively. Some developers find these operators easier to read:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val zipRight2 = \n  printLine("What is your name?") *>\n  readLine\n')),(0,i.kt)("h2",{id:"next-step"},"Next Step"),(0,i.kt)("p",null,"If you are comfortable with the basic operations on ZIO effects, then the next step is to learn about ",(0,i.kt)("a",{parentName:"p",href:"/next/overview/overview_handling_errors"},"error handling"),"."))}f.isMDXComponent=!0}}]);