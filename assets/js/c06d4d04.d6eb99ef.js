"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[854],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return b}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),f=s(n),b=i,d=f["".concat(c,".").concat(b)]||f[b]||p[b]||a;return n?r.createElement(d,o(o({ref:t},l),{},{components:n})):r.createElement(d,o({ref:t},l))}));function b(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:i,o[1]=u;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8242:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return l},default:function(){return f}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],u={id:"fiberstatus",title:"Fiber.Status"},c=void 0,s={unversionedId:"datatypes/fiber/fiberstatus",id:"datatypes/fiber/fiberstatus",title:"Fiber.Status",description:"Fiber.Status describe the current status of a Fiber.",source:"@site/docs/datatypes/fiber/fiberstatus.md",sourceDirName:"datatypes/fiber",slug:"/datatypes/fiber/fiberstatus",permalink:"/next/datatypes/fiber/fiberstatus",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/fiber/fiberstatus.md",tags:[],version:"current",frontMatter:{id:"fiberstatus",title:"Fiber.Status"},sidebar:"datatypes-sidebar",previous:{title:"FiberId",permalink:"/next/datatypes/fiber/fiberid"},next:{title:"Introduction",permalink:"/next/datatypes/concurrency/"}},l=[],p={toc:l};function f(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Fiber.Status")," describe the current status of a ",(0,a.kt)("a",{parentName:"p",href:"/next/datatypes/fiber/"},"Fiber"),"."),(0,a.kt)("p",null,"Each fiber can be in one of the following statues:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Done"),(0,a.kt)("li",{parentName:"ul"},"Finishing"),(0,a.kt)("li",{parentName:"ul"},"Running"),(0,a.kt)("li",{parentName:"ul"},"Suspended")),(0,a.kt)("p",null,"In the following example, we are going to ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," on a never-ending fiber and determine the id of that fiber, which we are blocking on:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nfor {\n  f1 <- ZIO.never.fork\n  f2 <- f1.await.fork\n  blockingOn <- f2.status\n    .collect(()) { case Fiber.Status.Suspended(_, _, _, blockingOn, _) =>\n      blockingOn\n    }\n    .eventually\n} yield (assert(blockingOn == f1.id))\n")))}f.isMDXComponent=!0}}]);