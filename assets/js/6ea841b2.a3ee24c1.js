"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[1461],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),f=c(n),m=a,d=f["".concat(l,".").concat(m)]||f[m]||s[m]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:a,i[1]=p;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7968:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return f}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],p={id:"zrefm",title:"ZRefM"},l=void 0,c={unversionedId:"datatypes/concurrency/zrefm",id:"version-1.x/datatypes/concurrency/zrefm",isDocsHomePage:!1,title:"ZRefM",description:"A ZRefM[RA, RB, EA, EB, A, B] is a polymorphic, purely functional description of a mutable reference.",source:"@site/versioned_docs/version-1.x/datatypes/concurrency/zrefm.md",sourceDirName:"datatypes/concurrency",slug:"/datatypes/concurrency/zrefm",permalink:"/version-1.x/datatypes/concurrency/zrefm",editUrl:"https://github.com/zio/zio/edit/series/2.x/versioned_docs/version-1.x/datatypes/concurrency/zrefm.md",tags:[],version:"1.x",frontMatter:{id:"zrefm",title:"ZRefM"},sidebar:"datatypes-sidebar",previous:{title:"Ref",permalink:"/version-1.x/datatypes/concurrency/ref"},next:{title:"RefM",permalink:"/version-1.x/datatypes/concurrency/refm"}},u=[],s={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM[RA, RB, EA, EB, A, B]")," is a polymorphic, purely functional description of a mutable reference. "),(0,o.kt)("p",null,"The fundamental operations of a ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM"),"are ",(0,o.kt)("inlineCode",{parentName:"p"},"set")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"get"),". "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"set"))," takes a value of type ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," and sets the reference to a new value, requiring an environment of type ",(0,o.kt)("inlineCode",{parentName:"li"},"RA")," and potentially failing with an error of type ",(0,o.kt)("inlineCode",{parentName:"li"},"EA"),". "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"strong"},"get"))," gets the current value of the reference and returns a value of type ",(0,o.kt)("inlineCode",{parentName:"li"},"B"),", requiring an environment of type\n",(0,o.kt)("inlineCode",{parentName:"li"},"RB")," and potentially failing with an error of type ",(0,o.kt)("inlineCode",{parentName:"li"},"EB"),".")),(0,o.kt)("p",null,"When the error and value types of the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM")," are unified, that is, it is a ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM[E, E, A, A]"),", the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM")," also supports atomic ",(0,o.kt)("inlineCode",{parentName:"p"},"modify")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"update")," operations."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"Note:"))),(0,o.kt)("p",{parentName:"blockquote"},"Unlike ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRef"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"ZRefM")," allows performing effects within update operations, at some cost to performance. Writes will semantically block other writers, while multiple readers can read simultaneously.")))}f.isMDXComponent=!0}}]);