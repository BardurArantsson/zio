"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[854],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>b});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=c(r),b=a,d=f["".concat(l,".").concat(b)]||f[b]||p[b]||i;return r?n.createElement(d,o(o({ref:t},u),{},{components:r})):n.createElement(d,o({ref:t},u))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},8242:(e,t,r)=>{r.r(t),r.d(t,{contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={id:"fiberstatus",title:"Fiber.Status"},o=void 0,s={unversionedId:"datatypes/fiber/fiberstatus",id:"datatypes/fiber/fiberstatus",title:"Fiber.Status",description:"Fiber.Status describes the current status of a Fiber.",source:"@site/docs/datatypes/fiber/fiberstatus.md",sourceDirName:"datatypes/fiber",slug:"/datatypes/fiber/fiberstatus",permalink:"/next/datatypes/fiber/fiberstatus",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/fiber/fiberstatus.md",tags:[],version:"current",frontMatter:{id:"fiberstatus",title:"Fiber.Status"},sidebar:"datatypes-sidebar",previous:{title:"FiberId",permalink:"/next/datatypes/fiber/fiberid"},next:{title:"Introduction",permalink:"/next/datatypes/concurrency/"}},l=[],c={toc:l};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Fiber.Status")," describes the current status of a ",(0,a.kt)("a",{parentName:"p",href:"/next/datatypes/fiber/fiber.md"},"Fiber"),"."),(0,a.kt)("p",null,"Each fiber can be in one of the following status:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Done"),(0,a.kt)("li",{parentName:"ul"},"Finishing"),(0,a.kt)("li",{parentName:"ul"},"Running"),(0,a.kt)("li",{parentName:"ul"},"Suspended")),(0,a.kt)("p",null,"In the following example, we are going to ",(0,a.kt)("inlineCode",{parentName:"p"},"await")," on a never-ending fiber and determine the id of that fiber, which we are blocking on:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nfor {\n  f1 <- ZIO.never.fork\n  f2 <- f1.await.fork\n  blockingOn <- f2.status\n    .collect(()) { case Fiber.Status.Suspended(_, _, _, blockingOn, _) =>\n      blockingOn\n    }\n    .eventually\n} yield (assert(blockingOn == f1.id))\n")))}u.isMDXComponent=!0}}]);