"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[4901],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=i,b=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return r?n.createElement(b,o(o({ref:t},u),{},{components:r})):n.createElement(b,o({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5742:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var n=r(7462),i=r(3366),a=(r(7294),r(3905)),o=["components"],s={id:"with-reactive-streams",title:"How to Interop with Reactive Streams?"},l=void 0,p={unversionedId:"howto/interop/with-reactive-streams",id:"howto/interop/with-reactive-streams",title:"How to Interop with Reactive Streams?",description:"Checkout the interop-reactive-streams module for inter-operation support.",source:"@site/docs/howto/interop/with-reactive-streams.md",sourceDirName:"howto/interop",slug:"/howto/interop/with-reactive-streams",permalink:"/next/howto/interop/with-reactive-streams",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/howto/interop/with-reactive-streams.md",tags:[],version:"current",frontMatter:{id:"with-reactive-streams",title:"How to Interop with Reactive Streams?"},sidebar:"howto-sidebar",previous:{title:"How to Interop with Scalaz 7.x?",permalink:"/next/howto/interop/with-scalaz-7x"},next:{title:"How to Interop with Twitter?",permalink:"/next/howto/interop/with-twitter"}},u=[{value:"Reactive Streams <code>Producer</code> and <code>Subscriber</code>",id:"reactive-streams-producer-and-subscriber",children:[],level:2},{value:"Examples",id:"examples",children:[{value:"Publisher to Stream",id:"publisher-to-stream",children:[],level:3},{value:"Subscriber to Sink",id:"subscriber-to-sink",children:[],level:3},{value:"Stream to Publisher",id:"stream-to-publisher",children:[],level:3},{value:"Sink to Subscriber",id:"sink-to-subscriber",children:[],level:3}],level:2}],c={toc:u};function m(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Checkout the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/zio/interop-reactive-streams"},(0,a.kt)("inlineCode",{parentName:"a"},"interop-reactive-streams"))," module for inter-operation support."),(0,a.kt)("h2",{id:"reactive-streams-producer-and-subscriber"},"Reactive Streams ",(0,a.kt)("inlineCode",{parentName:"h2"},"Producer")," and ",(0,a.kt)("inlineCode",{parentName:"h2"},"Subscriber")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ZIO")," integrates with ",(0,a.kt)("a",{parentName:"p",href:"http://reactivestreams.org"},"Reactive Streams")," by providing conversions from ",(0,a.kt)("inlineCode",{parentName:"p"},"zio.stream.Stream")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"org.reactivestreams.Publisher"),"\nand from ",(0,a.kt)("inlineCode",{parentName:"p"},"zio.stream.Sink")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"org.reactivestreams.Subscriber")," and vice versa. Simply import ",(0,a.kt)("inlineCode",{parentName:"p"},"import zio.interop.reactivestreams._")," to make the\nconversions available."),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("p",null,"First, let's get a few imports out of the way."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"import org.reactivestreams.example.unicast._\nimport zio._\nimport zio.interop.reactivestreams._\nimport zio.stream._\n\nval runtime = Runtime.default\n")),(0,a.kt)("p",null,"We use the following ",(0,a.kt)("inlineCode",{parentName:"p"},"Publisher")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Subscriber")," for the examples: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val publisher = new RangePublisher(3, 10)\nval subscriber = new SyncSubscriber[Int] {\n  override protected def whenNext(v: Int): Boolean = {\n    print(s"$v, ")\n    true\n  }\n}\n')),(0,a.kt)("h3",{id:"publisher-to-stream"},"Publisher to Stream"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"Publisher")," used as a ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream")," buffers up to ",(0,a.kt)("inlineCode",{parentName:"p"},"qSize")," elements. If possible, ",(0,a.kt)("inlineCode",{parentName:"p"},"qSize")," should be\na power of two for best performance. The default is 16."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val streamFromPublisher = publisher.toStream(qSize = 16)\nruntime.unsafeRun(\n  streamFromPublisher.run(Sink.collectAll[Integer])\n)\n")),(0,a.kt)("h3",{id:"subscriber-to-sink"},"Subscriber to Sink"),(0,a.kt)("p",null,"When running a ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream")," to a ",(0,a.kt)("inlineCode",{parentName:"p"},"Subscriber"),", a side channel is needed for signalling failures.\nFor this reason ",(0,a.kt)("inlineCode",{parentName:"p"},"toSink")," returns a tuple of ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Sink"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise")," must be failed\non ",(0,a.kt)("inlineCode",{parentName:"p"},"Stream")," failure. The type parameter on ",(0,a.kt)("inlineCode",{parentName:"p"},"toSink")," is the error type of ",(0,a.kt)("em",{parentName:"p"},"the Stream"),". "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'val asSink = subscriber.toSink[Throwable]\nval failingStream = Stream.range(3, 13) ++ Stream.fail(new RuntimeException("boom!"))\nruntime.unsafeRun(\n  asSink.flatMap { case (errorP, sink) =>\n    failingStream.run(sink).catchAll(errorP.fail)\n  }\n)\n')),(0,a.kt)("h3",{id:"stream-to-publisher"},"Stream to Publisher"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val stream = Stream.range(3, 13)\nruntime.unsafeRun(\n  stream.toPublisher.flatMap { publisher =>\n    UIO(publisher.subscribe(subscriber))\n  }\n)\n")),(0,a.kt)("h3",{id:"sink-to-subscriber"},"Sink to Subscriber"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"toSubscriber")," returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Subscriber")," and an ",(0,a.kt)("inlineCode",{parentName:"p"},"IO")," which completes with the result of running the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Sink")," or the error if the ",(0,a.kt)("inlineCode",{parentName:"p"},"Publisher")," fails.\nA ",(0,a.kt)("inlineCode",{parentName:"p"},"Sink")," used as a ",(0,a.kt)("inlineCode",{parentName:"p"},"Subscriber")," buffers up to ",(0,a.kt)("inlineCode",{parentName:"p"},"qSize")," elements. If possible, ",(0,a.kt)("inlineCode",{parentName:"p"},"qSize")," should be\na power of two for best performance. The default is 16."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"val sink = Sink.collectAll[Integer]\nruntime.unsafeRun(\n  sink.toSubscriber(qSize = 16).flatMap { case (subscriber, result) => \n    UIO(publisher.subscribe(subscriber)) *> result\n  }\n)\n")))}m.isMDXComponent=!0}}]);