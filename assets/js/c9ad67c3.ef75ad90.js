"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[3859],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},771:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return u},toc:function(){return c},default:function(){return m}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={id:"quill",title:"Quill"},s=void 0,u={unversionedId:"resources/ecosystem/community/quill",id:"resources/ecosystem/community/quill",isDocsHomePage:!1,title:"Quill",description:"Quil is a Compile-time Language Integrated Queries for Scala.",source:"@site/docs/resources/ecosystem/community/quill.md",sourceDirName:"resources/ecosystem/community",slug:"/resources/ecosystem/community/quill",permalink:"/next/resources/ecosystem/community/quill",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/resources/ecosystem/community/quill.md",tags:[],version:"current",frontMatter:{id:"quill",title:"Quill"},sidebar:"resources-sidebar",previous:{title:"MUnit ZIO",permalink:"/next/resources/ecosystem/community/munit-zio"},next:{title:"Rezilience",permalink:"/next/resources/ecosystem/community/rezilience"}},c=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],p={toc:c};function m(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/getquill/quill"},"Quil")," is a Compile-time Language Integrated Queries for Scala."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"Quill allows us to create SQL out of a Scala code during the ",(0,a.kt)("strong",{parentName:"p"},"compile-time"),". It provides the ",(0,a.kt)("em",{parentName:"p"},"Quoted Domain Specific Language (QDSL)")," to express queries in Scala and execute them in a target language."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Boilerplate-free mapping")," \u2014 The database schema is mapped using simple case classes."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Quoted DSL")," \u2014 Queries are defined inside a quote block. Quill parses each quoted block of code (quotation) at compile-time and translates them to an internal Abstract Syntax Tree (AST)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Compile-time query generation")," \u2014 The ",(0,a.kt)("inlineCode",{parentName:"li"},"ctx.run")," call reads the quotation\u2019s AST and translates it to the target language at compile-time, emitting the query string as a compilation message. As the query string is known at compile-time, the runtime overhead is very low and similar to using the database driver directly."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Compile-time query validation")," \u2014 If configured, the query is verified against the database at compile-time and the compilation fails if it is not valid. The query validation does not alter the database state.")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"In order to use this library with ZIO, we need to add the following lines in our ",(0,a.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'// Provides Quill contexts for ZIO.\nlibraryDependencies += "io.getquill" %% "quill-zio" % "3.9.0"\n\n// Provides Quill context that execute MySQL, PostgreSQL, SQLite, H2, SQL Server and Oracle queries inside of ZIO.\nlibraryDependencies += "io.getquill" %% "quill-jdbc-zio" % "3.9.0" \n\n// Provides Quill context that executes Cassandra queries inside of ZIO.\nlibraryDependencies += "io.getquill" %% "quill-cassandra-zio" % "3.9.0"\n')),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"First, to run this example, we should create the ",(0,a.kt)("inlineCode",{parentName:"p"},"Person")," table at the database initialization. Let's put the following lines into the ",(0,a.kt)("inlineCode",{parentName:"p"},"h2-schema.sql")," file at the",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/resources")," path:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS Person(\n    name VARCHAR(255),\n    age int\n);\n")),(0,a.kt)("p",null,"In this example, we use in-memory database as our data source. So we just put these lines into the ",(0,a.kt)("inlineCode",{parentName:"p"},"application.conf")," at the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/main/resources")," path:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-hocon"},"myH2DB {\n  dataSourceClassName = org.h2.jdbcx.JdbcDataSource\n  dataSource {\n    url = \"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'classpath:h2-schema.sql'\"\n    user = sa\n  }\n}\n")),(0,a.kt)("p",null,"Now we are ready to run the example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import io.getquill._\nimport io.getquill.context.ZioJdbc._\nimport zio.console.{Console, putStrLn}\nimport zio.{ExitCode, Has, URIO, ZIO}\n\nimport java.io.Closeable\nimport javax.sql\n\nobject QuillZIOExample extends zio.App {\n  val ctx = new H2ZioJdbcContext(Literal)\n\n  import ctx._\n\n  case class Person(name: String, age: Int)\n\n  val myApp: ZIO[Console with Has[sql.DataSource with Closeable], Exception, Unit] =\n    for {\n      _ <- ctx.run(\n        quote {\n          liftQuery(List(Person("Alex", 25), Person("Sarah", 23)))\n            .foreach(r =>\n              query[Person].insert(r)\n            )\n        }\n      ).onDS\n      result <- ctx.run(\n        quote(query[Person].filter(p => p.name == "Sarah"))\n      ).onDS\n      _ <- putStrLn(result.toString)\n    } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp\n      .provideCustomServices(DataSourceServiceBuilder.fromPrefix("myH2DB"))\n      .exitCode\n}\n')))}m.isMDXComponent=!0}}]);