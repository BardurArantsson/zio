"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2080],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=s(t),d=i,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return t?a.createElement(f,r(r({ref:n},c),{},{components:t})):a.createElement(f,r({ref:n},c))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=m;var p={};for(var l in n)hasOwnProperty.call(n,l)&&(p[l]=n[l]);p.originalType=e,p.mdxType="string"==typeof e?e:i,r[1]=p;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1926:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const o={id:"zioapp",title:"ZIOApp"},r=void 0,p={unversionedId:"datatypes/core/zioapp",id:"datatypes/core/zioapp",title:"ZIOApp",description:"The ZIOApp trait is an entry point for a ZIO application that allows sharing layers between applications. It also",source:"@site/docs/datatypes/core/zioapp.md",sourceDirName:"datatypes/core",slug:"/datatypes/core/zioapp",permalink:"/datatypes/core/zioapp",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/core/zioapp.md",tags:[],version:"current",frontMatter:{id:"zioapp",title:"ZIOApp"},sidebar:"datatypes-sidebar",previous:{title:"IO",permalink:"/datatypes/core/zio/io"},next:{title:"Runtime",permalink:"/datatypes/core/runtime"}},l={},s=[{value:"Running a ZIO effect",id:"running-a-zio-effect",level:2},{value:"Accessing Command-line Arguments",id:"accessing-command-line-arguments",level:2},{value:"Customized Runtime",id:"customized-runtime",level:2},{value:"Installing Low-level Functionalities",id:"installing-low-level-functionalities",level:2},{value:"Composing ZIO Applications",id:"composing-zio-applications",level:2}],c={toc:s};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIOApp")," trait is an entry point for a ZIO application that allows sharing layers between applications. It also\nprovides us the ability to compose multiple ZIO applications."),(0,i.kt)("p",null,"There is another simpler version of ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIOApp")," called ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIOAppDefault"),". We usually use ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIOAppDefault")," which uses the default ZIO environment (",(0,i.kt)("inlineCode",{parentName:"p"},"ZEnv"),")."),(0,i.kt)("h2",{id:"running-a-zio-effect"},"Running a ZIO effect"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIOAppDefault")," has a ",(0,i.kt)("inlineCode",{parentName:"p"},"run")," function, which is the main entry point for running a ZIO application on the JVM:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MyApp extends ZIOAppDefault {\n  def run = for {\n    _ <- Console.printLine("Hello! What is your name?")\n    n <- Console.readLine\n    _ <- Console.printLine("Hello, " + n + ", good to meet you!")\n  } yield ()\n}\n')),(0,i.kt)("h2",{id:"accessing-command-line-arguments"},"Accessing Command-line Arguments"),(0,i.kt)("p",null,"ZIO has a service that contains command-line arguments of an application called ",(0,i.kt)("inlineCode",{parentName:"p"},"ZIOAppArgs"),". We can access command-line arguments using the built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"getArgs")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject HelloApp extends ZIOAppDefault {\n  def run = for {\n    args <- getArgs\n    _ <-\n      if (args.isEmpty)\n        Console.printLine("Please provide your name as an argument")\n      else\n        Console.printLine(s"Hello, ${args.head}!")\n  } yield ()\n}\n')),(0,i.kt)("h2",{id:"customized-runtime"},"Customized Runtime"),(0,i.kt)("p",null,"In the ZIO app, by overriding its ",(0,i.kt)("inlineCode",{parentName:"p"},"runtime")," value, we can map the current runtime to a customized one. Let's customize it by introducing our own executor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.Executor\nimport java.util.concurrent.{LinkedBlockingQueue, ThreadPoolExecutor, TimeUnit}\n\nobject CustomizedRuntimeZIOApp extends ZIOAppDefault {\n  override val bootstrap = Runtime.setExecutor(\n    Executor.fromThreadPoolExecutor(\n      new ThreadPoolExecutor(\n        5,\n        10,\n        5000,\n        TimeUnit.MILLISECONDS,\n        new LinkedBlockingQueue[Runnable]()\n      )\n    )\n  )\n\n  def run = myAppLogic\n}\n")),(0,i.kt)("p",null,"A detailed explanation of the ZIO runtime system can be found on the ",(0,i.kt)("a",{parentName:"p",href:"/datatypes/core/runtime"},"runtime")," page."),(0,i.kt)("h2",{id:"installing-low-level-functionalities"},"Installing Low-level Functionalities"),(0,i.kt)("p",null,"We can hook into the ZIO runtime to install low-level functionalities into the ZIO application, such as ",(0,i.kt)("em",{parentName:"p"},"logging"),", ",(0,i.kt)("em",{parentName:"p"},"profiling"),", and other similar foundational pieces of infrastructure."),(0,i.kt)("p",null,"A detailed explanation can be found on the ",(0,i.kt)("a",{parentName:"p",href:"/datatypes/core/runtime"},"runtime")," page."),(0,i.kt)("h2",{id:"composing-zio-applications"},"Composing ZIO Applications"),(0,i.kt)("p",null,"To compose ZIO applications, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"<>")," operator:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\nobject MyApp1 extends ZIOAppDefault {    \n  def run = ZIO.succeed(???)\n}\n\nobject MyApp2 extends ZIOAppDefault {\n  override val bootstrap: ZLayer[Any, Any, Any] =\n    asyncProfiler ++ slf4j ++ loggly ++ newRelic\n\n  def run = ZIO.succeed(???)\n}\n\nobject Main extends ZIOApp.Proxy(MyApp1 <> MyApp2)\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"<>")," operator combines the layers of the two applications and then runs the two applications in parallel."))}u.isMDXComponent=!0}}]);