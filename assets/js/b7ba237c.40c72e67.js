"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[9193],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(y,i(i({ref:t},p),{},{components:n})):r.createElement(y,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5966:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={id:"index",title:"Introduction"},i=void 0,c={unversionedId:"datatypes/sync/index",id:"datatypes/sync/index",title:"Introduction",description:"When we access shared resources in a concurrent environment, we should choose a proper synchronization mechanism to avoid incorrect results and data inconsistencies.",source:"@site/docs/datatypes/sync/index.md",sourceDirName:"datatypes/sync",slug:"/datatypes/sync/",permalink:"/datatypes/sync/",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/sync/index.md",tags:[],version:"current",frontMatter:{id:"index",title:"Introduction"},sidebar:"datatypes-sidebar",previous:{title:"Fiber.Status",permalink:"/datatypes/fiber/fiberstatus"},next:{title:"ReentrantLock",permalink:"/datatypes/sync/reentrantlock"}},s={},l=[],p={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When we access shared resources in a concurrent environment, we should choose a proper synchronization mechanism to avoid incorrect results and data inconsistencies."),(0,a.kt)("p",null,"ZIO has several synchronization tools:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"/datatypes/sync/reentrantlock"},(0,a.kt)("inlineCode",{parentName:"a"},"ReentrantLock"))),"\u2014 The ",(0,a.kt)("inlineCode",{parentName:"li"},"ReentrantLock")," is a synchronization tool that is useful for synchronizing blocks of code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"/datatypes/sync/countdownlatch"},(0,a.kt)("inlineCode",{parentName:"a"},"CountDownLatch"))),"\u2014 The ",(0,a.kt)("inlineCode",{parentName:"li"},"CountDownLatch")," is a synchronization tool that allows one or more fibers to wait for the finalization of multiple operations."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"/datatypes/sync/cyclicbarrier"},(0,a.kt)("inlineCode",{parentName:"a"},"CyclicBarrier"))),"\u2014 The ",(0,a.kt)("inlineCode",{parentName:"li"},"CyclicBarrier")," is a synchronization tool that allows a set of fibers to all wait for each other to reach a common barrier point.")),(0,a.kt)("p",null,"It also has some concurrent data structure:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"/datatypes/sync/concurrentmap"},(0,a.kt)("inlineCode",{parentName:"a"},"ConcurrentMap"))),"\u2014 A ",(0,a.kt)("inlineCode",{parentName:"li"},"ConcurrentMap")," is a Map wrapper over ",(0,a.kt)("inlineCode",{parentName:"li"},"java.util.concurrent.ConcurrentHashMap")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("a",{parentName:"strong",href:"/datatypes/sync/concurrentset"},(0,a.kt)("inlineCode",{parentName:"a"},"ConcurrentSet"))),"\u2014 A ",(0,a.kt)("inlineCode",{parentName:"li"},"ConcurrentSet")," is a Set wrapper over ",(0,a.kt)("inlineCode",{parentName:"li"},"java.util.concurrent.ConcurrentHashMap"),".")))}u.isMDXComponent=!0}}]);