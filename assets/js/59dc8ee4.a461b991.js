"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[3497],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>p});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),g=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=g(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=g(o),p=r,d=m["".concat(s,".").concat(p)]||m[p]||u[p]||a;return o?n.createElement(d,i(i({ref:t},c),{},{components:o})):n.createElement(d,i({ref:t},c))}));function p(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var g=2;g<a;g++)i[g]=o[g];return n.createElement.apply(null,i)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},57661:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>g});var n=o(87462),r=(o(67294),o(3905));const a={id:"logstage",title:"LogStage"},i=void 0,l={unversionedId:"resources/ecosystem/community/logstage",id:"resources/ecosystem/community/logstage",title:"LogStage",description:"LogStage is a zero-cost structural logging framework for Scala & Scala.js.",source:"@site/docs/resources/ecosystem/community/logstage.md",sourceDirName:"resources/ecosystem/community",slug:"/resources/ecosystem/community/logstage",permalink:"/resources/ecosystem/community/logstage",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/resources/ecosystem/community/logstage.md",tags:[],version:"current",frontMatter:{id:"logstage",title:"LogStage"},sidebar:"resources-sidebar",previous:{title:"Distage",permalink:"/resources/ecosystem/community/distage"},next:{title:"MUnit ZIO",permalink:"/resources/ecosystem/community/munit-zio"}},s={},g=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}],c={toc:g};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://izumi.7mind.io/logstage/"},"LogStage")," is a zero-cost structural logging framework for Scala & Scala.js."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Some key features of ",(0,r.kt)("em",{parentName:"p"},"LogStage"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"LogStage extracts structure from ordinary string interpolations in your log messages with zero changes to code."),(0,r.kt)("li",{parentName:"ol"},"LogStage uses macros to extract log structure, it is faster at runtime than a typical reflective structural logging frameworks"),(0,r.kt)("li",{parentName:"ol"},"Log contexts"),(0,r.kt)("li",{parentName:"ol"},"Console, File, and SLF4J sinks included, File sink supports log rotation,"),(0,r.kt)("li",{parentName:"ol"},"Human-readable output and JSON output included,"),(0,r.kt)("li",{parentName:"ol"},"Method-level logging granularity. Can configure methods com.example.Service.start and com.example.Service.doSomething independently,"),(0,r.kt)("li",{parentName:"ol"},"Slf4J adapters: route legacy Slf4J logs into LogStage router")),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'// LogStage core library\nlibraryDependencies += "io.7mind.izumi" %% "logstage-core" % "1.0.8"\n')),(0,r.kt)("p",null,"There are also some optional modules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n  // Json output\n  "io.7mind.izumi" %% "logstage-rendering-circe" % "1.0.8",\n  // Router from Slf4j to LogStage\n  "io.7mind.izumi" %% "logstage-adapter-slf4j" % "1.0.8",\n  // LogStage integration with DIStage\n  "io.7mind.izumi" %% "distage-extension-logstage" % "1.0.8",\n  // Router from LogStage to Slf4J\n  "io.7mind.izumi" %% "logstage-sink-slf4j " % "1.0.8",\n)\n')),(0,r.kt)("h2",{id:"example"},"Example"),(0,r.kt)("p",null,"Let's try a simple example of using ",(0,r.kt)("em",{parentName:"p"},"LogStage"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import izumi.fundamentals.platform.uuid.UUIDGen\nimport logstage.LogZIO.log\nimport logstage.{IzLogger, LogIO2, LogZIO}\nimport zio.{Has, URIO, _}\n\nobject LogStageExample extends zio.App {\n  val myApp = for {\n    _ <- log.info("I\'m logging with logstage!")\n    userId = UUIDGen.getTimeUUID()\n    _ <- log.info(s"Current $userId")\n    _ <- log.info("I\'m logging within the same fiber!")\n    f <- log.info("I\'m logging within a new fiber!").fork\n    _ <- f.join\n  } yield ()\n\n  val loggerLayer: ULayer[Has[LogIO2[IO]]] =\n    ZLayer.succeed(LogZIO.withFiberId(IzLogger()))\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.provide(loggerLayer).exitCode\n}\n')),(0,r.kt)("p",null,"The output of this program would be something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"I 2021-07-26T21:27:35.164 (LogStageExample.scala:8)  \u2026mpty>.LogStageExample.myApp [14:zio-default-async-1] fiberId=Id(1627318654646,1) I'm logging with logstage!\nI 2021-07-26T21:27:35.252 (LogStageExample.scala:10)  <.LogStageExample.myApp.8 [14:zio-default-async-1] fiberId=Id(1627318654646,1) Current userId=93546810-ee32-11eb-a393-11bc5b145beb\nI 2021-07-26T21:27:35.266 (LogStageExample.scala:11)  <.L.myApp.8.10 [14:zio-default-async-1] fiberId=Id(1627318654646,1) I'm logging within the same fiber!\nI 2021-07-26T21:27:35.270 (LogStageExample.scala:12)  <.L.m.8.10.11 [16:zio-default-async-2] fiberId=Id(1627318655269,2) I'm logging within a new fiber!\n")))}u.isMDXComponent=!0}}]);