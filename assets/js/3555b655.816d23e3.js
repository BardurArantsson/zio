"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6699],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),b=c(n),m=a,d=b["".concat(u,".").concat(m)]||b[m]||l[m]||o;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},6609:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return b},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={id:"thub",title:"THub"},u=void 0,c={unversionedId:"datatypes/stm/thub",id:"datatypes/stm/thub",title:"THub",description:"A THub is a transactional message hub. Publishers can publish messages to the hub and subscribers can subscribe to take messages from the hub.",source:"@site/docs/datatypes/stm/thub.md",sourceDirName:"datatypes/stm",slug:"/datatypes/stm/thub",permalink:"/next/datatypes/stm/thub",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/stm/thub.md",tags:[],version:"current",frontMatter:{id:"thub",title:"THub"},sidebar:"datatypes-sidebar",previous:{title:"TSemaphore",permalink:"/next/datatypes/stm/tsemaphore"},next:{title:"Introduction",permalink:"/next/datatypes/resource/"}},p=[],l={toc:p};function b(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"THub")," is a transactional message hub. Publishers can publish messages to the hub and subscribers can subscribe to take messages from the hub."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"THub")," is an asynchronous message hub like ",(0,o.kt)("inlineCode",{parentName:"p"},"Hub")," but it can participate in STM transactions. APIs are almost identical, but they are in the ",(0,o.kt)("inlineCode",{parentName:"p"},"STM")," world rather than the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO")," world."),(0,o.kt)("p",null,"The fundamental operators on a ",(0,o.kt)("inlineCode",{parentName:"p"},"THub")," are ",(0,o.kt)("inlineCode",{parentName:"p"},"publish")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"subscribe"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait THub[A] {\n  def publish(a: A): USTM[Boolean]\n  def subscribe: USTM[TDequeue[B]]\n}\n")))}b.isMDXComponent=!0}}]);