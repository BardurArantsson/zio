"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2502],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),s=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(r),m=n,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3549:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const o={id:"rio",title:"RIO"},i=void 0,p={unversionedId:"datatypes/core/zio/rio",id:"datatypes/core/zio/rio",title:"RIO",description:"RIO[R, A] is a type alias for ZIO[R, Throwable, A], which represents an effect that requires an R, and may fail with a Throwable value, or succeed with an A.",source:"@site/docs/datatypes/core/zio/rio.md",sourceDirName:"datatypes/core/zio",slug:"/datatypes/core/zio/rio",permalink:"/datatypes/core/zio/rio",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/core/zio/rio.md",tags:[],version:"current",frontMatter:{id:"rio",title:"RIO"},sidebar:"datatypes-sidebar",previous:{title:"Task",permalink:"/datatypes/core/zio/task"},next:{title:"IO",permalink:"/datatypes/core/zio/io"}},l={},s=[],c={toc:s};function u(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"RIO[R, A]")," is a type alias for ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO[R, Throwable, A]"),", which represents an effect that requires an ",(0,n.kt)("inlineCode",{parentName:"p"},"R"),", and may fail with a ",(0,n.kt)("inlineCode",{parentName:"p"},"Throwable")," value, or succeed with an ",(0,n.kt)("inlineCode",{parentName:"p"},"A"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},(0,n.kt)("em",{parentName:"strong"},"Note:"))),(0,n.kt)("p",{parentName:"blockquote"},"In Scala, the ",(0,n.kt)("em",{parentName:"p"},"type alias")," is a way to give a name to another type, to avoid having to repeat the original type again and again. It doesn't affect the type-checking process. It just helps us to have an expressive API design.")),(0,n.kt)("p",null,"Let's see how ",(0,n.kt)("inlineCode",{parentName:"p"},"RIO")," is defined:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"type RIO[-R, +A]  = ZIO[R, Throwable, A]\n")),(0,n.kt)("p",null,"So ",(0,n.kt)("inlineCode",{parentName:"p"},"RIO")," is equal to a ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," that requires ",(0,n.kt)("inlineCode",{parentName:"p"},"R"),", and whose error channel is ",(0,n.kt)("inlineCode",{parentName:"p"},"Throwable"),". It succeeds with ",(0,n.kt)("inlineCode",{parentName:"p"},"A"),"."),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},(0,n.kt)("strong",{parentName:"p"},"Note:")," ",(0,n.kt)("em",{parentName:"p"},"Principle of The Least Power")),(0,n.kt)("p",{parentName:"blockquote"},"The ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," data type is the most powerful effect in the ZIO library. It helps us to model various types of workflows. On other hand, the type aliases are a way of subtyping and specializing the ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," type, specific for a less powerful workflow. "),(0,n.kt)("p",{parentName:"blockquote"},"Lot of the time, we don't need such a piece of powerful machinery. So as a rule of thumb, whenever we require a less powerful effect, it's better to use the proper specialized type alias."),(0,n.kt)("p",{parentName:"blockquote"},"So there is no need to convert type aliases to the ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," data type, and whenever the ",(0,n.kt)("inlineCode",{parentName:"p"},"ZIO")," data type is required, we can use the most precise type alias to fit our workflow requirement.")))}u.isMDXComponent=!0}}]);