"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[924],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var m=a.createContext({}),s=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(m.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,m=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),d=i,f=u["".concat(m,".").concat(d)]||u[d]||p[d]||r;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},108:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return m},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"jvm",title:"JVM Metrics"},m=void 0,s={unversionedId:"datatypes/metrics/jvm",id:"datatypes/metrics/jvm",title:"JVM Metrics",description:"ZIO has built-in support for collecting JVM Metrics. These metrics are a direct port of the JVM metrics provided by the Prometheus Java Hotspot library and compatible with that library.",source:"@site/docs/datatypes/metrics/jvm.md",sourceDirName:"datatypes/metrics",slug:"/datatypes/metrics/jvm",permalink:"/next/datatypes/metrics/jvm",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/metrics/jvm.md",tags:[],version:"current",frontMatter:{id:"jvm",title:"JVM Metrics"},sidebar:"datatypes-sidebar",previous:{title:"MetricLabel",permalink:"/next/datatypes/metrics/metriclabel"},next:{title:"Chunk",permalink:"/next/datatypes/misc/chunk"}},c=[{value:"Collecting Metrics",id:"collecting-metrics",children:[{value:"Collecting Inside a ZIO Application",id:"collecting-inside-a-zio-application",children:[],level:3},{value:"Collecting as a Sidecar to a ZIO Application",id:"collecting-as-a-sidecar-to-a-zio-application",children:[],level:3}],level:2}],p={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"ZIO has built-in support for collecting JVM Metrics. These metrics are a direct port of the JVM metrics provided by the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/prometheus/client_java/tree/master/simpleclient_hotspot"},"Prometheus Java Hotspot library")," and compatible with that library."),(0,r.kt)("p",null,"There are five categories of JVM metrics. Let's look at them one by one:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Buffer Pools",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_buffer_pool_used_bytes")," \u2014 Used bytes of a given JVM buffer pool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_buffer_pool_capacity_bytes")," \u2014 Bytes capacity of a given JVM buffer pool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_buffer_pool_used_buffers")," \u2014 Used buffers of a given JVM buffer pool."))),(0,r.kt)("li",{parentName:"ul"},"Class Loading",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_classes_loaded")," \u2014 The number of classes that are currently loaded in the JVM"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_classes_loaded_total")," \u2014 The total number of classes that have been loaded since the JVM has started execution"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_classes_unloaded_total")," \u2014 The total number of classes that have been unloaded since the JVM has started\nexecution"))),(0,r.kt)("li",{parentName:"ul"},"Garbage Collector",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_gc_collection_seconds_sum")," \u2014 Time spent in a given JVM garbage collector in seconds."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_gc_collection_seconds_count")))),(0,r.kt)("li",{parentName:"ul"},"Memory Allocation",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_pool_allocated_bytes_total")," \u2014 Total bytes allocated in a given JVM memory pool. Only updated after GC, not continuously."))),(0,r.kt)("li",{parentName:"ul"},"Memory Pools",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_bytes_used")," \u2014 Used bytes of a given JVM memory area."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_bytes_committed")," \u2014 Committed (bytes) of a given JVM memory area."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_bytes_max")," \u2014 Max (bytes) of a given JVM memory area."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_bytes_init")," \u2014 Initial bytes of a given JVM memory area."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_pool_bytes_used")," \u2014 Used bytes of a given JVM memory pool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_pool_bytes_committed")," \u2014 Committed bytes of a given JVM memory pool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_pool_bytes_max")," \u2014 Max bytes of a given JVM memory pool."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_memory_pool_bytes_init")," \u2014 Initial bytes of a given JVM memory pool."))),(0,r.kt)("li",{parentName:"ul"},"Standard",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"process_cpu_seconds_total")," \u2014 Total user and system CPU time spent in seconds."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"process_start_time_seconds")," \u2014 Start time of the process since unix epoch in seconds."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"process_open_fds")," \u2014 Number of open file descriptors."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"process_max_fds")," \u2014 Maximum number of open file descriptors."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"process_virtual_memory_bytes")," \u2014 Virtual memory size in bytes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"process_resident_memory_bytes")," \u2014 Resident memory size in bytes."))),(0,r.kt)("li",{parentName:"ul"},"Thread",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_threads_current")," \u2014 Current thread count of a JVM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_threads_daemon")," \u2014 Daemon thread count of a JVM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_threads_peak")," \u2014 Peak thread count of a JVM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_threads_started_total")," \u2014 Started thread count of a JVM."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_threads_deadlocked")," \u2014 Cycles of JVM-threads that are in deadlock waiting to acquire object monitors or ownable synchronizers."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_threads_deadlocked_monitor")," \u2014 Cycles of JVM-threads that are in deadlock waiting to acquire object monitors."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_threads_state")," \u2014 Current count of threads by state."))),(0,r.kt)("li",{parentName:"ul"},"Version Info",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"jvm_info"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"version")," \u2014 java.runtime.version "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"vendor")," \u2014 java.vm.vendor"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"runtime")," \u2014 java.runtime.name")))))),(0,r.kt)("h2",{id:"collecting-metrics"},"Collecting Metrics"),(0,r.kt)("h3",{id:"collecting-inside-a-zio-application"},"Collecting Inside a ZIO Application"),(0,r.kt)("p",null,"JVM Metrics are collection of the following ZIO services:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"BufferPools"),(0,r.kt)("li",{parentName:"ul"},"ClassLoading"),(0,r.kt)("li",{parentName:"ul"},"GarbageCollector"),(0,r.kt)("li",{parentName:"ul"},"MemoryAllocation"),(0,r.kt)("li",{parentName:"ul"},"MemoryPools"),(0,r.kt)("li",{parentName:"ul"},"Standard"),(0,r.kt)("li",{parentName:"ul"},"Thread"),(0,r.kt)("li",{parentName:"ul"},"VersionInfo")),(0,r.kt)("p",null,"We can access any of them from the environment and call the ",(0,r.kt)("inlineCode",{parentName:"p"},"collectMetrics")," operation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.metrics.jvm.Thread\nimport zio.metrics.{MetricClient, MetricKey}\n\nobject JvmMetricsExample extends ZIOAppDefault {\n  val myApp =\n    for {\n      _ <- Console.printLine("Collecting JVM Threads metrics ...")\n      _ <- ZIO.service[Thread].flatMap(_.collectMetrics.useNow)\n      _ <- Console.printLine(s"Current thread count of the JVM: " +\n        MetricClient.unsafeState(MetricKey.Gauge("jvm_threads_current")))\n    } yield ()\n\n  def run =\n    myApp\n      .schedule(Schedule.fixed(10.seconds))\n      .provideCustom(Thread.live)\n}\n')),(0,r.kt)("p",null,"This method of collecting metrics is not idiomatic. It's for educational purposes or rare cases where we need to gather metrics within our main logic. In most cases, ",(0,r.kt)("a",{parentName:"p",href:"#collecting-as-a-sidecar-to-a-zio-application"},"we collect metrics without involving the core application logic"),"."),(0,r.kt)("h3",{id:"collecting-as-a-sidecar-to-a-zio-application"},"Collecting as a Sidecar to a ZIO Application"),(0,r.kt)("p",null,"ZIO JVM metrics have built-in applications that collect the JVM metrics. They can be composed with other ZIO applications as a ",(0,r.kt)("em",{parentName:"p"},"sidecar"),". By doing so, we are able to collect JVM metrics without modifying our main ZIO application. They will be executed as a daemon alongside the main app:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.metrics.MetricClient\nimport zio.metrics.jvm.DefaultJvmMetrics\n\nobject MainApp extends ZIOAppDefault {\n  val myAppLogic =\n    for {\n      _ <- Console.printLine("starting the main logic ...")\n      _ <- Console.printLine("running a time consuming logic").delay(30.seconds)\n      _ <- Console.printLine("finished my job!")\n    } yield ()\n\n  val printMetrics =\n    Console.printLine(MetricClient.unsafeStates)\n            .schedule(Schedule.fixed(10.seconds))\n\n  def run =\n    for {\n      main    <- myAppLogic.fork\n      metrics <- printMetrics.fork\n      _       <- (main <*> metrics).join\n    } yield ()\n}\n\nobject MainAppWithJvmMetrics extends ZIOApp.Proxy(MainApp <> DefaultJvmMetrics.app)\n')))}u.isMDXComponent=!0}}]);