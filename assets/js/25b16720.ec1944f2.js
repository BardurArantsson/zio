"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[5272],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),g=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=g(e.components);return o.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=g(t),d=r,f=u["".concat(s,".").concat(d)]||u[d]||c[d]||i;return t?o.createElement(f,a(a({ref:n},p),{},{components:t})):o.createElement(f,a({ref:n},p))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var g=2;g<i;g++)a[g]=t[g];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5320:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return g},toc:function(){return p},default:function(){return u}});var o=t(7462),r=t(3366),i=(t(7294),t(3905)),a=["components"],l={id:"zio-logging",title:"ZIO Logging"},s=void 0,g={unversionedId:"resources/ecosystem/officials/zio-logging",id:"resources/ecosystem/officials/zio-logging",title:"ZIO Logging",description:"ZIO Logging is simple logging for ZIO apps, with correlation, context, and pluggable backends out of the box.",source:"@site/docs/resources/ecosystem/officials/zio-logging.md",sourceDirName:"resources/ecosystem/officials",slug:"/resources/ecosystem/officials/zio-logging",permalink:"/next/resources/ecosystem/officials/zio-logging",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/resources/ecosystem/officials/zio-logging.md",tags:[],version:"current",frontMatter:{id:"zio-logging",title:"ZIO Logging"},sidebar:"resources-sidebar",previous:{title:"ZIO Kafka",permalink:"/next/resources/ecosystem/officials/zio-kafka"},next:{title:"ZIO Metrics",permalink:"/next/resources/ecosystem/officials/zio-metrics"}},p=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],c={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-logging"},"ZIO Logging")," is simple logging for ZIO apps, with correlation, context, and pluggable backends out of the box."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"When we are writing our applications using ZIO effects, to log easy way we need a ZIO native solution for logging. ZIO Logging is an environmental effect for adding logging into our ZIO applications."),(0,i.kt)("p",null,"Key features of ZIO Logging:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"ZIO Native")," \u2014 Other than it is a type-safe and purely functional solution, it leverages ZIO's features."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Multi-Platform")," - It supports both JVM and JS platforms."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Composable")," \u2014 Loggers are composable together via contraMap."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Pluggable Backends")," \u2014 Support multiple backends like ZIO Console, SLF4j, JS Console, JS HTTP endpoint."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Logger Context")," \u2014 It has a first citizen ",(0,i.kt)("em",{parentName:"li"},"Logger Context")," implemented on top of ",(0,i.kt)("inlineCode",{parentName:"li"},"FiberRef"),". The Logger Context maintains information like logger name, filters, correlation id, and so forth across different fibers. It supports ",(0,i.kt)("em",{parentName:"li"},"Mapped Diagnostic Context (MDC)")," which manages contextual information across fibers in a concurrent environment.")),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,i.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-config" % "0.5.11" \n')),(0,i.kt)("p",null,"There are also some optional dependencies:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"zio-logging-slf4j")," \u2014 SLF4j integration"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"zio-logging-slf4j-bridge")," \u2014 Using ZIO Logging for SLF4j loggers, usually third-party non-ZIO libraries"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"zio-logging-jsconsole")," \u2014 Scala.js console integration"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"zio-logging-jshttp")," \u2014 Scala.js HTTP Logger which sends logs to a backend via Ajax POST")),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's try an example of ZIO Logging which demonstrates a simple application of ZIO logging along with its ",(0,i.kt)("em",{parentName:"p"},"Logger Context")," feature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.clock.Clock\nimport zio.duration.durationInt\nimport zio.logging._\nimport zio.random.Random\nimport zio.{ExitCode, NonEmptyChunk, ZIO}\n\nobject ZIOLoggingExample extends zio.App {\n\n  val myApp: ZIO[Logging with Clock with Random, Nothing, Unit] =\n    for {\n      _ <- log.info("Hello from ZIO logger")\n      _ <-\n        ZIO.foreachPar(NonEmptyChunk("UserA", "UserB", "UserC")) { user =>\n          log.locally(UserId(Some(user))) {\n            for {\n              _ <- log.info("User validation")\n              _ <- zio.random\n                .nextIntBounded(1000)\n                .flatMap(t => ZIO.sleep(t.millis))\n              _ <- log.info("Connecting to the database")\n              _ <- zio.random\n                .nextIntBounded(100)\n                .flatMap(t => ZIO.sleep(t.millis))\n              _ <- log.info("Releasing resources.")\n            } yield ()\n          }\n\n        }\n    } yield ()\n\n  type UserId = String\n  def UserId: LogAnnotation[Option[UserId]] = LogAnnotation[Option[UserId]](\n    name = "user-id",\n    initialValue = None,\n    combine = (_, r) => r,\n    render = _.map(userId => s"[user-id: $userId]")\n      .getOrElse("undefined-user-id")\n  )\n\n  val env =\n    Logging.console(\n      logLevel = LogLevel.Info,\n      format =\n        LogFormat.ColoredLogFormat((ctx, line) => s"${ctx(UserId)} $line")\n    ) >>> Logging.withRootLoggerName("MyZIOApp")\n\n  override def run(args: List[String]) =\n    myApp.provideCustom(env).as(ExitCode.success)\n}\n')),(0,i.kt)("p",null,"The output should be something like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"2021-07-09 00:14:47.457+0000  info [MyZIOApp] undefined-user-id Hello from ZIO logger\n2021-07-09 00:14:47.807+0000  info [MyZIOApp] [user-id: UserA] User validation\n2021-07-09 00:14:47.808+0000  info [MyZIOApp] [user-id: UserC] User validation\n2021-07-09 00:14:47.818+0000  info [MyZIOApp] [user-id: UserB] User validation\n2021-07-09 00:14:48.290+0000  info [MyZIOApp] [user-id: UserC] Connecting to the database\n2021-07-09 00:14:48.299+0000  info [MyZIOApp] [user-id: UserA] Connecting to the database\n2021-07-09 00:14:48.321+0000  info [MyZIOApp] [user-id: UserA] Releasing resources.\n2021-07-09 00:14:48.352+0000  info [MyZIOApp] [user-id: UserC] Releasing resources.\n2021-07-09 00:14:48.820+0000  info [MyZIOApp] [user-id: UserB] Connecting to the database\n2021-07-09 00:14:48.882+0000  info [MyZIOApp] [user-id: UserB] Releasing resources.\n")))}u.isMDXComponent=!0}}]);