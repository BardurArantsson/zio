"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[5196],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,y=u["".concat(s,".").concat(m)]||u[m]||f[m]||i;return t?r.createElement(y,o(o({ref:n},p),{},{components:t})):r.createElement(y,o({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3288:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(7462),a=(t(7294),t(3905));const i={id:"sink",title:"Sink"},o=void 0,l={unversionedId:"references/stream/sink",id:"references/stream/sink",title:"Sink",description:"Sink[E, A, L, B] is a type alias for ZSink[Any, E, A, L, B]. We can think of a Sink as a function that does not require any services and will consume a variable amount of A elements (could be 0, 1, or many!), might fail with an error of type E, and will eventually yield a value of type B. The L is the type of elements in the leftover.",source:"@site/docs/references/stream/sink.md",sourceDirName:"references/stream",slug:"/references/stream/sink",permalink:"/references/stream/sink",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/references/stream/sink.md",tags:[],version:"current",frontMatter:{id:"sink",title:"Sink"},sidebar:"references-sidebar",previous:{title:"ZSink",permalink:"/references/stream/zsink"},next:{title:"ZChannel",permalink:"/references/stream/zchannel"}},s={},c=[],p={toc:c};function f(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Sink[E, A, L, B]")," is a type alias for ",(0,a.kt)("inlineCode",{parentName:"p"},"ZSink[Any, E, A, L, B]"),". We can think of a ",(0,a.kt)("inlineCode",{parentName:"p"},"Sink")," as a function that does not require any services and will consume a variable amount of ",(0,a.kt)("inlineCode",{parentName:"p"},"A")," elements (could be 0, 1, or many!), might fail with an error of type ",(0,a.kt)("inlineCode",{parentName:"p"},"E"),", and will eventually yield a value of type ",(0,a.kt)("inlineCode",{parentName:"p"},"B"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"L")," is the type of elements in the leftover."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},"type Sink[+E, A, +L, +B] = ZSink[Any, E, A, L, B]\n")))}f.isMDXComponent=!0}}]);