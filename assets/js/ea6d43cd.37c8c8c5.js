"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6830],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1549:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=n(7462),i=(n(7294),n(3905));const r={id:"sized",title:"Sized"},s=void 0,o={unversionedId:"datatypes/test/environment/sized",id:"datatypes/test/environment/sized",title:"Sized",description:"The Sized service enables the Sized Generators to access the size from the ZIO Test environment:",source:"@site/docs/datatypes/test/environment/sized.md",sourceDirName:"datatypes/test/environment",slug:"/datatypes/test/environment/sized",permalink:"/next/datatypes/test/environment/sized",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/datatypes/test/environment/sized.md",tags:[],version:"current",frontMatter:{id:"sized",title:"Sized"},sidebar:"datatypes-sidebar",previous:{title:"TestConfig",permalink:"/next/datatypes/test/environment/config"},next:{title:"TestAspect",permalink:"/next/datatypes/test/test-aspect"}},l=[{value:"Operations",id:"operations",children:[{value:"size",id:"size",children:[],level:3},{value:"withSize",id:"withsize",children:[],level:3}],level:2}],p={toc:l};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Sized")," service enables the ",(0,i.kt)("em",{parentName:"p"},"Sized Generators")," to access the ",(0,i.kt)("em",{parentName:"p"},"size")," from the ZIO Test environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"trait Sized extends Serializable {\n  def size: UIO[Int]\n  def withSize[R, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A]\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Sized")," service has two APIs:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Sized.size")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"Sized.withSize"))),(0,i.kt)("p",null,"Let's go through each one:"),(0,i.kt)("h2",{id:"operations"},"Operations"),(0,i.kt)("h3",{id:"size"},"size"),(0,i.kt)("p",null,"To access the default ",(0,i.kt)("em",{parentName:"p"},"size")," value from the environment, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Sized.size")," API. In ZIO Test, it is used to enable the ",(0,i.kt)("em",{parentName:"p"},"sized generators")," access the ",(0,i.kt)("em",{parentName:"p"},"size")," from the environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Sized {\n  def withSize[R <: Sized, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A] = ???\n}\n")),(0,i.kt)("p",null,"For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Gen.sized")," generator has the following signature:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Gen {\n  def sized[R <: Sized, A](f: Int => Gen[R, A]): Gen[R, A] = ???\n}\n")),(0,i.kt)("p",null,"It applies the ",(0,i.kt)("em",{parentName:"p"},"size")," to the given function of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Int => Gen[R, A]"),". We should note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"sized")," generator obtains the ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," value from the environment internally."),(0,i.kt)("p",null,"In the following example, we are creating a sized generator, which generates integer values within the specified range. In this generator, the lower bound is bound to zero, and the upper bound is bound to the ",(0,i.kt)("em",{parentName:"p"},"size")," value, which is obtained from the ZIO environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\nimport zio.test._\n\nval sizedInts: Gen[Sized, Int] = \n  Gen.sized(Gen.int(0, _))\n")),(0,i.kt)("p",null,"To generate some sample values, we can use ",(0,i.kt)("inlineCode",{parentName:"p"},"Gen#runCollectN")," operator on that:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"val samples: URIO[Sized, List[Int]] = \n  sizedInts.runCollectN(5).debug\n")),(0,i.kt)("p",null,"The return type require the ",(0,i.kt)("em",{parentName:"p"},"Sized")," service. Therefore, to run this effect, we need to provide this service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"zio.Runtime.default.unsafeRun(\n  samples.provide(Sized.live(100)) \n)\n// Sample Output: List(34, 44, 89, 14, 15)\n")),(0,i.kt)("p",null,"The previous example was for educational purposes. In the real world, when we are testing, we don't need to manually provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"Sized.live")," layer. The ZIO Test Runner has a built-in ",(0,i.kt)("inlineCode",{parentName:"p"},"TestEnvironment")," which contains all required services for testing as well as ",(0,i.kt)("inlineCode",{parentName:"p"},"Sized")," service:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"type TestEnvironment =\n  Annotations\n    with Live\n    with Sized\n")),(0,i.kt)("p",null,"So when we test a property with ZIO Test, all the required services will be provided to the ZIO Test Runner:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object SizedSpec extends ZIOSpecDefault {\n  def spec =\n    suite("sized") {\n      test("bounded int generator shouldn\'t cross its boundaries") {\n        check(Gen.sized(Gen.int(0, _))) { n =>\n          assertTrue(n >= 0 && n <= 100)  // The default size is 100\n        }\n      }\n    }\n}\n')),(0,i.kt)("h3",{id:"withsize"},"withSize"),(0,i.kt)("p",null,"To change the default ",(0,i.kt)("em",{parentName:"p"},"size")," temporarily, we can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Size.withSize"),". It takes a ",(0,i.kt)("inlineCode",{parentName:"p"},"size")," and a ZIO effect, and runs that effect bounded with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"size"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Sized {\n  def withSize[R <: Sized, E, A](size: Int)(zio: ZIO[R, E, A]): ZIO[R, E, A] = ???\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test._\n\nval effect     : UIO[String]             = ZIO.succeed("effect")\nval sizedEffect: RIO[Sized, String] = Sized.withSize(10)(effect)\n')),(0,i.kt)("p",null,"ZIO Test has a test aspect called ",(0,i.kt)("inlineCode",{parentName:"p"},"TestAspect.sized")," which is a helper method for this operation. This test aspect runs each test with the given ",(0,i.kt)("em",{parentName:"p"},"size")," value:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.test._\n\nobject SizedSpec extends ZIOSpecDefault {\n  def spec =\n    suite("sized") {\n      test("bounded int generator shouldn\'t cross its boundaries") {\n        check(Gen.sized(Gen.int(0, _))) { n =>\n          assertTrue(n >= 0 && n <= 200)\n        }\n      } @@ TestAspect.sized(200)\n    }\n}\n')))}d.isMDXComponent=!0}}]);