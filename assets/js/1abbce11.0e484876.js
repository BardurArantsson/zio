"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[6878],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},6756:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const i={id:"zio-sqs",title:"ZIO SQS"},a=void 0,s={unversionedId:"resources/ecosystem/officials/zio-sqs",id:"resources/ecosystem/officials/zio-sqs",title:"ZIO SQS",description:"ZIO SQS is a ZIO-powered client for AWS SQS. It is built on top of the AWS SDK for Java 2.0 via the automatically generated wrappers from zio-aws.",source:"@site/docs/resources/ecosystem/officials/zio-sqs.md",sourceDirName:"resources/ecosystem/officials",slug:"/resources/ecosystem/officials/zio-sqs",permalink:"/resources/ecosystem/officials/zio-sqs",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/resources/ecosystem/officials/zio-sqs.md",tags:[],version:"current",frontMatter:{id:"zio-sqs",title:"ZIO SQS"},sidebar:"resources-sidebar",previous:{title:"ZIO Schema",permalink:"/resources/ecosystem/officials/zio-schema"},next:{title:"ZIO Telemetry",permalink:"/resources/ecosystem/officials/zio-telemetry"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2}],u={toc:c};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-sqs"},"ZIO SQS")," is a ZIO-powered client for AWS SQS. It is built on top of the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics.html"},"AWS SDK for Java 2.0")," via the automatically generated wrappers from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio/zio-aws"},"zio-aws"),"."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"ZIO SQS enables us to produce and consume elements to/from the Amazon SQS service. It is integrated with ZIO Streams, so we can produce and consume elements in a streaming fashion, element by element or micro-batching."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,o.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "dev.zio" %% "zio-sqs" % "0.4.2"\n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"In this example we produce a stream of events to the ",(0,o.kt)("inlineCode",{parentName:"p"},"MyQueue")," and then consume them from that queue:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import io.github.vigoo.zioaws\nimport io.github.vigoo.zioaws.core.config.CommonAwsConfig\nimport io.github.vigoo.zioaws.sqs.Sqs\nimport software.amazon.awssdk.auth.credentials.{\n  AwsBasicCredentials,\n  StaticCredentialsProvider\n}\nimport software.amazon.awssdk.regions.Region\nimport zio.clock.Clock\nimport zio.sqs.producer.{Producer, ProducerEvent}\nimport zio.sqs.serialization.Serializer\nimport zio.sqs.{SqsStream, SqsStreamSettings, Utils}\nimport zio.stream.ZStream\nimport zio.{ExitCode, RIO, URIO, ZLayer, _}\n\nobject ProducerConsumerExample extends zio.App {\n  val queueName = "MyQueue"\n\n  val client: ZLayer[Any, Throwable, Sqs] = zioaws.netty.default ++\n    ZLayer.succeed(\n      CommonAwsConfig(\n        region = Some(Region.of("ap-northeast-2")),\n        credentialsProvider = StaticCredentialsProvider.create(\n          AwsBasicCredentials.create("key", "key")\n        ),\n        endpointOverride = None,\n        commonClientConfig = None\n      )\n    ) >>>\n    zioaws.core.config.configured() >>>\n    zioaws.sqs.live\n\n  val stream: ZStream[Any, Nothing, ProducerEvent[String]] =\n    ZStream.iterate(0)(_ + 1).map(_.toString).map(ProducerEvent(_))\n\n  val program: RIO[Sqs with Clock, Unit] = for {\n    _        <- Utils.createQueue(queueName)\n    queueUrl <- Utils.getQueueUrl(queueName)\n    producer = Producer.make(queueUrl, Serializer.serializeString)\n    _ <- producer.use { p =>\n      p.sendStream(stream).runDrain\n    }\n    _ <- SqsStream(\n      queueUrl,\n      SqsStreamSettings(stopWhenQueueEmpty = true, waitTimeSeconds = Some(3))\n    ).foreach(msg => UIO(println(msg.body)))\n  } yield ()\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    program.provideCustom(client).exitCode\n}\n')))}m.isMDXComponent=!0}}]);