"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[8164],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),f=r,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||o;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},64:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={id:"concurrent",title:"Concurrent State Managementt",sidebar_label:"Concurrent"},i=void 0,l={unversionedId:"reference/state/concurrent",id:"reference/state/concurrent",title:"Concurrent State Managementt",description:"In concurrent programming, we can categorize state management into two general approaches:",source:"@site/docs/reference/state/concurrent-state-management.md",sourceDirName:"reference/state",slug:"/reference/state/concurrent",permalink:"/reference/state/concurrent",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/reference/state/concurrent-state-management.md",tags:[],version:"current",frontMatter:{id:"concurrent",title:"Concurrent State Managementt",sidebar_label:"Concurrent"},sidebar:"reference-sidebar",previous:{title:"Sequential",permalink:"/reference/state/sequential"},next:{title:"FiberRef",permalink:"/reference/state/fiberref"}},c={},s=[{value:"Global Shared State",id:"global-shared-state",level:2},{value:"Counter Example",id:"counter-example",level:2},{value:"Fiber-local State",id:"fiber-local-state",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In concurrent programming, we can categorize state management into two general approaches:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Global Shared State"),"- ZIO provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," data type for managing global states that are shared across all fibers and can be updated and accessed concurrently.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Fiber-local State"),"\u2014 ZIO provides two data types called ",(0,r.kt)("inlineCode",{parentName:"p"},"Fiberref")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ZState")," that can be used to maintain the state in a concurrent environment, but each fiber has its own state. Their states are not shared between other fibers. This prevents them from clobbering each other's state."))),(0,r.kt)("h2",{id:"global-shared-state"},"Global Shared State"),(0,r.kt)("p",null,"One of the common use cases for ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," is to manage the state of applications, especially in concurrent environments. We can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," data type, which is a purely functional description of a mutable reference."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")),(0,r.kt)("p",{parentName:"blockquote"},"In this section, we will only cover the basic usage of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," data type. To learn more details about the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref"),", especially its usage in concurrent programming, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"/reference/concurrency/ref"},(0,r.kt)("inlineCode",{parentName:"a"},"Ref"))," page on the concurrency section.")),(0,r.kt)("p",null,"In the previous page, we have learned how to use recursive functions to manage the state of our application. However, this approach has the following drawbacks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We cannot share the state between multiple fibers."),(0,r.kt)("li",{parentName:"ul"},"Sometime, writing the application logic is a bit tedious. It is somehow awkward to pass the state using function parameters.")),(0,r.kt)("p",null,"Thanks to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," data type, we can easily use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," data type to manage the state of our application, whether we need concurrency or not."),(0,r.kt)("p",null,"In the previous section, we learned that we can have state management, even for effectful operations. Here is the last example we tried:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ndef inputNames: ZIO[Any, String, List[String]] = {\n  def loop(names: List[String]): ZIO[Any, String, List[String]] = {\n    Console.readLine("Please enter a name or `q` to exit: ").orDie.flatMap {\n      case "q" =>\n        ZIO.succeed(names)\n      case name =>\n        loop(names appended name)\n    }\n  }\n\n  loop(List.empty[String])\n}\n')),(0,r.kt)("p",null,"This code can be rewritten using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," type, which is simpler than the previous one:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ndef getNames: ZIO[Any, String, List[String]] =\n  Ref.make(List.empty[String])\n    .flatMap { ref =>\n      Console\n        .readLine("Please enter a name or \'q\' to exit: ")\n        .orDie\n        .repeatWhileZIO {\n          case "q" => ZIO.succeed(false)\n          case name => ref.update(_ appended name).as(true)\n        } *> ref.get\n    }\n')),(0,r.kt)("p",null,'First, we created a mutable reference to the initial state value, which is an empty list. Then, we read from the console repeatedly until the user enters the "q" command. Finally, we got the value of the reference and returned it.'),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")),(0,r.kt)("p",{parentName:"blockquote"},"All the operations on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," data type are effectful. So when we are reading from or writing to a ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref"),", we are performing an effectful operation.")),(0,r.kt)("p",null,"Now that we have learned how to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," data type, we can use it to manage the state concurrently. For example, assume while we are reading from the console, we have another fiber that is trying to update the state from a different source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\ndef getNames: ZIO[Any, String, List[String]] =\n  for {\n    ref <- Ref.make(List.empty[String])\n    f1 <- Console\n      .readLine("Please enter a name or \'q\' to exit: ")\n      .orDie\n      .repeatWhileZIO {\n        case "q"  => ZIO.succeed(false)\n        case name => ref.update(_ appended name).as(true)\n      }.fork \n      f2 <- ZIO.foreachDiscard(Seq("John", "Jane", "Joe", "Tom")) { name =>\n        ref.update(_ appended name) *> ZIO.sleep(1.second)\n      }\n      .fork\n    _ <- f1.join\n    _ <- f2.join\n    v <- ref.get\n  } yield v\n')),(0,r.kt)("h2",{id:"counter-example"},"Counter Example"),(0,r.kt)("p",null,"Let's write a counter using the ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," data type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import zio._\n\ncase class Counter(value: Ref[Int]) {\n  def inc: UIO[Unit] = value.update(_ + 1)\n  def dec: UIO[Unit] = value.update(_ - 1)\n  def get: UIO[Int] = value.get\n}\n\nobject Counter {\n  def make: UIO[Counter] = Ref.make(0).map(Counter(_))\n}\n")),(0,r.kt)("p",null,"Here is the usage example of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Counter"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run =\n    for {\n      c <- Counter.make\n      _ <- c.inc\n      _ <- c.inc\n      _ <- c.dec\n      _ <- c.inc\n      v <- c.get\n      _ <- ZIO.debug(s"This counter has a value of $v.")\n    } yield ()\n}\n')),(0,r.kt)("p",null,"We can use this counter in a concurrent environment, e.g. in a RESTful API to count the number of requests. But for just an example, let's concurrently update the counter:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\n\nobject MainApp extends ZIOAppDefault {\n  def run =\n    for {\n      c <- Counter.make\n      _ <- c.inc <&> c.inc <&> c.dec <&> c.inc\n      v <- c.get\n      _ <- ZIO.debug(s"This counter has a value of $v.")\n    } yield ()\n}\n')),(0,r.kt)("h2",{id:"fiber-local-state"},"Fiber-local State"),(0,r.kt)("p",null,"Both the ",(0,r.kt)("inlineCode",{parentName:"p"},"FiberRef")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ZState")," data types are state management tools that are scoped to a certain fiber. Their values are only accessible within the fiber that runs them. "),(0,r.kt)("p",null,"We have a separate page for the ",(0,r.kt)("a",{parentName:"p",href:"/reference/state/fiberref"},(0,r.kt)("inlineCode",{parentName:"a"},"FiberRef"))," and ",(0,r.kt)("a",{parentName:"p",href:"/reference/state/zstate"},(0,r.kt)("inlineCode",{parentName:"a"},"ZState"))," data types which explain how to use them."))}u.isMDXComponent=!0}}]);