"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"ZIO 2.x","banner":null,"badge":true,"className":"docs-version-current","isLast":true,"docsSidebars":{"overview_sidebar":[{"type":"link","label":"Summary","href":"/overview/","docId":"overview/overview_index"},{"type":"link","label":"Creating Effects","href":"/overview/overview_creating_effects","docId":"overview/overview_creating_effects"},{"type":"link","label":"Basic Operations","href":"/overview/overview_basic_operations","docId":"overview/overview_basic_operations"},{"type":"link","label":"Handling Errors","href":"/overview/overview_handling_errors","docId":"overview/overview_handling_errors"},{"type":"link","label":"Handling Resources","href":"/overview/overview_handling_resources","docId":"overview/overview_handling_resources"},{"type":"link","label":"Basic Concurrency","href":"/overview/overview_basic_concurrency","docId":"overview/overview_basic_concurrency"},{"type":"link","label":"Running Effects","href":"/overview/overview_running_effects","docId":"overview/overview_running_effects"},{"type":"link","label":"Performance","href":"/overview/overview_performance","docId":"overview/overview_performance"},{"type":"link","label":"Platforms","href":"/overview/overview_platforms","docId":"overview/overview_platforms"}],"reference-sidebar":[{"type":"link","label":"Introduction","href":"/reference/","docId":"reference/index"},{"type":"category","label":"Core","collapsed":false,"items":[{"type":"category","label":"ZIO","items":[{"type":"category","collapsed":true,"label":"Type Aliases","items":[{"type":"link","label":"UIO","href":"/reference/core/zio/uio","docId":"reference/core/zio/uio"},{"type":"link","label":"URIO","href":"/reference/core/zio/urio","docId":"reference/core/zio/urio"},{"type":"link","label":"Task","href":"/reference/core/zio/task","docId":"reference/core/zio/task"},{"type":"link","label":"RIO","href":"/reference/core/zio/rio","docId":"reference/core/zio/rio"},{"type":"link","label":"IO","href":"/reference/core/zio/io","docId":"reference/core/zio/io"}],"collapsible":true}],"collapsed":true,"collapsible":true,"href":"/reference/core/zio/"},{"type":"link","label":"ZIOApp","href":"/reference/core/zioapp","docId":"reference/core/zioapp"},{"type":"link","label":"Runtime","href":"/reference/core/runtime","docId":"reference/core/runtime"},{"type":"link","label":"Exit","href":"/reference/core/exit","docId":"reference/core/exit"},{"type":"link","label":"Cause","href":"/reference/core/cause","docId":"reference/core/cause"}],"collapsible":true},{"type":"category","label":"Error Management","items":[{"type":"category","label":"Three Types of Errors in ZIO","items":[{"type":"link","label":"Failures","href":"/reference/error-management/types/failures","docId":"reference/error-management/types/failures"},{"type":"link","label":"Defects","href":"/reference/error-management/types/defects","docId":"reference/error-management/types/defects"},{"type":"link","label":"Fatal Errors","href":"/reference/error-management/types/fatals","docId":"reference/error-management/types/fatals"}],"collapsed":true,"collapsible":true,"href":"/reference/error-management/types/"},{"type":"link","label":"Imperative vs. Declarative","href":"/reference/error-management/imperative-vs-declarative","docId":"reference/error-management/imperative-vs-declarative"},{"type":"link","label":"Expected and Unexpected Errors","href":"/reference/error-management/expected-and-unexpected-errors","docId":"reference/error-management/expected-and-unexpected-errors"},{"type":"link","label":"Exceptional and Unexceptional Effects","href":"/reference/error-management/exceptional-and-unexceptional-effects","docId":"reference/error-management/exceptional-and-unexceptional-effects"},{"type":"link","label":"Typed Errors Guarantees","href":"/reference/error-management/typed-errors-guarantees","docId":"reference/error-management/typed-errors-guarantees"},{"type":"link","label":"Sequential and Parallel Errors","href":"/reference/error-management/sequential-and-parallel-errors","docId":"reference/error-management/sequential-and-parallel-errors"},{"type":"category","label":"Recovering From Errors","items":[{"type":"link","label":"1. Catching","href":"/reference/error-management/recovering/catching","docId":"reference/error-management/recovering/catching"},{"type":"link","label":"2. Fallback","href":"/reference/error-management/recovering/fallback","docId":"reference/error-management/recovering/fallback"},{"type":"link","label":"3. Folding","href":"/reference/error-management/recovering/folding","docId":"reference/error-management/recovering/folding"},{"type":"link","label":"4. Retrying","href":"/reference/error-management/recovering/retrying","docId":"reference/error-management/recovering/retrying"},{"type":"link","label":"5. Timing out","href":"/reference/error-management/recovering/timing-out","docId":"reference/error-management/recovering/timing-out"},{"type":"link","label":"6. Sandboxing","href":"/reference/error-management/recovering/sandboxing","docId":"reference/error-management/recovering/sandboxing"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Error Accumulation","href":"/reference/error-management/error-accumulation","docId":"reference/error-management/error-accumulation"},{"type":"category","label":"Error Channel Operations","items":[{"type":"link","label":"Map Operations","href":"/reference/error-management/operations/map-operations","docId":"reference/error-management/operations/map-operations"},{"type":"link","label":"Chaining Effects Based on Errors","href":"/reference/error-management/operations/chaining-effects-based-on-errors","docId":"reference/error-management/operations/chaining-effects-based-on-errors"},{"type":"link","label":"Filtering the Success Channel","href":"/reference/error-management/operations/filtering-the-success-channel","docId":"reference/error-management/operations/filtering-the-success-channel"},{"type":"link","label":"Tapping Errors","href":"/reference/error-management/operations/tapping-errors","docId":"reference/error-management/operations/tapping-errors"},{"type":"link","label":"Exposing Errors in The Success Channel","href":"/reference/error-management/operations/exposing-errors-in-the-success-channel","docId":"reference/error-management/operations/exposing-errors-in-the-success-channel"},{"type":"link","label":"Exposing the Cause in The Success Channel","href":"/reference/error-management/operations/exposing-the-cause-in-the-success-channel","docId":"reference/error-management/operations/exposing-the-cause-in-the-success-channel"},{"type":"link","label":"Converting Defects to Failures","href":"/reference/error-management/operations/converting-defects-to-failures","docId":"reference/error-management/operations/converting-defects-to-failures"},{"type":"link","label":"Error Refinement","href":"/reference/error-management/operations/error-refinement","docId":"reference/error-management/operations/error-refinement"},{"type":"link","label":"Flattening Optional Error Types","href":"/reference/error-management/operations/flattening-optional-error-types","docId":"reference/error-management/operations/flattening-optional-error-types"},{"type":"link","label":"Merging the Error Channel into the Success Channel","href":"/reference/error-management/operations/merging-the-error-channel-into-the-success-channel","docId":"reference/error-management/operations/merging-the-error-channel-into-the-success-channel"},{"type":"link","label":"Flipping Error and Success Channels","href":"/reference/error-management/operations/flipping-error-and-success-channels","docId":"reference/error-management/operations/flipping-error-and-success-channels"},{"type":"link","label":"Rejecting Some Success Values","href":"/reference/error-management/operations/rejecting-some-success-values","docId":"reference/error-management/operations/rejecting-some-success-values"},{"type":"link","label":"Zooming In on Nested Values","href":"/reference/error-management/operations/zooming-in-on-nested-values","docId":"reference/error-management/operations/zooming-in-on-nested-values"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Best Practices","items":[{"type":"link","label":"Algebraic Data Types","href":"/reference/error-management/best-practices/algebraic-data-types","docId":"reference/error-management/best-practices/algebraic-data-types"},{"type":"link","label":"Union Types","href":"/reference/error-management/best-practices/union-types","docId":"reference/error-management/best-practices/union-types"},{"type":"link","label":"Don\'t Type Unexpected Errors","href":"/reference/error-management/best-practices/unexpected-errors","docId":"reference/error-management/best-practices/unexpected-errors"},{"type":"link","label":"Don\'t Reflexively Log Errors","href":"/reference/error-management/best-practices/logging-errors","docId":"reference/error-management/best-practices/logging-errors"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Examples","href":"/reference/error-management/examples","docId":"reference/error-management/examples"}],"collapsed":true,"collapsible":true,"href":"/reference/error-management/"},{"type":"category","label":"Built-in Services","items":[{"type":"link","label":"Console","href":"/reference/services/console","docId":"reference/services/console"},{"type":"link","label":"Clock","href":"/reference/services/clock","docId":"reference/services/clock"},{"type":"link","label":"Random","href":"/reference/services/random","docId":"reference/services/random"},{"type":"link","label":"System","href":"/reference/services/system","docId":"reference/services/system"}],"collapsed":true,"collapsible":true,"href":"/reference/services/"},{"type":"category","label":"Writing ZIO Services","items":[{"type":"link","label":"Service Pattern","href":"/reference/service-pattern/","docId":"reference/service-pattern/service-pattern"},{"type":"link","label":"Polymorphic Services","href":"/reference/service-pattern/defining-polymorphic-services-in-zio","docId":"reference/service-pattern/defining-polymorphic-services-in-zio"},{"type":"link","label":"Generating Accessor Methods","href":"/reference/service-pattern/generating-accessor-methods-using-macros","docId":"reference/service-pattern/generating-accessor-methods-using-macros"},{"type":"link","label":"Three Laws of ZIO Environment","href":"/reference/service-pattern/the-three-laws-of-zio-environment","docId":"reference/service-pattern/the-three-laws-of-zio-environment"}],"collapsed":true,"collapsible":true,"href":"/reference/service-pattern/introduction"},{"type":"category","label":"Contextual Types","items":[{"type":"link","label":"ZEnvironment","href":"/reference/contextual/zenvironment","docId":"reference/contextual/zenvironment"},{"type":"category","label":"ZIO Layers","items":[{"type":"link","label":"ZLayer","href":"/reference/contextual/zlayer","docId":"reference/contextual/zlayer"},{"type":"category","collapsed":true,"label":"Type Aliases","items":[{"type":"link","label":"RLayer","href":"/reference/contextual/rlayer","docId":"reference/contextual/rlayer"},{"type":"link","label":"ULayer","href":"/reference/contextual/ulayer","docId":"reference/contextual/ulayer"},{"type":"link","label":"Layer","href":"/reference/contextual/layer","docId":"reference/contextual/layer"},{"type":"link","label":"URLayer","href":"/reference/contextual/urlayer","docId":"reference/contextual/urlayer"},{"type":"link","label":"TaskLayer","href":"/reference/contextual/tasklayer","docId":"reference/contextual/tasklayer"}],"collapsible":true}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true,"href":"/reference/contextual/"},{"type":"category","label":"Scheduling","items":[{"type":"link","label":"Repetition","href":"/reference/schedule/repetition","docId":"reference/schedule/repetition"},{"type":"link","label":"Retrying","href":"/reference/schedule/retrying","docId":"reference/schedule/retrying"},{"type":"link","label":"Built-in Schedules","href":"/reference/schedule/built-in-schedules","docId":"reference/schedule/built-in-schedules"},{"type":"link","label":"Schedule Combinators","href":"/reference/schedule/combinators","docId":"reference/schedule/combinators"},{"type":"link","label":"Examples","href":"/reference/schedule/examples","docId":"reference/schedule/examples"}],"collapsed":true,"collapsible":true,"href":"/reference/schedule/"},{"type":"category","label":"State Management","items":[{"type":"link","label":"Sequential","href":"/reference/state/sequential","docId":"reference/state/sequential"},{"type":"category","label":"Concurrent","items":[{"type":"link","label":"Global Shared State","href":"/reference/state/global-shared-state","docId":"reference/state/global-shared-state"},{"type":"category","label":"Fiber-local State","items":[{"type":"link","label":"FiberRef","href":"/reference/state/fiberref","docId":"reference/state/fiberref"},{"type":"link","label":"ZState","href":"/reference/state/zstate","docId":"reference/state/zstate"}],"collapsed":true,"collapsible":true,"href":"/reference/state/fiber-local-state"}],"collapsed":true,"collapsible":true,"href":"/reference/state/concurrent"}],"collapsed":true,"collapsible":true,"href":"/reference/state/"},{"type":"category","label":"Concurrency","items":[{"type":"category","label":"ZIO Fibers","items":[{"type":"link","label":"Fiber","href":"/reference/fiber/fiber.md","docId":"reference/fiber/fiber"},{"type":"link","label":"FiberId","href":"/reference/fiber/fiberid","docId":"reference/fiber/fiberid"},{"type":"link","label":"Fiber.Status","href":"/reference/fiber/fiberstatus","docId":"reference/fiber/fiberstatus"}],"collapsed":true,"collapsible":true,"href":"/reference/fiber/"},{"type":"category","label":"Synchronization","items":[{"type":"link","label":"ReentrantLock","href":"/reference/sync/reentrantlock","docId":"reference/sync/reentrantlock"},{"type":"link","label":"CountdownLatch","href":"/reference/sync/countdownlatch","docId":"reference/sync/countdownlatch"},{"type":"link","label":"CyclicBarrier","href":"/reference/sync/cyclicbarrier","docId":"reference/sync/cyclicbarrier"},{"type":"link","label":"ConcurrentMap","href":"/reference/sync/concurrentmap","docId":"reference/sync/concurrentmap"},{"type":"link","label":"ConcurrentSet","href":"/reference/sync/concurrentset","docId":"reference/sync/concurrentset"}],"collapsed":true,"collapsible":true,"href":"/reference/sync/"},{"type":"category","label":"Concurrency Primitives","items":[{"type":"category","label":"Mutable Reference","items":[{"type":"link","label":"Ref","href":"/reference/concurrency/ref","docId":"reference/concurrency/ref"},{"type":"link","label":"Ref.Synchronized","href":"/reference/concurrency/refsynchronized","docId":"reference/concurrency/refsynchronized"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Promise","href":"/reference/concurrency/promise","docId":"reference/concurrency/promise"},{"type":"link","label":"Queue","href":"/reference/concurrency/queue","docId":"reference/concurrency/queue"},{"type":"link","label":"Hub","href":"/reference/concurrency/hub","docId":"reference/concurrency/hub"},{"type":"link","label":"Semaphore","href":"/reference/concurrency/semaphore","docId":"reference/concurrency/semaphore"}],"collapsed":true,"collapsible":true,"href":"/reference/concurrency/"},{"type":"category","label":"STM","items":[{"type":"link","label":"STM","href":"/reference/stm/stm.md","docId":"reference/stm/stm"},{"type":"link","label":"TArray","href":"/reference/stm/tarray","docId":"reference/stm/tarray"},{"type":"link","label":"TRandom","href":"/reference/stm/trandom","docId":"reference/stm/trandom"},{"type":"link","label":"TSet","href":"/reference/stm/tset","docId":"reference/stm/tset"},{"type":"link","label":"TMap","href":"/reference/stm/tmap","docId":"reference/stm/tmap"},{"type":"link","label":"TRef","href":"/reference/stm/tref","docId":"reference/stm/tref"},{"type":"link","label":"TPriorityQueue","href":"/reference/stm/tpriorityqueue","docId":"reference/stm/tpriorityqueue"},{"type":"link","label":"TPromise","href":"/reference/stm/tpromise","docId":"reference/stm/tpromise"},{"type":"link","label":"TQueue","href":"/reference/stm/tqueue","docId":"reference/stm/tqueue"},{"type":"link","label":"TReentrantLock","href":"/reference/stm/treentrantlock","docId":"reference/stm/treentrantlock"},{"type":"link","label":"TSemaphore","href":"/reference/stm/tsemaphore","docId":"reference/stm/tsemaphore"},{"type":"link","label":"THub","href":"/reference/stm/thub","docId":"reference/stm/thub"}],"collapsed":true,"collapsible":true,"href":"/reference/stm/"}],"collapsed":true,"collapsible":true,"href":"/reference/concurrency/"},{"type":"category","label":"Resource Management","items":[{"type":"link","label":"Scope","href":"/reference/resource/scope","docId":"reference/resource/scope"},{"type":"link","label":"ZPool","href":"/reference/resource/zpool","docId":"reference/resource/zpool"}],"collapsed":true,"collapsible":true,"href":"/reference/resource/"},{"type":"category","label":"Streaming","items":[{"type":"category","label":"Main Components","items":[{"type":"category","label":"ZStream","items":[{"type":"link","label":"ZStream","href":"/reference/stream/zstream","docId":"reference/stream/zstream"},{"type":"link","label":"Stream","href":"/reference/stream/stream.md","docId":"reference/stream/stream"},{"type":"link","label":"UStream","href":"/reference/stream/ustream","docId":"reference/stream/ustream"}],"collapsed":true,"collapsible":true},{"type":"category","label":"ZPipeline","items":[{"type":"link","label":"ZPipeline","href":"/reference/stream/zpipeline","docId":"reference/stream/zpipeline"}],"collapsed":true,"collapsible":true},{"type":"category","label":"ZSink","items":[{"type":"link","label":"ZSink","href":"/reference/stream/zsink","docId":"reference/stream/zsink"},{"type":"link","label":"Sink","href":"/reference/stream/sink","docId":"reference/stream/sink"}],"collapsed":true,"collapsible":true},{"type":"link","label":"ZChannel","href":"/reference/stream/zchannel","docId":"reference/stream/zchannel"}],"collapsed":true,"collapsible":true},{"type":"link","label":"SubscriptionRef","href":"/reference/stream/subscription-ref","docId":"reference/stream/subscription-ref"}],"collapsed":true,"collapsible":true,"href":"/reference/stream/"},{"type":"category","label":"Metrics","items":[{"type":"category","label":"Metric Types","items":[{"type":"link","label":"Counter","href":"/reference/metrics/counter","docId":"reference/metrics/counter"},{"type":"link","label":"Gauge","href":"/reference/metrics/gauge","docId":"reference/metrics/gauge"},{"type":"link","label":"Histogram","href":"/reference/metrics/histogram","docId":"reference/metrics/histogram"},{"type":"link","label":"Summary","href":"/reference/metrics/summary","docId":"reference/metrics/summary"},{"type":"link","label":"Frequency","href":"/reference/metrics/setcount","docId":"reference/metrics/setcount"}],"collapsed":true,"collapsible":true},{"type":"link","label":"MetricLabel","href":"/reference/metrics/metriclabel","docId":"reference/metrics/metriclabel"},{"type":"link","label":"JVM Metrics","href":"/reference/metrics/jvm","docId":"reference/metrics/jvm"}],"collapsed":true,"collapsible":true,"href":"/reference/metrics/"},{"type":"category","label":"Testing","items":[{"type":"link","label":"Why ZIO Test?","href":"/reference/test/why-zio-test","docId":"reference/test/why-zio-test"},{"type":"link","label":"Installation","href":"/reference/test/installation","docId":"reference/test/installation"},{"type":"link","label":"Writing Our First Test","href":"/reference/test/writing-our-first-test","docId":"reference/test/writing-our-first-test"},{"type":"link","label":"Running Tests","href":"/reference/test/running-tests","docId":"reference/test/running-tests"},{"type":"category","label":"Assertions","items":[{"type":"link","label":"Smart Assertions","href":"/reference/test/assertions/smart-assertions","docId":"reference/test/assertions/smart-assertions"},{"type":"category","label":"Classic Assertions","items":[{"type":"link","label":"Operations","href":"/reference/test/assertions/operations","docId":"reference/test/assertions/operations"},{"type":"link","label":"Built-in Assertions","href":"/reference/test/assertions/built-in-assertions","docId":"reference/test/assertions/built-in-assertions"},{"type":"link","label":"Examples","href":"/reference/test/assertions/examples","docId":"reference/test/assertions/examples"},{"type":"link","label":"How it Works?","href":"/reference/test/assertions/how-it-works","docId":"reference/test/assertions/how-it-works"}],"collapsed":true,"collapsible":true,"href":"/reference/test/assertions/classic-assertions"}],"collapsed":true,"collapsible":true,"href":"/reference/test/assertions/"},{"type":"link","label":"Test Hierarchies and Organization","href":"/reference/test/test-hierarchies-and-organization","docId":"reference/test/test-hierarchies-and-organization"},{"type":"link","label":"Sharing Layers within the Same File","href":"/reference/test/sharing-layers-within-the-same-file","docId":"reference/test/sharing-layers-within-the-same-file"},{"type":"link","label":"Sharing Layers Between Multiple Files","href":"/reference/test/sharing-layers-between-multiple-files","docId":"reference/test/sharing-layers-between-multiple-files"},{"type":"link","label":"Spec","href":"/reference/test/spec","docId":"reference/test/spec"},{"type":"category","label":"Test Services","items":[{"type":"link","label":"TestConsole","href":"/reference/test/services/console","docId":"reference/test/services/console"},{"type":"link","label":"TestClock","href":"/reference/test/services/clock","docId":"reference/test/services/clock"},{"type":"link","label":"TestRandom","href":"/reference/test/services/random","docId":"reference/test/services/random"},{"type":"link","label":"TestSystem","href":"/reference/test/services/system","docId":"reference/test/services/system"},{"type":"link","label":"Live","href":"/reference/test/services/live","docId":"reference/test/services/live"},{"type":"link","label":"TestConfig","href":"/reference/test/services/config","docId":"reference/test/services/config"},{"type":"link","label":"Sized","href":"/reference/test/services/sized","docId":"reference/test/services/sized"}],"collapsed":true,"collapsible":true,"href":"/reference/test/services/"},{"type":"category","label":"Test Aspects","items":[{"type":"link","label":"Before, After, and Around","href":"/reference/test/aspects/before-after-around","docId":"reference/test/aspects/before-after-around"},{"type":"link","label":"Conditional Aspects","href":"/reference/test/aspects/conditional","docId":"reference/test/aspects/conditional"},{"type":"link","label":"Debugging and Diagnostics","href":"/reference/test/aspects/debugging-and-diagnostics","docId":"reference/test/aspects/debugging-and-diagnostics"},{"type":"link","label":"Environment-specific Tests","href":"/reference/test/aspects/environment-specific-tests","docId":"reference/test/aspects/environment-specific-tests"},{"type":"link","label":"Execution Strategy","href":"/reference/test/aspects/execution-strategy","docId":"reference/test/aspects/execution-strategy"},{"type":"link","label":"Flaky and Non-flaky Tests","href":"/reference/test/aspects/flaky-and-non-flaky-tests","docId":"reference/test/aspects/flaky-and-non-flaky-tests"},{"type":"link","label":"Ignoring Tests","href":"/reference/test/aspects/ignoring-tests","docId":"reference/test/aspects/ignoring-tests"},{"type":"link","label":"Non-deterministic Test Data","href":"/reference/test/aspects/non-deterministic-test-data","docId":"reference/test/aspects/non-deterministic-test-data"},{"type":"link","label":"Passing Failed Tests","href":"/reference/test/aspects/passing-failed-tests","docId":"reference/test/aspects/passing-failed-tests"},{"type":"link","label":"Repeat and Retry","href":"/reference/test/aspects/repeat-and-retry","docId":"reference/test/aspects/repeat-and-retry"},{"type":"link","label":"Restoring State of Test Services","href":"/reference/test/aspects/restoring-state-of-test-services","docId":"reference/test/aspects/restoring-state-of-test-services"},{"type":"link","label":"Changing the Size of Sized Generators","href":"/reference/test/aspects/sized","docId":"reference/test/aspects/sized"},{"type":"link","label":"Annotating Tests","href":"/reference/test/aspects/annotating-tests","docId":"reference/test/aspects/annotating-tests"},{"type":"link","label":"Configuring Tests","href":"/reference/test/aspects/configuring-tests","docId":"reference/test/aspects/configuring-tests"},{"type":"link","label":"Timing-out Tests","href":"/reference/test/aspects/timing-out-tests","docId":"reference/test/aspects/timing-out-tests"}],"collapsed":true,"collapsible":true,"href":"/reference/test/aspects/"},{"type":"link","label":"Gen","href":"/reference/test/gen","docId":"reference/test/gen"}],"collapsed":true,"collapsible":true,"href":"/reference/test/"},{"type":"category","label":"Miscellaneous","items":[{"type":"link","label":"Chunk","href":"/reference/misc/chunk","docId":"reference/misc/chunk"},{"type":"link","label":"Supervisor","href":"/reference/misc/supervisor","docId":"reference/misc/supervisor"}],"collapsed":true,"collapsible":true}],"guides-sidebar":[{"type":"link","label":"Overview","href":"/guides/","docId":"guides/index"},{"type":"category","label":"Quickstart Guides","collapsed":false,"items":[{"type":"link","label":"Hello World","href":"/guides/quickstarts/hello-world","docId":"guides/quickstarts/hello-world"},{"type":"link","label":"RESTful Web Service","href":"/guides/quickstarts/restful-webservice","docId":"guides/quickstarts/restful-webservice"},{"type":"link","label":"GraphQL Web Service","href":"/guides/quickstarts/graphql-webservice","docId":"guides/quickstarts/graphql-webservice"}],"collapsible":true},{"type":"category","label":"Tutorial Guides","items":[{"type":"link","label":"Making a ZIO application configurable","href":"/guides/tutorials/configurable-zio-application","docId":"guides/tutorials/configurable-zio-application"},{"type":"link","label":"Encoding and Decoding JSON Data","href":"/guides/tutorials/encode-and-decode-json-data","docId":"guides/tutorials/encode-and-decode-json-data"},{"type":"link","label":"Enable Logging in a ZIO Application","href":"/guides/tutorials/enable-logging-in-a-zio-application","docId":"guides/tutorials/enable-logging-in-a-zio-application"},{"type":"link","label":"Create Custom Logger for a ZIO Application","href":"/guides/tutorials/create-custom-logger-for-a-zio-application","docId":"guides/tutorials/create-custom-logger-for-a-zio-application"},{"type":"link","label":"Running Our First ZIO Project With VSCode","href":"/guides/tutorials/run-our-first-zio-project-with-vscode","docId":"guides/tutorials/run-our-first-zio-project-with-vscode"},{"type":"link","label":"Running Our First ZIO Project With IntelliJ IDEA","href":"/guides/tutorials/run-our-first-zio-project-with-intellij-idea","docId":"guides/tutorials/run-our-first-zio-project-with-intellij-idea"},{"type":"link","label":"Deploying a ZIO Application Using Docker","href":"/guides/tutorials/deploy-a-zio-application-using-docker","docId":"guides/tutorials/deploy-a-zio-application-using-docker"},{"type":"link","label":"Producing/Consuming Data To/From Kafka Topics","href":"/guides/tutorials/producing-consuming-data-from-kafka-topics","docId":"guides/tutorials/producing-consuming-data-from-kafka-topics"},{"type":"link","label":"Monitoring a ZIO Application Using ZIO\'s Built-in Metric System","href":"/guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system","docId":"guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system"},{"type":"link","label":"Debugging a ZIO Application","href":"/guides/tutorials/debug-a-zio-application","docId":"guides/tutorials/debug-a-zio-application"},{"type":"link","label":"Building a RESTful Web Service","href":"/guides/tutorials/build-a-restful-webservice","docId":"guides/tutorials/build-a-restful-webservice"},{"type":"link","label":"Building a GraphQL Web Service","href":"/guides/tutorials/build-a-graphql-webservice","docId":"guides/tutorials/build-a-graphql-webservice"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Integration Guides","items":[{"type":"link","label":"Cats Effect","href":"/guides/interop/with-cats-effect","docId":"guides/interop/with-cats-effect"},{"type":"link","label":"Scala\'s Future","href":"/guides/interop/with-future","docId":"guides/interop/with-future"},{"type":"link","label":"Java","href":"/guides/interop/with-java","docId":"guides/interop/with-java"},{"type":"link","label":"JavaScript","href":"/guides/interop/with-javascript","docId":"guides/interop/with-javascript"},{"type":"link","label":"Monix","href":"/guides/interop/with-monix","docId":"guides/interop/with-monix"},{"type":"link","label":"Scalaz 7.x","href":"/guides/interop/with-scalaz-7x","docId":"guides/interop/with-scalaz-7x"},{"type":"link","label":"Reactive Streams","href":"/guides/interop/with-reactive-streams","docId":"guides/interop/with-reactive-streams"},{"type":"link","label":"Twitter\'s Future","href":"/guides/interop/with-twitter","docId":"guides/interop/with-twitter"},{"type":"link","label":"Guava","href":"/guides/interop/with-guava","docId":"guides/interop/with-guava"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Migration Guides","collapsed":false,"items":[{"type":"link","label":"ZIO 2.x Migration Guide","href":"/guides/migrate/zio-2.x-migration-guide","docId":"guides/migrate/zio-2.x-migration-guide"},{"type":"link","label":"Migration from Cats Effect","href":"/guides/migrate/from-cats-effect","docId":"guides/migrate/from-cats-effect"},{"type":"link","label":"Migration from Monix","href":"/guides/migrate/from-monix","docId":"guides/migrate/from-monix"}],"collapsible":true}],"resources-sidebar":[{"type":"link","label":"Summary","href":"/resources/","docId":"resources/index"},{"type":"category","label":"Learning","collapsed":false,"items":[{"type":"link","label":"Articles","href":"/resources/learning/articles","docId":"resources/learning/articles"},{"type":"link","label":"Videos","href":"/resources/learning/videos","docId":"resources/learning/videos"},{"type":"link","label":"Cookbooks","href":"/resources/learning/cookbooks","docId":"resources/learning/cookbooks"},{"type":"link","label":"Cheat Sheets","href":"/resources/learning/cheatsheets","docId":"resources/learning/cheatsheets"},{"type":"link","label":"Sample Projects","href":"/resources/learning/sampleprojects","docId":"resources/learning/sampleprojects"},{"type":"link","label":"Projects using ZIO","href":"/resources/learning/poweredbyzio","docId":"resources/learning/poweredbyzio"}],"collapsible":true},{"type":"category","label":"Ecosystem","collapsed":false,"items":[{"type":"category","label":"Official Libraries","items":[{"type":"link","label":"Introduction","href":"/resources/ecosystem/officials/","docId":"resources/ecosystem/officials/index"},{"type":"link","label":"ZIO Actors","href":"/resources/ecosystem/officials/zio-actors","docId":"resources/ecosystem/officials/zio-actors"},{"type":"link","label":"ZIO Akka Cluster","href":"/resources/ecosystem/officials/zio-akka-cluster","docId":"resources/ecosystem/officials/zio-akka-cluster"},{"type":"link","label":"ZIO AWS","href":"/resources/ecosystem/officials/zio-aws","docId":"resources/ecosystem/officials/zio-aws"},{"type":"link","label":"ZIO Cache","href":"/resources/ecosystem/officials/zio-cache","docId":"resources/ecosystem/officials/zio-cache"},{"type":"link","label":"ZIO Config","href":"/resources/ecosystem/officials/zio-config","docId":"resources/ecosystem/officials/zio-config"},{"type":"link","label":"ZIO FTP","href":"/resources/ecosystem/officials/zio-ftp","docId":"resources/ecosystem/officials/zio-ftp"},{"type":"link","label":"ZIO JSON","href":"/resources/ecosystem/officials/zio-json","docId":"resources/ecosystem/officials/zio-json"},{"type":"link","label":"ZIO Kafka","href":"/resources/ecosystem/officials/zio-kafka","docId":"resources/ecosystem/officials/zio-kafka"},{"type":"link","label":"ZIO Logging","href":"/resources/ecosystem/officials/zio-logging","docId":"resources/ecosystem/officials/zio-logging"},{"type":"link","label":"ZIO Metrics","href":"/resources/ecosystem/officials/zio-metrics","docId":"resources/ecosystem/officials/zio-metrics"},{"type":"link","label":"ZIO Mock","href":"/resources/ecosystem/officials/zio-mock","docId":"resources/ecosystem/officials/zio-mock"},{"type":"link","label":"ZIO NIO","href":"/resources/ecosystem/officials/zio-nio","docId":"resources/ecosystem/officials/zio-nio"},{"type":"link","label":"ZIO Optics","href":"/resources/ecosystem/officials/zio-optics","docId":"resources/ecosystem/officials/zio-optics"},{"type":"link","label":"ZIO Prelude","href":"/resources/ecosystem/officials/zio-prelude","docId":"resources/ecosystem/officials/zio-prelude"},{"type":"link","label":"ZIO Process","href":"/resources/ecosystem/officials/zio-process","docId":"resources/ecosystem/officials/zio-process"},{"type":"link","label":"ZIO Query","href":"/resources/ecosystem/officials/zio-query","docId":"resources/ecosystem/officials/zio-query"},{"type":"link","label":"ZIO Redis","href":"/resources/ecosystem/officials/zio-redis","docId":"resources/ecosystem/officials/zio-redis"},{"type":"link","label":"ZIO RocksDB","href":"/resources/ecosystem/officials/zio-rocksdb","docId":"resources/ecosystem/officials/zio-rocksdb"},{"type":"link","label":"ZIO S3","href":"/resources/ecosystem/officials/zio-s3","docId":"resources/ecosystem/officials/zio-s3"},{"type":"link","label":"ZIO Schema","href":"/resources/ecosystem/officials/zio-schema","docId":"resources/ecosystem/officials/zio-schema"},{"type":"link","label":"ZIO SQS","href":"/resources/ecosystem/officials/zio-sqs","docId":"resources/ecosystem/officials/zio-sqs"},{"type":"link","label":"ZIO Telemetry","href":"/resources/ecosystem/officials/zio-telemetry","docId":"resources/ecosystem/officials/zio-telemetry"},{"type":"link","label":"ZIO ZMX","href":"/resources/ecosystem/officials/zio-zmx","docId":"resources/ecosystem/officials/zio-zmx"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Community Libraries","items":[{"type":"link","label":"Introduction","href":"/resources/ecosystem/community/","docId":"resources/ecosystem/community/index"},{"type":"link","label":"Caliban","href":"/resources/ecosystem/community/caliban","docId":"resources/ecosystem/community/caliban"},{"type":"link","label":"Distage","href":"/resources/ecosystem/community/distage","docId":"resources/ecosystem/community/distage"},{"type":"link","label":"LogStage","href":"/resources/ecosystem/community/logstage","docId":"resources/ecosystem/community/logstage"},{"type":"link","label":"MUnit ZIO","href":"/resources/ecosystem/community/munit-zio","docId":"resources/ecosystem/community/munit-zio"},{"type":"link","label":"Quill","href":"/resources/ecosystem/community/quill","docId":"resources/ecosystem/community/quill"},{"type":"link","label":"Rezilience","href":"/resources/ecosystem/community/rezilience","docId":"resources/ecosystem/community/rezilience"},{"type":"link","label":"tamer","href":"/resources/ecosystem/community/tamer","docId":"resources/ecosystem/community/tamer"},{"type":"link","label":"TranzactIO","href":"/resources/ecosystem/community/tranzactio","docId":"resources/ecosystem/community/tranzactio"},{"type":"link","label":"ZIO AMQP","href":"/resources/ecosystem/community/zio-amqp","docId":"resources/ecosystem/community/zio-amqp"},{"type":"link","label":"ZIO Arrow","href":"/resources/ecosystem/community/zio-arrow","docId":"resources/ecosystem/community/zio-arrow"},{"type":"link","label":"ZIO AWS S3","href":"/resources/ecosystem/community/zio-aws-s3","docId":"resources/ecosystem/community/zio-aws-s3"},{"type":"link","label":"ZIO gRPC","href":"/resources/ecosystem/community/zio-grpc","docId":"resources/ecosystem/community/zio-grpc"},{"type":"link","label":"ZIO HTTP","href":"/resources/ecosystem/community/zio-http","docId":"resources/ecosystem/community/zio-http"},{"type":"link","label":"ZIO K8s","href":"/resources/ecosystem/community/zio-k8s","docId":"resources/ecosystem/community/zio-k8s"},{"type":"link","label":"ZIO Kinesis","href":"/resources/ecosystem/community/zio-kinesis","docId":"resources/ecosystem/community/zio-kinesis"},{"type":"link","label":"ZIO Pulsar","href":"/resources/ecosystem/community/zio-pulsar","docId":"resources/ecosystem/community/zio-pulsar"},{"type":"link","label":"ZIO Saga","href":"/resources/ecosystem/community/zio-saga","docId":"resources/ecosystem/community/zio-saga"},{"type":"link","label":"ZIO Slick Interop","href":"/resources/ecosystem/community/zio-slick-interop","docId":"resources/ecosystem/community/zio-slick-interop"},{"type":"link","label":"ZIO Test Akka HTTP","href":"/resources/ecosystem/community/zio-test-akka-http","docId":"resources/ecosystem/community/zio-test-akka-http"}],"collapsed":true,"collapsible":true},{"type":"link","label":"ZIO Compatible Libraries","href":"/resources/ecosystem/compatible","docId":"resources/ecosystem/compatible"},{"type":"link","label":"ZIO Tools","href":"/resources/ecosystem/tools","docId":"resources/ecosystem/tools"},{"type":"link","label":"Project Templates","href":"/resources/ecosystem/templates","docId":"resources/ecosystem/templates"}],"collapsible":true}],"about-sidebar":[{"type":"link","label":"About ZIO","href":"/about/","docId":"about/about_index"},{"type":"link","label":"FAQ","href":"/about/faq","docId":"about/faq"},{"type":"link","label":"ZIO Coding Guidelines","href":"/about/coding-guidelines","docId":"about/coding-guidelines"},{"type":"link","label":"ZIO Contributor Guidelines","href":"/about/contributing","docId":"about/contributing"},{"type":"link","label":"Contributing to The ZIO Documentation","href":"/about/contributing-to-documentation","docId":"about/contributing-to-documentation"},{"type":"link","label":"ZIO Code of Conduct","href":"/about/code-of-conduct","docId":"about/code-of-conduct"},{"type":"link","label":"ZIO Users","href":"/about/users","docId":"about/users"}]},"docs":{"about/about_index":{"id":"about/about_index","title":"About ZIO","description":"Type-safe, composable asynchronous and concurrent programming for Scala","sidebar":"about-sidebar"},"about/code-of-conduct":{"id":"about/code-of-conduct","title":"ZIO Code of Conduct","description":"We are committed to providing a friendly, safe and welcoming","sidebar":"about-sidebar"},"about/coding-guidelines":{"id":"about/coding-guidelines","title":"ZIO Coding Guidelines","description":"These are coding guidelines strictly for ZIO contributors for ZIO projects and","sidebar":"about-sidebar"},"about/contributing":{"id":"about/contributing","title":"ZIO Contributor Guidelines","description":"Thank you for your interest in contributing to ZIO, which is a small, zero-dependency library for doing type-safe, composable concurrent and asynchronous programming!","sidebar":"about-sidebar"},"about/contributing-to-documentation":{"id":"about/contributing-to-documentation","title":"Contributing to The ZIO Documentation","description":"The ZIO documentation is provided by a worldwide community, just like the project itself. So if you are reading this page, you can help us to improve the documentation.","sidebar":"about-sidebar"},"about/faq":{"id":"about/faq","title":"Frequently Answered Questions (FAQ)","description":"In this page we are going to answer general questions related to the ZIO project.","sidebar":"about-sidebar"},"about/users":{"id":"about/users","title":"ZIO Users","description":"Following is a partial list of companies happily using ZIO in production to craft concurrent applications.","sidebar":"about-sidebar"},"can_fail":{"id":"can_fail","title":"Compile Time Errors for Handling Combinators","description":"ZIO provides a variety of combinators to handle errors such as orElse, catchAll, catchSome, option, either, and retry. However, these combinators only make sense for effects that can fail (i.e. where the error type is not Nothing). To help you identify code that doesn\'t make sense, error handling combinators require implicit evidence CanFail[E], which is automatically available for all types except Nothing. The table below includes a list of combinators that only make sense for effects that can fail along with value preserving rewrites."},"getting_started":{"id":"getting_started","title":"Getting Started","description":"Include ZIO in your project by adding the following to your build.sbt file:"},"guides/index":{"id":"guides/index","title":"ZIO Guides","description":"Quickstart Guides","sidebar":"guides-sidebar"},"guides/interop/with-cats-effect":{"id":"guides/interop/with-cats-effect","title":"How to Interop with Cats Effect?","description":"Introduction","sidebar":"guides-sidebar"},"guides/interop/with-future":{"id":"guides/interop/with-future","title":"How to Interop with Future?","description":"Scala Future","sidebar":"guides-sidebar"},"guides/interop/with-guava":{"id":"guides/interop/with-guava","title":"How to Interop with Guava?","description":"interop-guava module provide capibility to convert Guava\'s com.google.common.util.concurrent.ListenableFuture into ZIO Task.","sidebar":"guides-sidebar"},"guides/interop/with-java":{"id":"guides/interop/with-java","title":"How to Interop with Java?","description":"ZIO has full interoperability with foreign Java code. Let me show you how it works and then BOOM, tomorrow you can show off your purely functional Java at work.","sidebar":"guides-sidebar"},"guides/interop/with-javascript":{"id":"guides/interop/with-javascript","title":"How to Interop with JavaScript?","description":"Include ZIO in your Scala.js project by adding the following to your build.sbt:","sidebar":"guides-sidebar"},"guides/interop/with-monix":{"id":"guides/interop/with-monix","title":"How to Interop with Monix?","description":"Checkout interop-monix module for inter-operation support.","sidebar":"guides-sidebar"},"guides/interop/with-reactive-streams":{"id":"guides/interop/with-reactive-streams","title":"How to Interop with Reactive Streams?","description":"Checkout the interop-reactive-streams module for inter-operation support.","sidebar":"guides-sidebar"},"guides/interop/with-scalaz-7x":{"id":"guides/interop/with-scalaz-7x","title":"How to Interop with Scalaz 7.x?","description":"ZIO Instances","sidebar":"guides-sidebar"},"guides/interop/with-twitter":{"id":"guides/interop/with-twitter","title":"How to Interop with Twitter?","description":"interop-twitter module provides capability to convert Twitter Future into ZIO Task.","sidebar":"guides-sidebar"},"guides/migrate/from-cats-effect":{"id":"guides/migrate/from-cats-effect","title":"How to Migrate from Cats Effect to ZIO?","description":"Cats IO[A] can be easily replaced with ZIO\'s Task[A] (an alias for ZIO[Any, Throwable, A]).","sidebar":"guides-sidebar"},"guides/migrate/from-monix":{"id":"guides/migrate/from-monix","title":"How to Migrate from Monix to ZIO?","description":"Monix\'s Task[A] can be easily replaced with ZIO\'s Task[A] (an alias for ZIO[Any, Throwable, A]).","sidebar":"guides-sidebar"},"guides/migrate/zio-2.x-migration-guide":{"id":"guides/migrate/zio-2.x-migration-guide","title":"ZIO 2.x Migration Guide","description":"In this guide we want to introduce the migration process to ZIO 2.x. So if you have a project written in ZIO 1.x and want to migrate that to ZIO 2.x, this article is for you.","sidebar":"guides-sidebar"},"guides/quickstarts/graphql-webservice":{"id":"guides/quickstarts/graphql-webservice","title":"ZIO Quickstart: Building GraphQL Web Service","description":"This quickstart shows how to build a GraphQL web service using ZIO. It uses","sidebar":"guides-sidebar"},"guides/quickstarts/hello-world":{"id":"guides/quickstarts/hello-world","title":"ZIO Quickstart: Hello World","description":"This is the simplest quickstart for a ZIO application. You can download and run it very quickly. This will give you an idea of how to write similar apps.","sidebar":"guides-sidebar"},"guides/quickstarts/restful-webservice":{"id":"guides/quickstarts/restful-webservice","title":"ZIO Quickstart: Building RESTful Web Service","description":"This quickstart shows how to build a RESTful web service using ZIO. It uses","sidebar":"guides-sidebar"},"guides/tutorials/build-a-graphql-webservice":{"id":"guides/tutorials/build-a-graphql-webservice","title":"Tutorial: How to Build a GraphQL Web Service","description":"Having GraphQL APIs enables the clients the ability to query the exact data they need. This powerful feature makes GraphQL more flexible than RESTful APIs.","sidebar":"guides-sidebar"},"guides/tutorials/build-a-restful-webservice":{"id":"guides/tutorials/build-a-restful-webservice","title":"Tutorial: How to Build a RESTful Web Service","description":"ZIO provides good support for building RESTful web services. Using Service Pattern, we can build web services that are modular and easy to test and maintain. On the other hand, we have several powerful official and community libraries that can help us to work with JSON data types, and databases and also work with HTTP protocol.","sidebar":"guides-sidebar"},"guides/tutorials/configurable-zio-application":{"id":"guides/tutorials/configurable-zio-application","title":"Tutorial: How to Make a ZIO Application Configurable?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/create-custom-logger-for-a-zio-application":{"id":"guides/tutorials/create-custom-logger-for-a-zio-application","title":"Tutorial: How to Create a Custom Logger for a ZIO Application?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/debug-a-zio-application":{"id":"guides/tutorials/debug-a-zio-application","title":"Tutorial: How to Debug a ZIO Application?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/deploy-a-zio-application-using-docker":{"id":"guides/tutorials/deploy-a-zio-application-using-docker","title":"Tutorial: How to Deploy a ZIO Application Using Docker?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/enable-logging-in-a-zio-application":{"id":"guides/tutorials/enable-logging-in-a-zio-application","title":"Tutorial: How to Enable Logging in a ZIO Application","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/encode-and-decode-json-data":{"id":"guides/tutorials/encode-and-decode-json-data","title":"Tutorial: How to Encode and Decode JSON Data?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system":{"id":"guides/tutorials/monitor-a-zio-application-using-zio-built-in-metric-system","title":"Tutorial: How to Monitor a ZIO Application Using ZIO\'s Built-in Metric System?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/producing-consuming-data-from-kafka-topics":{"id":"guides/tutorials/producing-consuming-data-from-kafka-topics","title":"Tutorial: How to Produce/Consume Data To/From Kafka Topics?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/run-our-first-zio-project-with-intellij-idea":{"id":"guides/tutorials/run-our-first-zio-project-with-intellij-idea","title":"Tutorial: How to Run Our First ZIO Project With IntelliJ IDEA?","description":"Introduction","sidebar":"guides-sidebar"},"guides/tutorials/run-our-first-zio-project-with-vscode":{"id":"guides/tutorials/run-our-first-zio-project-with-vscode","title":"Tutorial: How to Run Our First ZIO Project With VSCode?","description":"ZIO is a type-safe library for building asynchronous and concurrent applications. The Scala compiler can catch a lot of errors at compile time since it is type-safe. This ensures that our code is mostly correct, and it prevents lots of bugs from creeping into the runtime. So having a type-safe editor that highlights errors will improve our development experience. VSCode with the power of the Metals extension provides us with a type-safe editor for writing Scala programs.","sidebar":"guides-sidebar"},"overview/overview_basic_concurrency":{"id":"overview/overview_basic_concurrency","title":"Basic Concurrency","description":"ZIO is a highly concurrent framework, powered by fibers, which are lightweight virtual threads that achieve massive scalability compared to threads, augmented with resource-safe cancellation, which powers many features in ZIO.","sidebar":"overview_sidebar"},"overview/overview_basic_operations":{"id":"overview/overview_basic_operations","title":"Basic Operations","description":"Like the String data type, as well as the collection data types in Scala (such as List, Map, and Set), ZIO effects are immutable, and cannot be changed.","sidebar":"overview_sidebar"},"overview/overview_creating_effects":{"id":"overview/overview_creating_effects","title":"Creating Effects","description":"This section explores some of the common ways to create ZIO effects from values, from computations, and from common Scala data types.","sidebar":"overview_sidebar"},"overview/overview_handling_errors":{"id":"overview/overview_handling_errors","title":"Handling Errors","description":"ZIO effects may fail due to foreseen or unforeseen problems. In order to help you build robust applications, ZIO tracks foreseen errors at compile-time, letting you know which effects can fail, and how they can fail. For non-recoverable problems, ZIO gives you full insight into the cause of failures (even if unexpected or catastrophic), preserving all information and automatically logging unhandled errors.","sidebar":"overview_sidebar"},"overview/overview_handling_resources":{"id":"overview/overview_handling_resources","title":"Handling Resources","description":"Ensuring that your applications never leak resources is one of the keys to maximizing application throughput, minimizing latency, and maximizing per-node uptime.","sidebar":"overview_sidebar"},"overview/overview_index":{"id":"overview/overview_index","title":"Summary","description":"ZIO is a next-generation framework for building cloud-native applications on the JVM. With a beginner-friendly yet powerful functional core, ZIO lets developers quickly build best-practice applications that are highly scalable, testable, robust, resilient, resource-safe, efficient, and observable.","sidebar":"overview_sidebar"},"overview/overview_performance":{"id":"overview/overview_performance","title":"Performance","description":"ZIO is a high-performance framework that is powered by non-blocking fibers (virtual threads under Loom).","sidebar":"overview_sidebar"},"overview/overview_platforms":{"id":"overview/overview_platforms","title":"Platforms","description":"ZIO provides a consistent interface across platforms to the maximum extent possible, allowing developers to write code once and deploy it everywhere. However, there are some unavoidable differences between platforms to be aware of.","sidebar":"overview_sidebar"},"overview/overview_running_effects":{"id":"overview/overview_running_effects","title":"Running Effects","description":"ZIO effects are precise plans that describe a computation or interaction. Ultimately, every effect must be executed by the ZIO runtime.","sidebar":"overview_sidebar"},"reference/concurrency/hub":{"id":"reference/concurrency/hub","title":"Hub","description":"A Hub is an asynchronous message hub. Publishers can publish messages to the hub and subscribers can subscribe to receive messagesfrom the hub.","sidebar":"reference-sidebar"},"reference/concurrency/index":{"id":"reference/concurrency/index","title":"Introduction","description":"Overview","sidebar":"reference-sidebar"},"reference/concurrency/promise":{"id":"reference/concurrency/promise","title":"Promise","description":"A Promise[E, A] is a variable of IO[E, A] type that can be set exactly once.","sidebar":"reference-sidebar"},"reference/concurrency/queue":{"id":"reference/concurrency/queue","title":"Queue","description":"Queue is a lightweight in-memory queue built on ZIO with composable and transparent back-pressure. It is fully asynchronous (no locks or blocking), purely-functional and type-safe.","sidebar":"reference-sidebar"},"reference/concurrency/ref":{"id":"reference/concurrency/ref","title":"Ref","description":"Ref[A] models a mutable reference to a value of type A in which we can store immutable data. The two basic operations are set, which fills the Ref with a new value, and get, which retrieves its current content.","sidebar":"reference-sidebar"},"reference/concurrency/refsynchronized":{"id":"reference/concurrency/refsynchronized","title":"Ref.Synchronized","description":"Ref.Synchronized[A] models a mutable reference to a value of type A in which we can store immutable data, and update it atomically and effectfully.","sidebar":"reference-sidebar"},"reference/concurrency/semaphore":{"id":"reference/concurrency/semaphore","title":"Semaphore","description":"A Semaphore datatype which allows synchronization between fibers with the withPermit operation, which safely acquires and releases a permit.","sidebar":"reference-sidebar"},"reference/contextual/index":{"id":"reference/contextual/index","title":"Introduction to the ZIO\'s Contextual Data Types","description":"ZIO provides a contextual abstraction that encodes the environment of the running effect. This means, every effect can work within a specific context, called an environment.","sidebar":"reference-sidebar"},"reference/contextual/layer":{"id":"reference/contextual/layer","title":"Layer","description":"Layer[+E, +ROut] is a type alias for ZLayer[Any, E, ROut], which represents a layer that doesn\'t require any services, it may fail with an error type of E, and returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/rlayer":{"id":"reference/contextual/rlayer","title":"RLayer","description":"RLayer[-RIn, +ROut] is a type alias for ZLayer[RIn, Throwable, ROut], which represents a layer that requires RIn as its input, it may fail with Throwable value, or returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/tasklayer":{"id":"reference/contextual/tasklayer","title":"TaskLayer","description":"TaskLayer[+ROut] is a type alias for ZLayer[Any, Throwable, ROut], which represents a layer that doesn\'t require any services as its input, it may fail with Throwable value, and returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/ulayer":{"id":"reference/contextual/ulayer","title":"ULayer","description":"ULayer[+ROut] is a type alias for ZLayer[Any, Nothing, ROut], which represents a layer that doesn\'t require any services as its input, it can\'t fail, and returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/urlayer":{"id":"reference/contextual/urlayer","title":"URLayer","description":"URLayer[-RIn, +ROut] is a type alias for ZLayer[RIn, Nothing, ROut], which represents a layer that requires RIn as its input, it can\'t fail, and returns ROut as its output.","sidebar":"reference-sidebar"},"reference/contextual/zenvironment":{"id":"reference/contextual/zenvironment","title":"ZEnvironment","description":"A ZEnvironment[R] is a built-in type-level map for the ZIO data type which is responsible for maintaining the environment of a ZIO effect. The ZIO data type uses this map to maintain all the environmental services and their implementations.","sidebar":"reference-sidebar"},"reference/contextual/zlayer":{"id":"reference/contextual/zlayer","title":"ZLayer","description":"A ZLayer[-RIn, +E, +ROut] describes a layer of an application: every layer in an application requires some services as input RIn and produces some services as the output ROut.","sidebar":"reference-sidebar"},"reference/core/cause":{"id":"reference/core/cause","title":"Cause","description":"The ZIO[R, E, A] effect is polymorphic in values of type E and we can work with any error type that we want, but there is a lot of information that is not inside an arbitrary E value. So as a result ZIO needs somewhere to store things like unexpected error or defects, stack and execution traces, cause of fiber interruptions, and so forth.","sidebar":"reference-sidebar"},"reference/core/exit":{"id":"reference/core/exit","title":"Exit","description":"An Exit[E, A] value describes how fibers end life. It has two possible values:","sidebar":"reference-sidebar"},"reference/core/index":{"id":"reference/core/index","title":"Core Data Types","description":"In this section we are going to talk about the basic data types that are required to build a ZIO application:"},"reference/core/runtime":{"id":"reference/core/runtime","title":"Runtime","description":"A Runtime[R] is capable of executing tasks within an environment R.","sidebar":"reference-sidebar"},"reference/core/zio/io":{"id":"reference/core/zio/io","title":"IO","description":"IO[E, A] is a type alias for ZIO[Any, E, A], which represents an effect that has no requirements, and may fail with an E, or succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/rio":{"id":"reference/core/zio/rio","title":"RIO","description":"RIO[R, A] is a type alias for ZIO[R, Throwable, A], which represents an effect that requires an R, and may fail with a Throwable value, or succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/task":{"id":"reference/core/zio/task","title":"Task","description":"Task[A] is a type alias for ZIO[Any, Throwable, A], which represents an effect that has no requirements, and may fail with a Throwable value, or succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/uio":{"id":"reference/core/zio/uio","title":"UIO","description":"UIO[A] is a type alias for ZIO[Any, Nothing, A], which represents an Unexceptional effect that doesn\'t require any specific environment, and cannot fail, but can succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/urio":{"id":"reference/core/zio/urio","title":"URIO","description":"URIO[R, A] is a type alias for ZIO[R, Nothing, A], which represents an effect that requires an R, and cannot fail, but can succeed with an A.","sidebar":"reference-sidebar"},"reference/core/zio/zio":{"id":"reference/core/zio/zio","title":"ZIO","description":"A ZIO[R, E, A] value is an immutable value that lazily describes a workflow or job. The workflow requires some environment R, and may fail with an error of type E, or succeed with a value of type A.","sidebar":"reference-sidebar"},"reference/core/zioapp":{"id":"reference/core/zioapp","title":"ZIOApp","description":"The ZIOApp trait is an entry point for a ZIO application that allows sharing layers between applications. It also","sidebar":"reference-sidebar"},"reference/error-management/best-practices/algebraic-data-types":{"id":"reference/error-management/best-practices/algebraic-data-types","title":"Model Domain Errors Using Algebraic Data Types","description":"It is best to use algebraic data types (ADTs) when modeling errors within the same domain or subdomain.","sidebar":"reference-sidebar"},"reference/error-management/best-practices/logging-errors":{"id":"reference/error-management/best-practices/logging-errors","title":"Don\'t Reflexively Log Errors","description":"In modern async concurrent applications with a lot of subsystems, if we do not type errors, we are not able to see what section of our code fails with what error. Therefore, this can be very tempting to log errors when they happen. So when we lose type-safety in the whole application it makes us be more sensitive and program defensively. Therefore, whenever we are calling an API we tend to catch its errors, log them as below:","sidebar":"reference-sidebar"},"reference/error-management/best-practices/unexpected-errors":{"id":"reference/error-management/best-practices/unexpected-errors","title":"Don\'t Type Unexpected Errors","description":"When we first discover typed errors, it may be tempting to put every error into the error type parameter. That is a mistake because we can\'t recover from all types of errors. When we encounter unexpected errors we can\'t do anything in those cases. We should let the application die. Let it crash is the erlang philosophy. It is a good philosophy for all unexpected errors. At best, we can sandbox it, but we should let it crash.","sidebar":"reference-sidebar"},"reference/error-management/best-practices/union-types":{"id":"reference/error-management/best-practices/union-types","title":"Use Union Types to Be More Specific About Error Types","description":"In Scala 3, we have an exciting new feature called union types. By using the union operator, we can encode multiple error types. Using this facility, we can have more precise information on typed errors.","sidebar":"reference-sidebar"},"reference/error-management/error-accumulation":{"id":"reference/error-management/error-accumulation","title":"Error Accumulation","description":"Sequential combinators such as ZIO#zip and ZIO.foreach stop when they reach the first error and return immediately. So their policy on error management is to fail fast.","sidebar":"reference-sidebar"},"reference/error-management/examples":{"id":"reference/error-management/examples","title":"Examples","description":"Let\'s write an application that takes numerator and denominator from the user and then print the result back to the user:","sidebar":"reference-sidebar"},"reference/error-management/exceptional-and-unexceptional-effects":{"id":"reference/error-management/exceptional-and-unexceptional-effects","title":"Exceptional and Unexceptional Effects","description":"Besides the IO type alias, ZIO has four different type aliases which can be categorized into two different categories:","sidebar":"reference-sidebar"},"reference/error-management/expected-and-unexpected-errors":{"id":"reference/error-management/expected-and-unexpected-errors","title":"Expected and Unexpected Errors","description":"Inside an application, there are two distinct categories of errors:","sidebar":"reference-sidebar"},"reference/error-management/imperative-vs-declarative":{"id":"reference/error-management/imperative-vs-declarative","title":"Imperative vs. Declarative Error Handling","description":"To figure out the benefit of typed errors in declarative error handling, we need to understand the drawbacks of the imperative approach and then see how the declarative approach can be used to solve the same problem.","sidebar":"reference-sidebar"},"reference/error-management/index":{"id":"reference/error-management/index","title":"Error Management","description":"As well as providing first-class support for typed errors, ZIO has a variety of facilities for catching, propagating, and transforming errors in a typesafe manner. In this section, we will learn about different types of errors in ZIO and how we can manage them.","sidebar":"reference-sidebar"},"reference/error-management/operations/chaining-effects-based-on-errors":{"id":"reference/error-management/operations/chaining-effects-based-on-errors","title":"Chaining Effects Based on Errors","description":"Unlike ZIO#flatMap the ZIO#flatMapError combinator chains two effects, where the second effect is dependent on the error channel of the first effect:","sidebar":"reference-sidebar"},"reference/error-management/operations/converting-defects-to-failures":{"id":"reference/error-management/operations/converting-defects-to-failures","title":"Converting Defects to Failures","description":"Both ZIO#resurrect and ZIO#absorb are symmetrical opposite of the ZIO#orDie operator. The ZIO#orDie takes failures from the error channel and converts them into defects, whereas the ZIO#absorb and ZIO#resurrect take defects and convert them into failures:","sidebar":"reference-sidebar"},"reference/error-management/operations/error-refinement":{"id":"reference/error-management/operations/error-refinement","title":"Error Refinement","description":"ZIO has some operators useful for converting defects into failures. So we can take part in non-recoverable errors and convert them into the typed error channel and vice versa.","sidebar":"reference-sidebar"},"reference/error-management/operations/exposing-errors-in-the-success-channel":{"id":"reference/error-management/operations/exposing-errors-in-the-success-channel","title":"Exposing Errors in The Success Channel","description":"Before taking into ZIO#either and ZIO#absolve, let\'s see their signature:","sidebar":"reference-sidebar"},"reference/error-management/operations/exposing-the-cause-in-the-success-channel":{"id":"reference/error-management/operations/exposing-the-cause-in-the-success-channel","title":"Exposing the Cause in The Success Channel","description":"Using the ZIO#cause operation we can expose the cause, and then by using ZIO#uncause we can reverse this operation:","sidebar":"reference-sidebar"},"reference/error-management/operations/filtering-the-success-channel":{"id":"reference/error-management/operations/filtering-the-success-channel","title":"Filtering the Success Channel","description":"ZIO has a variety of operators that can filter values on the success channel based on a given predicate, and if the predicate fails, we can use different strategies:","sidebar":"reference-sidebar"},"reference/error-management/operations/flattening-optional-error-types":{"id":"reference/error-management/operations/flattening-optional-error-types","title":"Flattening Optional Error Types","description":"If we have an optional error of type E in the error channel, we can flatten it to the E type using the ZIO#flattenErrorOption operator:","sidebar":"reference-sidebar"},"reference/error-management/operations/flipping-error-and-success-channels":{"id":"reference/error-management/operations/flipping-error-and-success-channels","title":"Flipping Error and Success Channels","description":"Sometimes, we would like to apply some methods on the error channel which are specific for the success channel, or we want to apply some methods on the success channel which are specific for the error channel. Therefore, we can flip the error and success channel and before flipping back, we can perform the right operator on flipped channels:","sidebar":"reference-sidebar"},"reference/error-management/operations/map-operations":{"id":"reference/error-management/operations/map-operations","title":"Map Operations","description":"Other than ZIO#map and ZIO#flatMap, ZIO has several other operators to manage errors while mapping:","sidebar":"reference-sidebar"},"reference/error-management/operations/merging-the-error-channel-into-the-success-channel":{"id":"reference/error-management/operations/merging-the-error-channel-into-the-success-channel","title":"Merging the Error Channel into the Success Channel","description":"With ZIO#merge we can merge the error channel into the success channel:","sidebar":"reference-sidebar"},"reference/error-management/operations/rejecting-some-success-values":{"id":"reference/error-management/operations/rejecting-some-success-values","title":"Rejecting Some Success Values","description":"We can reject some success values using the ZIO#reject operator:","sidebar":"reference-sidebar"},"reference/error-management/operations/tapping-errors":{"id":"reference/error-management/operations/tapping-errors","title":"Tapping Errors","description":"Like tapping for success values ZIO has several operators for tapping error values. So we can peek into failures or underlying defects or causes:","sidebar":"reference-sidebar"},"reference/error-management/operations/zooming-in-on-nested-values":{"id":"reference/error-management/operations/zooming-in-on-nested-values","title":"Zooming In on Nested Values","description":"Option","sidebar":"reference-sidebar"},"reference/error-management/recovering/catching":{"id":"reference/error-management/recovering/catching","title":"Catching","description":"Catching Failures","sidebar":"reference-sidebar"},"reference/error-management/recovering/fallback":{"id":"reference/error-management/recovering/fallback","title":"Fallback","description":"ZIOorElse","sidebar":"reference-sidebar"},"reference/error-management/recovering/folding":{"id":"reference/error-management/recovering/folding","title":"Folding","description":"Scala\'s Option and Either data types have fold, which let us handle both failure and success at the same time. In a similar fashion, ZIO effects also have several methods that allow us to handle both failure and success.","sidebar":"reference-sidebar"},"reference/error-management/recovering/retrying":{"id":"reference/error-management/recovering/retrying","title":"Retrying","description":"When we are building applications we want to be resilient in the face of a transient failure. This is where we need to retry to overcome these failures.","sidebar":"reference-sidebar"},"reference/error-management/recovering/sandboxing":{"id":"reference/error-management/recovering/sandboxing","title":"Sandboxing","description":"We know that a ZIO effect may fail due to a failure, a defect, a fiber interruption, or a combination of these causes. So a ZIO effect may contain more than one cause. Using the ZIO#sandbox operator, we can sandbox all errors of a ZIO application, whether the cause is a failure, defect, or a fiber interruption or combination of these. This operator exposes the full cause of a ZIO effect into the error channel:","sidebar":"reference-sidebar"},"reference/error-management/recovering/timing-out":{"id":"reference/error-management/recovering/timing-out","title":"Timing out","description":"ZIOtimeout","sidebar":"reference-sidebar"},"reference/error-management/sequential-and-parallel-errors":{"id":"reference/error-management/sequential-and-parallel-errors","title":"Sequential and Parallel Errors","description":"A simple and regular ZIO application usually fails with one error, which is the first error encountered by the ZIO runtime:","sidebar":"reference-sidebar"},"reference/error-management/typed-errors-guarantees":{"id":"reference/error-management/typed-errors-guarantees","title":"Typed Errors Guarantees","description":"Typed errors don\'t guarantee the absence of defects and interruptions. Having an effect of type ZIO[R, E, A], means it can fail because of some failure of type E, but it doesn\'t mean it can\'t die or be interrupted. So the error channel is only for failure errors.","sidebar":"reference-sidebar"},"reference/error-management/types/defects":{"id":"reference/error-management/types/defects","title":"Defects","description":"By providing a Throwable value to the ZIO.die constructor, we can describe a dying effect:","sidebar":"reference-sidebar"},"reference/error-management/types/failures":{"id":"reference/error-management/types/failures","title":"Failures","description":"When writing ZIO application, we can model a failure, using the ZIO.fail constructor:","sidebar":"reference-sidebar"},"reference/error-management/types/fatals":{"id":"reference/error-management/types/fatals","title":"Fatal Errors","description":"In ZIO on the JVM platform, the VirtualMachineError and all its subtypes are the only errors considered fatal by the ZIO runtime. So if during the running application, the JVM throws any of these errors like StackOverflowError, the ZIO runtime considers it as a catastrophic fatal error. So it will interrupt the whole application immediately without safe resource interruption. None of the ZIO#catchAll and ZIO#catchAllDefects can catch these fatal errors. At most, if we set the Runtime.setReportFatal, the application will log the stack trace before interrupting the entire application.","sidebar":"reference-sidebar"},"reference/error-management/types/index":{"id":"reference/error-management/types/index","title":"Three Types of Errors","description":"We should consider three types of errors when writing ZIO applications:","sidebar":"reference-sidebar"},"reference/fiber/fiber":{"id":"reference/fiber/fiber","title":"Fiber","description":"To perform an effect without blocking the current process, we can use fibers, which are a lightweight concurrency mechanism.","sidebar":"reference-sidebar"},"reference/fiber/fiberid":{"id":"reference/fiber/fiberid","title":"FiberId","description":"FiberId is the identity of a Fiber, described by a globally unique sequence number and the time when it began life:","sidebar":"reference-sidebar"},"reference/fiber/fiberstatus":{"id":"reference/fiber/fiberstatus","title":"Fiber.Status","description":"Fiber.Status describes the current status of a Fiber.","sidebar":"reference-sidebar"},"reference/fiber/index":{"id":"reference/fiber/index","title":"Introduction","description":"A Fiber can be thought of as a virtual thread. A Fiber is the analog of a Java thread (java.lang.Thread), but it performs much better. Fibers are implemented in such a fashion that a single JVM thread will execute many fibers. We can think of fibers as unbounded JVM threads.","sidebar":"reference-sidebar"},"reference/index":{"id":"reference/index","title":"Introduction","description":"ZIO contains a few data types that can help you solve complex problems in asynchronous and concurrent programming. ZIO data types categorize into these sections:","sidebar":"reference-sidebar"},"reference/metrics/counter":{"id":"reference/metrics/counter","title":"Counter","description":"A Counter is a metric representing a single numerical value that may be incremented over time. A typical use of this metric would be to track the number of a certain type of request received.","sidebar":"reference-sidebar"},"reference/metrics/gauge":{"id":"reference/metrics/gauge","title":"Gauge","description":"A Gauge is a metric representing a single numerical value that may be set or adjusted. A typical use of this metric would be to track the current memory usage.","sidebar":"reference-sidebar"},"reference/metrics/histogram":{"id":"reference/metrics/histogram","title":"Histogram","description":"A Histogram is a metric representing a collection of numerical with the distribution of the cumulative values over time. A typical use of this metric would be to track the time to serve requests.","sidebar":"reference-sidebar"},"reference/metrics/index":{"id":"reference/metrics/index","title":"Introduction","description":"In highly concurrent applications, things are interconnected, so maintaining such setup to run smoothly and without application downtimes is very challenging.","sidebar":"reference-sidebar"},"reference/metrics/jvm":{"id":"reference/metrics/jvm","title":"JVM Metrics","description":"ZIO has built-in support for collecting JVM Metrics. These metrics are a direct port of the JVM metrics provided by the Prometheus Java Hotspot library and compatible with that library.","sidebar":"reference-sidebar"},"reference/metrics/metriclabel":{"id":"reference/metrics/metriclabel","title":"MetricLabel","description":"A MetricLabel metadata represents a key-value pair that allows analyzing metrics at an additional level of granularity. For example, if a metric tracks the response time of a service, labels could be used to create separate versions that track response times for different clients.","sidebar":"reference-sidebar"},"reference/metrics/setcount":{"id":"reference/metrics/setcount","title":"Frequency","description":"A Frequency represents the number of occurrences of specified values. We can think of a Frequency as a set of counters associated with each value except that new counters will automatically be created when new values are observed.","sidebar":"reference-sidebar"},"reference/metrics/summary":{"id":"reference/metrics/summary","title":"Summary","description":"A Summary represents a sliding window of a time series along with metrics for certain percentiles of the time series, referred to as quantiles.","sidebar":"reference-sidebar"},"reference/misc/chunk":{"id":"reference/misc/chunk","title":"Chunk","description":"A Chunk[A] represents a chunk of values of type A. Chunks are usually backed by arrays, but expose a purely functional, safe interface to the underlying elements, and they become lazy on operations that would be costly with arrays, such as repeated concatenation.","sidebar":"reference-sidebar"},"reference/misc/supervisor":{"id":"reference/misc/supervisor","title":"Supervisor","description":"A Supervisor[A] is allowed to supervise the launching and termination of fibers, producing some visible value of type A from the supervision.","sidebar":"reference-sidebar"},"reference/resource/index":{"id":"reference/resource/index","title":"Introduction","description":"When we are writing a long-lived application, resource management is very important. Proper resource management is vital to any large-scale application. We need to make sure that our application is resource-safe, and it doesn\'t leak any resource.","sidebar":"reference-sidebar"},"reference/resource/scope":{"id":"reference/resource/scope","title":"Scope","description":"The Scope data type is the foundation of safe and composable resources handling in ZIO.","sidebar":"reference-sidebar"},"reference/resource/zpool":{"id":"reference/resource/zpool","title":"ZPool","description":"A ZPool[E, A] is a pool of items of type A, each of which may be associated with the acquisition and release of resources. An attempt to get an item A from a pool may fail with an error of type E.","sidebar":"reference-sidebar"},"reference/schedule/built-in-schedules":{"id":"reference/schedule/built-in-schedules","title":"Built-in Schedules","description":"succeed","sidebar":"reference-sidebar"},"reference/schedule/combinators":{"id":"reference/schedule/combinators","title":"Schedule Combinators","description":"Schedules define stateful, possibly effectful, recurring schedules of events, and compose in a variety of ways. Combinators allow us to take schedules and combine them together to get other schedules and if we have combinators with just the right properties. Then in theory we should be able to solve an infinite number of problems, with only a few combinators and few base schedules.","sidebar":"reference-sidebar"},"reference/schedule/examples":{"id":"reference/schedule/examples","title":"Examples","description":"Let\'s try some example of creating and combining schedules.","sidebar":"reference-sidebar"},"reference/schedule/index":{"id":"reference/schedule/index","title":"Scheduling ZIO Effects","description":"A Schedule[Env, In, Out] is an immutable value that describes a recurring effectful schedule, which runs in some environment Env, after consuming values of type In (errors in the case of retry, or values in the case of repeat) produces values of type Out, and in every step based on input values and the internal state decides to halt or continue after some delay d.","sidebar":"reference-sidebar"},"reference/schedule/repetition":{"id":"reference/schedule/repetition","title":"Repetition","description":"In the case of repetition, ZIO has a ZIO#repeat function, which takes a schedule as a repetition policy and returns another effect that describes an effect with repetition strategy according to that policy.","sidebar":"reference-sidebar"},"reference/schedule/retrying":{"id":"reference/schedule/retrying","title":"Retrying","description":"In the case of retrying, ZIO has a ZIO#retry function, which takes a schedule as a repetition policy and returns another effect that describes an effect with repetition strategy which will retry following the failure of the original effect.","sidebar":"reference-sidebar"},"reference/service-pattern/defining-polymorphic-services-in-zio":{"id":"reference/service-pattern/defining-polymorphic-services-in-zio","title":"Defining Polymorphic Services in ZIO","description":"As we discussed here, the ZEnvironment, which is the underlying data type used by ZLayer, is backed by a type-level mapping from types of services to implementations of those services. This functionality is backed by izumi.reflect.Tag, which captures a type as a value.","sidebar":"reference-sidebar"},"reference/service-pattern/generating-accessor-methods-using-macros":{"id":"reference/service-pattern/generating-accessor-methods-using-macros","title":"Generating Accessor Methods Using Macros","description":"Writing accessor methods is a repetitive task and would be cumbersome in services with many methods. We can automate the generation of accessor methods using zio-macro module.","sidebar":"reference-sidebar"},"reference/service-pattern/introduction":{"id":"reference/service-pattern/introduction","title":"Introduction to Writing ZIO Services","description":"Defining services in ZIO is not very different from object-oriented style, it has the same principle: coding to an interface, not an implementation. Therefore, ZIO encourages us to implement this principle by using Service Pattern, which is quite similar to the object-oriented style.","sidebar":"reference-sidebar"},"reference/service-pattern/service-pattern":{"id":"reference/service-pattern/service-pattern","title":"The Five Elements of Service Pattern","description":"Writing services in ZIO using the Service Pattern is very similar to the object-oriented way of defining services. We use scala traits to define services, classes to implement services, and constructors to define service dependencies. Finally, we lift the class constructor into the ZLayer.","sidebar":"reference-sidebar"},"reference/service-pattern/the-three-laws-of-zio-environment":{"id":"reference/service-pattern/the-three-laws-of-zio-environment","title":"The Three Laws of ZIO Environment","description":"When we are working with the ZIO environment, one question might arise: \\"When should we use environment and when do we need to use constructors?\\".","sidebar":"reference-sidebar"},"reference/services/clock":{"id":"reference/services/clock","title":"Clock","description":"Clock service contains some functionality related to time and scheduling.","sidebar":"reference-sidebar"},"reference/services/console":{"id":"reference/services/console","title":"Console","description":"The Console service contains simple I/O operations for reading/writing strings from/to the standard input, output, and error console.","sidebar":"reference-sidebar"},"reference/services/index":{"id":"reference/services/index","title":"Introduction","description":"ZIO already provides four built-in services:","sidebar":"reference-sidebar"},"reference/services/random":{"id":"reference/services/random","title":"Random","description":"Random service provides utilities to generate random numbers. It\'s a functional wrapper of scala.util.Random. This service contains various different pseudo-random generators like nextInt, nextBoolean and nextDouble. Each random number generator functions return a URIO[Random, T] value.","sidebar":"reference-sidebar"},"reference/services/system":{"id":"reference/services/system","title":"System","description":"System service contains several useful functions related to system environments and properties. Both of system environments and system properties are key/value pairs. They are used to pass user-defined information to our application.","sidebar":"reference-sidebar"},"reference/state/concurrent":{"id":"reference/state/concurrent","title":"Concurrent State Management","description":"In concurrent programming, we can categorize state management into two general approaches:","sidebar":"reference-sidebar"},"reference/state/fiber-local-state":{"id":"reference/state/fiber-local-state","title":"Fiber-local State","description":"Both the FiberRef and ZState data types are state management tools that are scoped to a certain fiber. Their values are only accessible within the fiber that runs them.","sidebar":"reference-sidebar"},"reference/state/fiberref":{"id":"reference/state/fiberref","title":"FiberRef","description":"FiberRef[A] models a mutable reference to a value of type A. The two basic operations are set, which sets the reference to a new value, and get, which retrieves the current value of the reference.","sidebar":"reference-sidebar"},"reference/state/global-shared-state":{"id":"reference/state/global-shared-state","title":"Global Shared State","description":"Ref","sidebar":"reference-sidebar"},"reference/state/index":{"id":"reference/state/index","title":"Introduction","description":"When we write a program, more often we need to keep track of some sort of state during the execution of the program. If an object has a state, its behavior is influenced by passing the time.","sidebar":"reference-sidebar"},"reference/state/sequential":{"id":"reference/state/sequential","title":"Sequential State Management","description":"This is a very common pattern to use variables to keep track of the state. For example, to calculate the length of a list, we can store intermediate results inside the count variable:","sidebar":"reference-sidebar"},"reference/state/zstate":{"id":"reference/state/zstate","title":"ZState","description":"ZStateS] models a value of type S that can be read from and written to during the execution of an effect. This is a higher-level construct built on top of [FiberRef and the environment type to support using ZIO where we might have traditionally used state monad transformers.","sidebar":"reference-sidebar"},"reference/stm/index":{"id":"reference/stm/index","title":"Introduction","description":"Overview","sidebar":"reference-sidebar"},"reference/stm/stm":{"id":"reference/stm/stm","title":"STM","description":"An STM[E, A] represents an effect that can be performed transactionally resulting in a failure E or a success A. There is a more powerful variant ZSTM[R, E, A] which supports an environment type R like ZIO[R, E, A].","sidebar":"reference-sidebar"},"reference/stm/tarray":{"id":"reference/stm/tarray","title":"TArray","description":"TArray is an array of mutable references that can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stm/thub":{"id":"reference/stm/thub","title":"THub","description":"A THub is a transactional message hub. Publishers can publish messages to the hub and subscribers can subscribe to take messages from the hub.","sidebar":"reference-sidebar"},"reference/stm/tmap":{"id":"reference/stm/tmap","title":"TMap","description":"A TMap[A] is a mutable map that can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stm/tpriorityqueue":{"id":"reference/stm/tpriorityqueue","title":"TPriorityQueue","description":"A TPriorityQueue[A] is a mutable queue that can participate in STM transactions. A TPriorityQueue contains values of type A for which an Ordering is defined. Unlike a TQueue, take returns the highest priority value (the value that is first in the specified ordering) as opposed to the first value offered to the queue. The ordering of elements sharing the same priority when taken from the queue is not guaranteed.","sidebar":"reference-sidebar"},"reference/stm/tpromise":{"id":"reference/stm/tpromise","title":"TPromise","description":"TPromise is a mutable reference that can be set exactly once and can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stm/tqueue":{"id":"reference/stm/tqueue","title":"TQueue","description":"A TQueue[A] is a mutable queue that can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stm/trandom":{"id":"reference/stm/trandom","title":"TRandom","description":"TRandom is a random service like Random that provides utilities to generate random numbers, but they can participate in STM transactions.","sidebar":"reference-sidebar"},"reference/stm/treentrantlock":{"id":"reference/stm/treentrantlock","title":"TReentrantLock","description":"A TReentrantLock allows safe concurrent access to some mutable state efficiently, allowing multiple fibers to read the","sidebar":"reference-sidebar"},"reference/stm/tref":{"id":"reference/stm/tref","title":"TRef","description":"A TRef[A] is a mutable reference to an immutable value, which can participate in transactions in STM. The mutable reference can be retrieved and set from within transactions, with strong guarantees for atomicity, consistency, and isolation from other transactions.","sidebar":"reference-sidebar"},"reference/stm/tsemaphore":{"id":"reference/stm/tsemaphore","title":"TSemaphore","description":"TSemaphore is a semaphore with transactional semantics that can be used to control access to a common resource. It","sidebar":"reference-sidebar"},"reference/stm/tset":{"id":"reference/stm/tset","title":"TSet","description":"A TSet[A] is a mutable set that can participate in transactions in STM.","sidebar":"reference-sidebar"},"reference/stream/index":{"id":"reference/stream/index","title":"Introduction","description":"The primary goal of a streaming library is to introduce a high-level API that abstracts the mechanism of reading and writing operations using data sources and destinations.","sidebar":"reference-sidebar"},"reference/stream/sink":{"id":"reference/stream/sink","title":"Sink","description":"Sink[E, A, L, B] is a type alias for ZSink[Any, E, A, L, B]. We can think of a Sink as a function that does not require any services and will consume a variable amount of A elements (could be 0, 1, or many!), might fail with an error of type E, and will eventually yield a value of type B. The L is the type of elements in the leftover.","sidebar":"reference-sidebar"},"reference/stream/stream":{"id":"reference/stream/stream","title":"Stream","description":"Stream[E, A] is a type alias for ZStream[Any, E, A], which represents a ZIO stream that does not require any services, and may fail with an E, or produce elements with an A.","sidebar":"reference-sidebar"},"reference/stream/subscription-ref":{"id":"reference/stream/subscription-ref","title":"SubscriptionRef","description":"A SubscriptionRef[A] is a Ref that lets us subscribe to receive the current value along with all changes to that value.","sidebar":"reference-sidebar"},"reference/stream/ustream":{"id":"reference/stream/ustream","title":"UStream","description":"UStream[A] is a type alias for ZStream[Any, Nothing, A], which represents a ZIO stream that does not require any services, it cannot fail, and after evaluation, it may emit zero or more values of type A.","sidebar":"reference-sidebar"},"reference/stream/zchannel":{"id":"reference/stream/zchannel","title":"ZChannel","description":"Channels are the nexus of communications, which support both reading and writing. They allow us to have a unidirectional flow of data from the input to the output.","sidebar":"reference-sidebar"},"reference/stream/zpipeline":{"id":"reference/stream/zpipeline","title":"ZPipeline","description":"Introduction","sidebar":"reference-sidebar"},"reference/stream/zsink":{"id":"reference/stream/zsink","title":"ZSink","description":"Introduction","sidebar":"reference-sidebar"},"reference/stream/zstream":{"id":"reference/stream/zstream","title":"ZStream","description":"Introduction","sidebar":"reference-sidebar"},"reference/sync/concurrentmap":{"id":"reference/sync/concurrentmap","title":"ConcurrentMap","description":"A ConcurrentMap is a wrapper over java.util.concurrent.ConcurrentHashMap.","sidebar":"reference-sidebar"},"reference/sync/concurrentset":{"id":"reference/sync/concurrentset","title":"ConcurrentSet","description":"A ConcurrentSet is a Set wrapper over java.util.concurrent.ConcurrentHashMap.","sidebar":"reference-sidebar"},"reference/sync/countdownlatch":{"id":"reference/sync/countdownlatch","title":"CountdownLatch","description":"A synchronization aid that allows one or more fibers to wait until a set of operations being performed in other fibers completes.","sidebar":"reference-sidebar"},"reference/sync/cyclicbarrier":{"id":"reference/sync/cyclicbarrier","title":"CyclicBarrier","description":"A synchronization aid that allows a set of fibers to all wait for each other to reach a common barrier point.","sidebar":"reference-sidebar"},"reference/sync/index":{"id":"reference/sync/index","title":"Introduction","description":"When we access shared resources in a concurrent environment, we should choose a proper synchronization mechanism to avoid incorrect results and data inconsistencies. ZIO provides a set of synchronization primitives and concurrent data structures in the zio-concurrent module that helps us to achieve the desired synchronization.","sidebar":"reference-sidebar"},"reference/sync/mvar":{"id":"reference/sync/mvar","title":"MVar","description":"An MVar[A] is a mutable location that is either empty or contains a value of type A. So the MVar acts like a single-element buffer."},"reference/sync/reentrantlock":{"id":"reference/sync/reentrantlock","title":"ReentrantLock","description":"A ReentrantLock is a lock which can be acquired multiple times by the same fiber. When a fiber acquires (lock) a reentrant lock, it will become the owner of that lock. Other fibers cannot obtain the lock unless the lock owner releases (unlock) the lock. As the lock is reentrant, the lock owner can call the lock again, multiple times.","sidebar":"reference-sidebar"},"reference/test/aspects/annotating-tests":{"id":"reference/test/aspects/annotating-tests","title":"Annotating Tests","description":"Measuring Execution Time","sidebar":"reference-sidebar"},"reference/test/aspects/before-after-around":{"id":"reference/test/aspects/before-after-around","title":"Before, After, and Around Test Aspects","description":"1. We can run a test before, after, or around every test:","sidebar":"reference-sidebar"},"reference/test/aspects/conditional":{"id":"reference/test/aspects/conditional","title":"Conditional Aspects","description":"When we apply a conditional aspect, it will run the spec only if the specified predicate is satisfied.","sidebar":"reference-sidebar"},"reference/test/aspects/configuring-tests":{"id":"reference/test/aspects/configuring-tests","title":"Configuring Tests","description":"To run cases, there are some default configuration settings which are used by test runner, such as repeats, retries, samples and shrinks. We can change these settings using test aspects:","sidebar":"reference-sidebar"},"reference/test/aspects/debugging-and-diagnostics":{"id":"reference/test/aspects/debugging-and-diagnostics","title":"Debugging and Diagnostics","description":"Debugging","sidebar":"reference-sidebar"},"reference/test/aspects/environment-specific-tests":{"id":"reference/test/aspects/environment-specific-tests","title":"Environment-specific Tests","description":"OS-specific Tests","sidebar":"reference-sidebar"},"reference/test/aspects/execution-strategy":{"id":"reference/test/aspects/execution-strategy","title":"Execution Strategy","description":"ZIO Test has two different strategies to run members of a test suite","sidebar":"reference-sidebar"},"reference/test/aspects/flaky-and-non-flaky-tests":{"id":"reference/test/aspects/flaky-and-non-flaky-tests","title":"Flaky and Non-flaky Tests","description":"Whenever we deal with concurrency issues or race conditions, we should ensure that our tests pass consistently. The nonFlaky is a test aspect to do that.","sidebar":"reference-sidebar"},"reference/test/aspects/ignoring-tests":{"id":"reference/test/aspects/ignoring-tests","title":"Ignoring Tests","description":"To ignore running a test, we can use the ignore test aspect:","sidebar":"reference-sidebar"},"reference/test/aspects/index":{"id":"reference/test/aspects/index","title":"Introduction to Test Aspects","description":"A TestAspect is an aspect that can be weaved into specs. We can think of an aspect as a polymorphic function, capable of transforming one test into another, possibly enlarging the environment or error type. We use them to change existing tests or even entire suites or specs that we have already created.","sidebar":"reference-sidebar"},"reference/test/aspects/non-deterministic-test-data":{"id":"reference/test/aspects/non-deterministic-test-data","title":"Non-deterministic Test Data","description":"The random process of the TestRandom is said to be deterministic since, with the initial seed, we can generate a sequence of predictable numbers. So with the same initial seed, it will generate the same sequence of numbers.","sidebar":"reference-sidebar"},"reference/test/aspects/passing-failed-tests":{"id":"reference/test/aspects/passing-failed-tests","title":"Passing Failed Tests","description":"The failing aspect makes a test that failed for any reason pass.","sidebar":"reference-sidebar"},"reference/test/aspects/repeat-and-retry":{"id":"reference/test/aspects/repeat-and-retry","title":"Repeat and Retry","description":"There are some situations where we need to repeat a test with a specific schedule, or our tests might fail, and we need to retry them until we make sure that our tests pass. ZIO Test has the following test aspects for these scenarios:","sidebar":"reference-sidebar"},"reference/test/aspects/restoring-state-of-test-services":{"id":"reference/test/aspects/restoring-state-of-test-services","title":"Restoring State of Test Services","description":"ZIO Test has some test aspects which restore the state of given restorable test services, such as TestClock, TestConsole, TestRandom and TestSystem, to their starting state after the test is run. Note that these test aspects are only useful when we are repeating tests.","sidebar":"reference-sidebar"},"reference/test/aspects/sized":{"id":"reference/test/aspects/sized","title":"Changing the Size of Sized Generators","description":"To change the default size used by sized generators we can use sized test aspect:","sidebar":"reference-sidebar"},"reference/test/aspects/timing-out-tests":{"id":"reference/test/aspects/timing-out-tests","title":"Timing-out Tests","description":"The timeout test aspect takes a duration and times out each test. If the test case runs longer than the time specified, it is immediately canceled and reported as a failure, with a message showing that the timeout was exceeded:","sidebar":"reference-sidebar"},"reference/test/assertions/built-in-assertions":{"id":"reference/test/assertions/built-in-assertions","title":"Built-in Assertions","description":"To create Assertion[A] object one can use functions defined under zio.test.Assertion. There are already a number of useful assertions predefined like equalTo, isFalse, isTrue, contains, throws and more.","sidebar":"reference-sidebar"},"reference/test/assertions/classic-assertions":{"id":"reference/test/assertions/classic-assertions","title":"Classic Assertions","description":"Note:","sidebar":"reference-sidebar"},"reference/test/assertions/examples":{"id":"reference/test/assertions/examples","title":"Examples","description":"Example 1: Equality Assertion","sidebar":"reference-sidebar"},"reference/test/assertions/how-it-works":{"id":"reference/test/assertions/how-it-works","title":"How it Works?","description":"_Note:_","sidebar":"reference-sidebar"},"reference/test/assertions/index":{"id":"reference/test/assertions/index","title":"Introduction","description":"Assertions are used to make sure that the assumptions on computations are exactly what we expect them to be. They are executable checks for a property that must be true in our code. Also, they can be seen as a specification of a program and facilitate understanding of programs.","sidebar":"reference-sidebar"},"reference/test/assertions/operations":{"id":"reference/test/assertions/operations","title":"Operations","description":"Logical Operations","sidebar":"reference-sidebar"},"reference/test/assertions/smart-assertions":{"id":"reference/test/assertions/smart-assertions","title":"Smart Assertions","description":"The smart assertion is a simple way to assert both ordinary values and ZIO effects. It uses the assertTrue function, which uses macro under the hood.","sidebar":"reference-sidebar"},"reference/test/gen":{"id":"reference/test/gen","title":"Gen","description":"A Gen[R, A] represents a generator of values of type A, which requires an environment R. The Gen data type is the base functionality for generating test data for property-based testing. We use them to produce deterministic and non-deterministic (PRNG) random values.","sidebar":"reference-sidebar"},"reference/test/index":{"id":"reference/test/index","title":"Introduction","description":"ZIO Test is a zero dependency testing library that makes it easy to test effectual programs. In ZIO Test, all tests are immutable values and tests are tightly integrated with ZIO, so testing effectual programs is as natural as testing pure ones.","sidebar":"reference-sidebar"},"reference/test/installation":{"id":"reference/test/installation","title":"Installing ZIO Test","description":"In order to use ZIO Test, we need to add the required configuration in our SBT settings:","sidebar":"reference-sidebar"},"reference/test/running-tests":{"id":"reference/test/running-tests","title":"Running Tests","description":"We can run ZIO Tests in two ways:","sidebar":"reference-sidebar"},"reference/test/services/clock":{"id":"reference/test/services/clock","title":"TestClock","description":"In most cases we want unit tests to be as fast as possible. Waiting for real time to pass by is a real killer for this.","sidebar":"reference-sidebar"},"reference/test/services/config":{"id":"reference/test/services/config","title":"TestConfig","description":"The TestConfig service provides access to default configuration settings used by ZIO Test:","sidebar":"reference-sidebar"},"reference/test/services/console":{"id":"reference/test/services/console","title":"TestConsole","description":"TestConsole allows testing of applications that interact with the console by modeling working with standard input and output as writing and reading to and from internal buffers:","sidebar":"reference-sidebar"},"reference/test/services/index":{"id":"reference/test/services/index","title":"Introduction","description":"ZIO Test has out of the box test implementations for all built-in ZIO services, such as Console, Clock, Random and System through the following modules:","sidebar":"reference-sidebar"},"reference/test/services/live":{"id":"reference/test/services/live","title":"Live","description":"The Live trait provides access to the live environment from within the test environment for effects such as printing test results to the console or timing out tests where it is necessary to access the real environment.","sidebar":"reference-sidebar"},"reference/test/services/random":{"id":"reference/test/services/random","title":"TestRandom","description":"When working with randomness, testing might be hard because the inputs to the tested function change on every invocation. So our code behaves in an indeterministic way.","sidebar":"reference-sidebar"},"reference/test/services/sized":{"id":"reference/test/services/sized","title":"Sized","description":"The Sized service enables the Sized Generators to access the size from the ZIO Test environment:","sidebar":"reference-sidebar"},"reference/test/services/system":{"id":"reference/test/services/system","title":"TestSystem","description":"TestSystem supports deterministic testing of effects involving system properties.","sidebar":"reference-sidebar"},"reference/test/sharing-layers-between-multiple-files":{"id":"reference/test/sharing-layers-between-multiple-files","title":"Sharing Layers Between Multiple Files","description":"In the previous example, we used the Spec#provideXYZShared methods to share layers between multiple specs in one file. In most cases, when the number of tests and specs grows, this is not a good idea. We want a way to share layers between multiple specs in different files.","sidebar":"reference-sidebar"},"reference/test/sharing-layers-within-the-same-file":{"id":"reference/test/sharing-layers-within-the-same-file","title":"Sharing Layers within the Same File","description":"The Spec data type has a very nice mechanism to share layers within all tests in a suite. So instead of acquiring and releasing dependencies for each test, we can share the layer within all tests. The test framework acquires that layer for once and shares that between all tests. When the execution of all tests is finished, that layer will be released. To share layers between multiple specs we can use Spec#provideXYZShared methods:","sidebar":"reference-sidebar"},"reference/test/spec":{"id":"reference/test/spec","title":"Spec","description":"Constructors","sidebar":"reference-sidebar"},"reference/test/test-hierarchies-and-organization":{"id":"reference/test/test-hierarchies-and-organization","title":"Test Hierarchies and Organization","description":"A Spec[R, E] is the backbone of ZIO Test. All specs require an environment of type R and may potentially fail with an error of type E.","sidebar":"reference-sidebar"},"reference/test/why-zio-test":{"id":"reference/test/why-zio-test","title":"Why ZIO Test?","description":"In this section, we will discuss important features of the ZIO Test which help us to test our effectual code easily.","sidebar":"reference-sidebar"},"reference/test/writing-our-first-test":{"id":"reference/test/writing-our-first-test","title":"Writing Our First Test","description":"Any object that implements the ZIOSpecDefault trait is a runnable test. So to start writing tests we need to extend ZIOSpecDefault, which requires a Spec:","sidebar":"reference-sidebar"},"resources/ecosystem/community/caliban":{"id":"resources/ecosystem/community/caliban","title":"Caliban","description":"Caliban is a purely functional library for creating GraphQL servers and clients in Scala.","sidebar":"resources-sidebar"},"resources/ecosystem/community/distage":{"id":"resources/ecosystem/community/distage","title":"Distage","description":"Distage is a compile-time safe, transparent, and debuggable Dependency Injection framework for pure FP Scala.","sidebar":"resources-sidebar"},"resources/ecosystem/community/index":{"id":"resources/ecosystem/community/index","title":"Introduction","description":"In this section we are going to introduce some of the most important libraries that have first-class ZIO support from the community.","sidebar":"resources-sidebar"},"resources/ecosystem/community/logstage":{"id":"resources/ecosystem/community/logstage","title":"LogStage","description":"LogStage is a zero-cost structural logging framework for Scala & Scala.js.","sidebar":"resources-sidebar"},"resources/ecosystem/community/munit-zio":{"id":"resources/ecosystem/community/munit-zio","title":"MUnit ZIO","description":"MUnit ZIO is an integration library between MUnit and ZIO.","sidebar":"resources-sidebar"},"resources/ecosystem/community/quill":{"id":"resources/ecosystem/community/quill","title":"Quill","description":"Quil is a Compile-time Language Integrated Queries for Scala.","sidebar":"resources-sidebar"},"resources/ecosystem/community/rezilience":{"id":"resources/ecosystem/community/rezilience","title":"Rezilience","description":"Rezilience is a ZIO-native library for making resilient distributed systems.","sidebar":"resources-sidebar"},"resources/ecosystem/community/tamer":{"id":"resources/ecosystem/community/tamer","title":"tamer","description":"Tamer","sidebar":"resources-sidebar"},"resources/ecosystem/community/tranzactio":{"id":"resources/ecosystem/community/tranzactio","title":"TranzactIO","description":"TranzactIO is a ZIO wrapper for some Scala database access libraries, currently for Doobie and Anorm.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-amqp":{"id":"resources/ecosystem/community/zio-amqp","title":"ZIO AMQP","description":"ZIO AMQP is a ZIO-based AMQP client for Scala.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-arrow":{"id":"resources/ecosystem/community/zio-arrow","title":"ZIO Arrow","description":"ZIO Arrow provides the ZArrow effect, which is a high-performance composition effect for the ZIO ecosystem.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-aws-s3":{"id":"resources/ecosystem/community/zio-aws-s3","title":"ZIO AWS S3","description":"ZIO AWS S3 is a ZIO integration with AWS S3 SDK.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-grpc":{"id":"resources/ecosystem/community/zio-grpc","title":"ZIO gRPC","description":"ZIO-gRPC lets us write purely functional gRPC servers and clients.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-http":{"id":"resources/ecosystem/community/zio-http","title":"ZIO HTTP","description":"ZIO HTTP is a scala library to write HTTP applications.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-k8s":{"id":"resources/ecosystem/community/zio-k8s","title":"ZIO K8s","description":"ZIO K8S is an idiomatic ZIO client for the Kubernetes API.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-kinesis":{"id":"resources/ecosystem/community/zio-kinesis","title":"ZIO Kinesis","description":"ZIO Kinesis is a ZIO-based AWS Kinesis client for Scala.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-pulsar":{"id":"resources/ecosystem/community/zio-pulsar","title":"ZIO Pulsar","description":"ZIO Pulsar is the Apache Pulsar client for Scala with ZIO and ZIO Streams integration.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-saga":{"id":"resources/ecosystem/community/zio-saga","title":"ZIO Saga","description":"ZIO Saga is a distributed transaction manager using Saga Pattern.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-slick-interop":{"id":"resources/ecosystem/community/zio-slick-interop","title":"ZIO Slick Interop","description":"ZIO Slick Interop is a small library, that provides interop between Slick and ZIO.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zio-test-akka-http":{"id":"resources/ecosystem/community/zio-test-akka-http","title":"ZIO Test Akka HTTP","description":"ZIO Test Akka HTTP is an Akka-HTTP Route TestKit for zio-test.","sidebar":"resources-sidebar"},"resources/ecosystem/community/zparkio":{"id":"resources/ecosystem/community/zparkio","title":"ZparkIO","description":"ZParkIO is a boilerplate framework to use Spark and ZIO together."},"resources/ecosystem/compatible":{"id":"resources/ecosystem/compatible","title":"ZIO Compatible Libraries","description":"List of ZIO compatible libraries:","sidebar":"resources-sidebar"},"resources/ecosystem/officials/index":{"id":"resources/ecosystem/officials/index","title":"Introduction","description":"Official ZIO libraries are hosted in the ZIO organization on Github, and are generally maintained by core contributors to ZIO.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-actors":{"id":"resources/ecosystem/officials/zio-actors","title":"ZIO Actors","description":"ZIO Actors is a high-performance, purely functional library for building, composing, and supervising typed actors based on ZIO.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-akka-cluster":{"id":"resources/ecosystem/officials/zio-akka-cluster","title":"ZIO Akka Cluster","description":"The ZIO Akka Cluster library is a ZIO wrapper on Akka Cluster. We can use clustering features of the Akka toolkit without the need to use the actor model.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-aws":{"id":"resources/ecosystem/officials/zio-aws","title":"ZIO AWS","description":"ZIO AWS is a low-level AWS wrapper for ZIO for all the AWS services using the AWS Java SDK v2.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-cache":{"id":"resources/ecosystem/officials/zio-cache","title":"ZIO Cache","description":"ZIO Cache is a library that makes it easy to optimize the performance of our application by caching values.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-config":{"id":"resources/ecosystem/officials/zio-config","title":"ZIO Config","description":"ZIO Config is a ZIO-based library for loading and parsing configuration sources.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-ftp":{"id":"resources/ecosystem/officials/zio-ftp","title":"ZIO FTP","description":"ZIO FTP is a simple, idiomatic (S)FTP client for ZIO.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-json":{"id":"resources/ecosystem/officials/zio-json","title":"ZIO JSON","description":"ZIO Json is a fast and secure JSON library with tight ZIO integration.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-kafka":{"id":"resources/ecosystem/officials/zio-kafka","title":"ZIO Kafka","description":"ZIO Kafka is a Kafka client for ZIO. It provides a purely functional, streams-based interface to the Kafka client and integrates effortlessly with ZIO and ZIO Streams.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-logging":{"id":"resources/ecosystem/officials/zio-logging","title":"ZIO Logging","description":"ZIO Logging is simple logging for ZIO apps, with correlation, context, and pluggable backends out of the box.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-metrics":{"id":"resources/ecosystem/officials/zio-metrics","title":"ZIO Metrics","description":"ZIO Metrcis is a high-performance, purely-functional library for adding instrumentation to any application, with a simple web client and JMX support.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-mock":{"id":"resources/ecosystem/officials/zio-mock","title":"ZIO Mock","description":"Installation","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-nio":{"id":"resources/ecosystem/officials/zio-nio","title":"ZIO NIO","description":"ZIO NIO is a small, unopinionated ZIO interface to NIO.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-optics":{"id":"resources/ecosystem/officials/zio-optics","title":"ZIO Optics","description":"ZIO Optics is a library that makes it easy to modify parts of larger data structures based on a single representation of an optic as a combination of a getter and setter.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-prelude":{"id":"resources/ecosystem/officials/zio-prelude","title":"ZIO Prelude","description":"ZIO Prelude is a lightweight, distinctly Scala take on functional abstractions, with tight ZIO integration.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-process":{"id":"resources/ecosystem/officials/zio-process","title":"ZIO Process","description":"ZIO Process is a simple ZIO library for interacting with external processes and command-line programs.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-query":{"id":"resources/ecosystem/officials/zio-query","title":"ZIO Query","description":"ZIO Query is a library for writing optimized queries to data sources in a high-level compositional style. It can add efficient pipelining, batching, and caching to any data source.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-redis":{"id":"resources/ecosystem/officials/zio-redis","title":"ZIO Redis","description":"ZIO Redis is a ZIO native Redis client.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-rocksdb":{"id":"resources/ecosystem/officials/zio-rocksdb","title":"ZIO RocksDB","description":"ZIO RocksDB is a ZIO-based interface to RocksDB.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-s3":{"id":"resources/ecosystem/officials/zio-s3","title":"ZIO S3","description":"ZIO S3 is an S3 client for ZIO.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-schema":{"id":"resources/ecosystem/officials/zio-schema","title":"ZIO Schema","description":"ZIO Schema is a ZIO-based library for modeling the schema of data structures as first-class values.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-sqs":{"id":"resources/ecosystem/officials/zio-sqs","title":"ZIO SQS","description":"ZIO SQS is a ZIO-powered client for AWS SQS. It is built on top of the AWS SDK for Java 2.0 via the automatically generated wrappers from zio-aws.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-telemetry":{"id":"resources/ecosystem/officials/zio-telemetry","title":"ZIO Telemetry","description":"ZIO telemetry is purely-functional and type-safe. It provides clients for OpenTracing and OpenTelemetry.","sidebar":"resources-sidebar"},"resources/ecosystem/officials/zio-zmx":{"id":"resources/ecosystem/officials/zio-zmx","title":"ZIO ZMX","description":"ZIO ZMX is a monitoring, metrics, and diagnostics toolkit for ZIO applications.","sidebar":"resources-sidebar"},"resources/ecosystem/templates":{"id":"resources/ecosystem/templates","title":"Project Templates","description":"List of project starters, bootstrap tools or, templates.","sidebar":"resources-sidebar"},"resources/ecosystem/tools":{"id":"resources/ecosystem/tools","title":"ZIO Tools","description":"- ZIO IntelliJ \u2014 A complimentary, community-developed plugin for IntelliJ IDEA, brings enhancements when using ZIO in your projects","sidebar":"resources-sidebar"},"resources/index":{"id":"resources/index","title":"Summary","description":"ZIO has a huge ecosystem of libraries, tools, talks, tutorials, and more. In this section, we are going to introduce some of the most important ones.","sidebar":"resources-sidebar"},"resources/learning/articles":{"id":"resources/learning/articles","title":"Articles","description":"These articles reflect the state of ZIO at the time of their publication. The code samples might be outdated, considering ZIO was early in development at the time they were written. However, the concepts are still relevant.","sidebar":"resources-sidebar"},"resources/learning/cheatsheets":{"id":"resources/learning/cheatsheets","title":"Cheat Sheets","description":"- ZIO Cheat Sheet","sidebar":"resources-sidebar"},"resources/learning/cookbooks":{"id":"resources/learning/cookbooks","title":"Cookbooks","description":"- ZIO Cookbook A beginners\' tour to ZIO by Boris V.Kuznetsov","sidebar":"resources-sidebar"},"resources/learning/poweredbyzio":{"id":"resources/learning/poweredbyzio","title":"Projects using ZIO","description":"- Rudder \u2014 an example about how to manage error ADT in several sub-projects and specialized sub-domains, and how one can gradually contextualize error messages in domain layers. Uses queues, resources, interop with Java, and historical code. See context and references.","sidebar":"resources-sidebar"},"resources/learning/sampleprojects":{"id":"resources/learning/sampleprojects","title":"Sample Projects","description":"- GitHub Release Pager with ZIO 2.0 by Pavels Sisojevs","sidebar":"resources-sidebar"},"resources/learning/videos":{"id":"resources/learning/videos","title":"Videos","description":"Functional Programming","sidebar":"resources-sidebar"}}}')}}]);