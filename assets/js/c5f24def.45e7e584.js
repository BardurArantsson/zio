"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[3086],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=s(r),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||i;return r?n.createElement(f,a(a({ref:t},c),{},{components:r})):n.createElement(f,a({ref:t},c))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=u;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,a[1]=p;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8206:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const i={id:"zio-arrow",title:"ZIO Arrow"},a=void 0,p={unversionedId:"resources/ecosystem/community/zio-arrow",id:"resources/ecosystem/community/zio-arrow",title:"ZIO Arrow",description:"ZIO Arrow provides the ZArrow effect, which is a high-performance composition effect for the ZIO ecosystem.",source:"@site/docs/resources/ecosystem/community/zio-arrow.md",sourceDirName:"resources/ecosystem/community",slug:"/resources/ecosystem/community/zio-arrow",permalink:"/resources/ecosystem/community/zio-arrow",draft:!1,editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/resources/ecosystem/community/zio-arrow.md",tags:[],version:"current",frontMatter:{id:"zio-arrow",title:"ZIO Arrow"},sidebar:"resources-sidebar",previous:{title:"ZIO AMQP",permalink:"/resources/ecosystem/community/zio-amqp"},next:{title:"ZIO AWS S3",permalink:"/resources/ecosystem/community/zio-aws-s3"}},l={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Installation",id:"installation",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}],c={toc:s};function m(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/zio-mesh/zio-arrow/"},"ZIO Arrow")," provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZArrow")," effect, which is a high-performance composition effect for the ZIO ecosystem."),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ZArrow[E, A, B]")," is an effect representing a computation parametrized over the input (",(0,o.kt)("inlineCode",{parentName:"p"},"A"),"), and the output (",(0,o.kt)("inlineCode",{parentName:"p"},"B"),") that may fail with an ",(0,o.kt)("inlineCode",{parentName:"p"},"E"),". Arrows focus on ",(0,o.kt)("strong",{parentName:"p"},"composition")," and ",(0,o.kt)("strong",{parentName:"p"},"high-performance computation"),". They are like simple functions, but they are lifted into the ",(0,o.kt)("inlineCode",{parentName:"p"},"ZArrow")," context."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ZArrow")," delivers three main capabilities:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"}," High-Performance")," \u2014 ",(0,o.kt)("inlineCode",{parentName:"p"},"ZArrow")," exploits ",(0,o.kt)("inlineCode",{parentName:"p"},"JVM")," internals to dramatically decrease the number of allocations and dispatches, yielding an unprecedented runtime performance.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Abstract interface")," \u2014 ",(0,o.kt)("inlineCode",{parentName:"p"},"Arrow")," is a more abstract data type, than ZIO Monad. It's more abstract than ZIO Streams. In a nutshell, ",(0,o.kt)("inlineCode",{parentName:"p"},"ZArrow")," allows a function-like interface that can have both different inputs and different outputs.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Easy Integration")," \u2014 ",(0,o.kt)("inlineCode",{parentName:"p"},"ZArrow")," can both input and output ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO Monad")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ZIO Stream"),", simplifying application development with different ZIO Effect types."))),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,o.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "io.github.neurodyne" %% "zio-arrow" % "0.2.1"\n')),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"In this example we are going to write a repetitive task of reading a number from standard input and then power by 2 and then print the result:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import zio.arrow.ZArrow\nimport zio.arrow.ZArrow._\nimport zio.console._\nimport zio.{ExitCode, URIO}\n\nimport java.io.IOException\n\nobject ArrowExample extends zio.App {\n\n  val isPositive : ZArrow[Nothing, Int, Boolean]     = ZArrow((_: Int) > 0)\n  val toStr      : ZArrow[Nothing, Any, String]      = ZArrow((i: Any) => i.toString)\n  val toInt      : ZArrow[Nothing, String, Int]      = ZArrow((i: String) => i.toInt)\n  val getLine    : ZArrow[IOException, Any, String]  = ZArrow.liftM((_: Any) => getStrLn.provide(Console.live))\n  val printStr   : ZArrow[IOException, String, Unit] = ZArrow.liftM((line: String) => putStr(line).provide(Console.live))\n  val printLine  : ZArrow[IOException, String, Unit] = ZArrow.liftM((line: String) => putStrLn(line).provide(Console.live))\n  val power2     : ZArrow[Nothing, Int, Double]      = ZArrow((i: Int) => Math.pow(i, 2))\n  val enterNumber: ZArrow[Nothing, Unit, String]     = ZArrow((_: Unit) => "Enter positive number (-1 to exit): ")\n  val goodbye    : ZArrow[Nothing, Any, String]      = ZArrow((_: Any) => "Goodbye!")\n\n  val app: ZArrow[IOException, Unit, Boolean] =\n    enterNumber >>> printStr >>> getLine >>> toInt >>>\n      ifThenElse(isPositive)(\n        power2 >>> toStr >>> printLine >>> ZArrow((_: Any) => true)\n      )(\n        ZArrow((_: Any) => false)\n      )\n\n  val myApp = whileDo(app)(ZArrow(_ => ())) >>> goodbye >>> printLine\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.run(()).exitCode\n}\n')),(0,o.kt)("p",null,"Let's see an example of running this program:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Enter positive number (-1 to exit): 25\n625.0\nEnter positive number (-1 to exit): 8\n64.0\nEnter positive number (-1 to exit): -1\nGoodbye!\n")),(0,o.kt)("h2",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=L8AEj6IRNEE"},"Blazing Fast, Pure Effects without Monads")," by John De Goes (Dec 2018)")))}m.isMDXComponent=!0}}]);