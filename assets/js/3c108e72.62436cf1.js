"use strict";(self.webpackChunkzio_site=self.webpackChunkzio_site||[]).push([[2994],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return u}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=o,f=d["".concat(s,".").concat(u)]||d[u]||p[u]||a;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function u(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},43:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return m},default:function(){return d}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={id:"distage",title:"Distage"},s=void 0,c={unversionedId:"resources/ecosystem/community/distage",id:"resources/ecosystem/community/distage",isDocsHomePage:!1,title:"Distage",description:"Distage is a compile-time safe, transparent, and debuggable Dependency Injection framework for pure FP Scala.",source:"@site/docs/resources/ecosystem/community/distage.md",sourceDirName:"resources/ecosystem/community",slug:"/resources/ecosystem/community/distage",permalink:"/next/resources/ecosystem/community/distage",editUrl:"https://github.com/zio/zio/edit/series/2.x/docs/resources/ecosystem/community/distage.md",tags:[],version:"current",frontMatter:{id:"distage",title:"Distage"},sidebar:"resources-sidebar",previous:{title:"Caliban",permalink:"/next/resources/ecosystem/community/caliban"},next:{title:"LogStage",permalink:"/next/resources/ecosystem/community/logstage"}},m=[{value:"Introduction",id:"introduction",children:[],level:2},{value:"Installation",id:"installation",children:[],level:2},{value:"Example",id:"example",children:[],level:2}],p={toc:m};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://izumi.7mind.io/distage/"},"Distage")," is a compile-time safe, transparent, and debuggable Dependency Injection framework for pure FP Scala."),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"By using ",(0,a.kt)("em",{parentName:"p"},"Distage")," we can auto-wire all components of our application."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We don't need to manually link components together"),(0,a.kt)("li",{parentName:"ul"},"We don't need to manually specify the order of allocation and allocation of dependencies. This will be derived automatically from the dependency order."),(0,a.kt)("li",{parentName:"ul"},"We can override any component within the dependency graph."),(0,a.kt)("li",{parentName:"ul"},"It helps us to create different configurations of our components for different use cases.")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"In order to use this library, we need to add the following line in our ",(0,a.kt)("inlineCode",{parentName:"p"},"build.sbt")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies += "io.7mind.izumi" %% "distage-core" % "1.0.8"\n')),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"In this example we create a ",(0,a.kt)("inlineCode",{parentName:"p"},"RandomApp")," comprising two ",(0,a.kt)("inlineCode",{parentName:"p"},"Random")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"Logger")," services. By using ",(0,a.kt)("inlineCode",{parentName:"p"},"ModuleDef")," we ",(0,a.kt)("em",{parentName:"p"},"bind")," services to their implementations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'import distage.{Activation, Injector, ModuleDef, Roots}\nimport izumi.distage.model.Locator\nimport izumi.distage.model.definition.Lifecycle\nimport zio.{ExitCode, Task, UIO, URIO, ZIO}\n\nimport java.time.LocalDateTime\n\ntrait Random {\n  def nextInteger: UIO[Int]\n}\n\nfinal class ScalaRandom extends Random {\n  override def nextInteger: UIO[Int] =\n    ZIO.effectTotal(scala.util.Random.nextInt())\n}\n\ntrait Logger {\n  def log(name: String): Task[Unit]\n}\n\nfinal class ConsoleLogger extends Logger {\n  override def log(line: String): Task[Unit] = {\n    val timeStamp = LocalDateTime.now()\n    ZIO.effect(println(s"$timeStamp: $line"))\n  }\n}\n\nfinal class RandomApp(random: Random, logger: Logger) {\n  def run: Task[Unit] = for {\n    random <- random.nextInteger\n    _ <- logger.log(s"random number generated: $random")\n  } yield ()\n}\n\nobject DistageExample extends zio.App {\n  def RandomAppModule: ModuleDef = new ModuleDef {\n    make[Random].from[ScalaRandom]\n    make[Logger].from[ConsoleLogger]\n    make[RandomApp] // `.from` is not required for concrete classes\n  }\n  \n  val resource: Lifecycle[Task, Locator] = Injector[Task]().produce(\n    plan = Injector[Task]().plan(\n      bindings = RandomAppModule,\n      activation = Activation.empty,\n      roots = Roots.target[RandomApp]\n    )\n  )\n\n  val myApp: Task[Unit] = resource.use(locator => locator.get[RandomApp].run)\n\n  override def run(args: List[String]): URIO[zio.ZEnv, ExitCode] =\n    myApp.exitCode\n}\n')))}d.isMDXComponent=!0}}]);